{
  "address": "0x53E2c9d230864841A20c782741B5fe5DaDCB2a2A",
  "abi": [
    {
      "inputs": [],
      "name": "EmptyObjects",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ErrorNotDeployer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ErrorNotDungeonFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FightDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        }
      ],
      "name": "GenObjectIdBiomeOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "GenObjectIdIdOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subType",
          "type": "uint256"
        }
      ],
      "name": "GenObjectIdSubTypeOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "IntOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ObjectNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chance",
          "type": "uint32"
        }
      ],
      "name": "TooHighChance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TooHighValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "objectSubType",
          "type": "uint8"
        }
      ],
      "name": "UnknownObjectTypeForSubtype",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "objectType",
          "type": "uint8"
        }
      ],
      "name": "UnknownObjectTypeGoc1",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "objectType",
          "type": "uint8"
        }
      ],
      "name": "UnknownObjectTypeGoc2",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "objectType",
          "type": "uint8"
        }
      ],
      "name": "UnknownObjectTypeGocLib1",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "objectType",
          "type": "uint8"
        }
      ],
      "name": "UnknownObjectTypeGocLib2",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chances",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxChances",
          "type": "uint32"
        }
      ],
      "name": "WrongChances",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongGetObjectTypeInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroChance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroStoryIdAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "biome",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "eventId",
              "type": "uint16"
            },
            {
              "internalType": "enum IGOC.ObjectSubType",
              "name": "subType",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "goodChance",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "goodAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "badAttributes",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "heal",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaRegen",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "lifeChancesRecovered",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "damage",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaConsumed",
              "type": "int32"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "mintItemsChances",
              "type": "uint32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IGOC.EventRegInfo",
          "name": "eventRegInfo",
          "type": "tuple"
        }
      ],
      "name": "EventRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "monsterId",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "biome",
              "type": "uint8"
            },
            {
              "internalType": "enum IGOC.ObjectSubType",
              "name": "subType",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "attributeIds",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "attributeValues",
              "type": "int32[]"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "maxDropItems",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "attackToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "attackTokenId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "attackType",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "mintItemsChances",
              "type": "uint32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IGOC.MonsterGenInfo",
          "name": "monsterGenInfo",
          "type": "tuple"
        }
      ],
      "name": "MonsterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "ObjectRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dungeonId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "enum IGOC.ObjectType",
          "name": "objectType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "hero",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iteration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "kill",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "heroToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "int32",
              "name": "heal",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaRegen",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "lifeChancesRecovered",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "damage",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaConsumed",
              "type": "int32"
            },
            {
              "internalType": "uint32",
              "name": "objectId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "heroTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iteration",
              "type": "uint256"
            },
            {
              "internalType": "uint32[]",
              "name": "rewriteNextObject",
              "type": "uint32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IGOC.ActionResult",
          "name": "result",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "ObjectResultEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "storyId",
          "type": "uint16"
        }
      ],
      "name": "StoryRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "dungeonId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "stageId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "action",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "kill",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "heroToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "int32",
              "name": "heal",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaRegen",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "lifeChancesRecovered",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "damage",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaConsumed",
              "type": "int32"
            },
            {
              "internalType": "uint32",
              "name": "objectId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "heroTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iteration",
              "type": "uint256"
            },
            {
              "internalType": "uint32[]",
              "name": "rewriteNextObject",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IGOC.ActionResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "getEventInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "goodChance",
              "type": "uint32"
            },
            {
              "internalType": "bytes32[]",
              "name": "goodAttributes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "badAttributes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "statsChange",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "mintItems",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IGOC.EventInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFightDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "objId",
          "type": "uint32"
        }
      ],
      "name": "getIteration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        }
      ],
      "name": "getLastHeroFightTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hero",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "getMonsterInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "monsterId",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "biome",
              "type": "uint8"
            },
            {
              "internalType": "enum IGOC.ObjectSubType",
              "name": "subType",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "attributeIds",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "attributeValues",
              "type": "int32[]"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "maxDropItems",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "attackToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "attackTokenId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "attackType",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "mintItemsChances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IGOC.MonsterGenInfo",
          "name": "mGenInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "generated",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "turnCounter",
              "type": "uint8"
            },
            {
              "internalType": "int32",
              "name": "hp",
              "type": "int32"
            },
            {
              "internalType": "uint32",
              "name": "amplifier",
              "type": "uint32"
            }
          ],
          "internalType": "struct IGOC.GeneratedMonster",
          "name": "gen",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMonsterMultiplier",
      "outputs": [
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        },
        {
          "internalType": "enum IGOC.ObjectSubType",
          "name": "subType",
          "type": "uint8"
        }
      ],
      "name": "getObjectIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "getObjectMeta",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "objectSubType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "getObjectTypeBySubType",
      "outputs": [
        {
          "internalType": "enum IGOC.ObjectType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "cTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "uint32[]",
          "name": "chances",
          "type": "uint32[]"
        },
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        }
      ],
      "name": "getRandomObject",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "getStoryId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "objId",
          "type": "uint32"
        }
      ],
      "name": "isAvailableForHero",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "isBattleObject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "open",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "iteration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "biome",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "eventId",
              "type": "uint16"
            },
            {
              "internalType": "enum IGOC.ObjectSubType",
              "name": "subType",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "goodChance",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "goodAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "badAttributes",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "heal",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaRegen",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "lifeChancesRecovered",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "damage",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "manaConsumed",
              "type": "int32"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "mintItemsChances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IGOC.EventRegInfo",
          "name": "regInfo",
          "type": "tuple"
        }
      ],
      "name": "registerEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "monsterId",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "biome",
              "type": "uint8"
            },
            {
              "internalType": "enum IGOC.ObjectSubType",
              "name": "subType",
              "type": "uint8"
            },
            {
              "internalType": "uint8[]",
              "name": "attributeIds",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "attributeValues",
              "type": "int32[]"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "maxDropItems",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "attackToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "attackTokenId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "attackType",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "mintItems",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "mintItemsChances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IGOC.MonsterGenInfo",
          "name": "monsterGenInfo",
          "type": "tuple"
        }
      ],
      "name": "registerMonster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "storyId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        },
        {
          "internalType": "enum IGOC.ObjectSubType",
          "name": "subType",
          "type": "uint8"
        }
      ],
      "name": "registerStory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "objectId",
          "type": "uint32"
        }
      ],
      "name": "removeObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5070780e93e4a8db82e4911ad29b4ebb733ceee7f783bbac56798427d7251236",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0x53E2c9d230864841A20c782741B5fe5DaDCB2a2A",
    "transactionIndex": 4,
    "gasUsed": "4866840",
    "logsBloom": "0x
    "blockHash": "0x0000559d000000edfd02c18552d4b8b2a1628c3be745912d821533e0b4cf81fa",
    "transactionHash": "0x5070780e93e4a8db82e4911ad29b4ebb733ceee7f783bbac56798427d7251236",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 47271061,
        "transactionHash": "0x5070780e93e4a8db82e4911ad29b4ebb733ceee7f783bbac56798427d7251236",
        "address": "0x53E2c9d230864841A20c782741B5fe5DaDCB2a2A",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x0000559d000000edfd02c18552d4b8b2a1628c3be745912d821533e0b4cf81fa"
      }
    ],
    "blockNumber": 47271061,
    "cumulativeGasUsed": "4967187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "ab128610a613a12ee3464e154c92869f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyObjects\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ErrorNotDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ErrorNotDungeonFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FightDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"}],\"name\":\"GenObjectIdBiomeOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GenObjectIdIdOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subType\",\"type\":\"uint256\"}],\"name\":\"GenObjectIdSubTypeOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"IntOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ObjectNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chance\",\"type\":\"uint32\"}],\"name\":\"TooHighChance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TooHighValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"objectSubType\",\"type\":\"uint8\"}],\"name\":\"UnknownObjectTypeForSubtype\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"objectType\",\"type\":\"uint8\"}],\"name\":\"UnknownObjectTypeGoc1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"objectType\",\"type\":\"uint8\"}],\"name\":\"UnknownObjectTypeGoc2\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"objectType\",\"type\":\"uint8\"}],\"name\":\"UnknownObjectTypeGocLib1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"objectType\",\"type\":\"uint8\"}],\"name\":\"UnknownObjectTypeGocLib2\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chances\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxChances\",\"type\":\"uint32\"}],\"name\":\"WrongChances\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongGetObjectTypeInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroStoryIdAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"eventId\",\"type\":\"uint16\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"goodChance\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"goodAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"badAttributes\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"heal\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaRegen\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"lifeChancesRecovered\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"damage\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaConsumed\",\"type\":\"int32\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"mintItemsChances\",\"type\":\"uint32[]\"}],\"indexed\":false,\"internalType\":\"struct IGOC.EventRegInfo\",\"name\":\"eventRegInfo\",\"type\":\"tuple\"}],\"name\":\"EventRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"monsterId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"attributeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"attributeValues\",\"type\":\"int32[]\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"maxDropItems\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"attackToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"attackTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"mintItemsChances\",\"type\":\"uint32[]\"}],\"indexed\":false,\"internalType\":\"struct IGOC.MonsterGenInfo\",\"name\":\"monsterGenInfo\",\"type\":\"tuple\"}],\"name\":\"MonsterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"ObjectRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dungeonId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enum IGOC.ObjectType\",\"name\":\"objectType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hero\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"kill\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"int32\",\"name\":\"heal\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaRegen\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"lifeChancesRecovered\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"damage\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaConsumed\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"rewriteNextObject\",\"type\":\"uint32[]\"}],\"indexed\":false,\"internalType\":\"struct IGOC.ActionResult\",\"name\":\"result\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"ObjectResultEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"storyId\",\"type\":\"uint16\"}],\"name\":\"StoryRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dungeonId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"action\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"kill\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"int32\",\"name\":\"heal\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaRegen\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"lifeChancesRecovered\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"damage\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaConsumed\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"rewriteNextObject\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IGOC.ActionResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"getEventInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"goodChance\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"goodAttributes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"badAttributes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"statsChange\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"mintItems\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IGOC.EventInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFightDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"objId\",\"type\":\"uint32\"}],\"name\":\"getIteration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"}],\"name\":\"getLastHeroFightTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hero\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"getMonsterInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"monsterId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"attributeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"attributeValues\",\"type\":\"int32[]\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"maxDropItems\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"attackToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"attackTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"mintItemsChances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IGOC.MonsterGenInfo\",\"name\":\"mGenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"generated\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"turnCounter\",\"type\":\"uint8\"},{\"internalType\":\"int32\",\"name\":\"hp\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"amplifier\",\"type\":\"uint32\"}],\"internalType\":\"struct IGOC.GeneratedMonster\",\"name\":\"gen\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMonsterMultiplier\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"}],\"name\":\"getObjectIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"getObjectMeta\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"objectSubType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"getObjectTypeBySubType\",\"outputs\":[{\"internalType\":\"enum IGOC.ObjectType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"cTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"}],\"name\":\"getRandomObject\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"getStoryId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"objId\",\"type\":\"uint32\"}],\"name\":\"isAvailableForHero\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"isBattleObject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"eventId\",\"type\":\"uint16\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"goodChance\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"goodAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"badAttributes\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"heal\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaRegen\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"lifeChancesRecovered\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"damage\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"manaConsumed\",\"type\":\"int32\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"mintItemsChances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IGOC.EventRegInfo\",\"name\":\"regInfo\",\"type\":\"tuple\"}],\"name\":\"registerEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"monsterId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"attributeIds\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"attributeValues\",\"type\":\"int32[]\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"maxDropItems\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"attackToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"attackTokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"mintItems\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"mintItemsChances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IGOC.MonsterGenInfo\",\"name\":\"monsterGenInfo\",\"type\":\"tuple\"}],\"name\":\"registerMonster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"storyId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"},{\"internalType\":\"enum IGOC.ObjectSubType\",\"name\":\"subType\",\"type\":\"uint8\"}],\"name\":\"registerStory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"objectId\",\"type\":\"uint32\"}],\"name\":\"removeObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"getObjectMeta(uint32)\":{\"details\":\"represent object registration if non zero values\"},\"getRandomObject(uint8[],uint32[],uint8,address,uint256)\":{\"details\":\"Chances in range 0-1e9\"},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"revision()\":{\"details\":\"Contract upgrade counter\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"VERSION()\":{\"notice\":\"Version of the contract\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/GameObjectController.sol\":\"GameObjectController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/core/GameObjectController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../proxy/Controllable.sol\\\";\\nimport \\\"../lib/GameObjectControllerLib.sol\\\";\\nimport \\\"../lib/PackingLib.sol\\\";\\nimport \\\"../lib/EventLib.sol\\\";\\nimport \\\"../lib/StoryLib.sol\\\";\\nimport \\\"../lib/MonsterLib.sol\\\";\\nimport \\\"../lib/GOCLib.sol\\\";\\n\\ncontract GameObjectController is Controllable, IGOC {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using PackingLib for bytes32;\\n  using PackingLib for uint16;\\n  using PackingLib for uint8;\\n  using PackingLib for address;\\n  using PackingLib for uint32[];\\n  using PackingLib for uint32;\\n  using PackingLib for uint64;\\n  using PackingLib for int32[];\\n  using PackingLib for int32;\\n\\n  //region ------------------------ CONSTANTS\\n\\n  /// @notice Version of the contract\\n  string public constant VERSION = \\\"1.1.5\\\";\\n  //endregion ------------------------ CONSTANTS\\n\\n  //region ------------------------ INITIALIZER\\n\\n  function init(address controller_) external initializer {\\n    __Controllable_init(controller_);\\n  }\\n  //endregion ------------------------ INITIALIZER\\n\\n  //region ------------------------ VIEWS\\n\\n  function getObjectMeta(uint32 objectId) external view override returns (uint8 biome, uint8 objectSubType) {\\n    return GameObjectControllerLib.getObjectMeta(objectId);\\n  }\\n\\n  function isAvailableForHero(address heroToken, uint heroTokenId, uint32 objId) external view returns (bool) {\\n    return GameObjectControllerLib.isAvailableForHero(IController(controller()), heroToken, heroTokenId, objId);\\n  }\\n\\n  function isBattleObject(uint32 objectId) external view override returns (bool) {\\n    return GameObjectControllerLib.isBattleObject(objectId);\\n  }\\n\\n  function getObjectTypeBySubType(uint32 objectId) external view returns (ObjectType) {\\n    return GameObjectControllerLib.getObjectTypeBySubType(objectId);\\n  }\\n\\n  function getMonsterInfo(address hero, uint heroId, uint32 objectId) external view returns (IGOC.MonsterGenInfo memory mGenInfo, IGOC.GeneratedMonster memory gen) {\\n    return GameObjectControllerLib.getMonsterInfo(hero, heroId, objectId);\\n  }\\n\\n  function getIteration(address heroToken, uint heroTokenId, uint32 objId) external view returns (uint) {\\n    return GameObjectControllerLib.getIteration(heroToken, heroTokenId, objId);\\n  }\\n\\n  function getLastHeroFightTs(address heroToken, uint heroTokenId) external view returns (uint) {\\n    return GameObjectControllerLib.getLastHeroFightTs(heroToken, heroTokenId);\\n  }\\n\\n  function getFightDelay() external view returns (uint) {\\n    return GameObjectControllerLib.getFightDelay();\\n  }\\n\\n  function getStoryId(uint32 objectId) external view returns (uint16) {\\n    return GameObjectControllerLib.getStoryId(objectId);\\n  }\\n\\n  function getEventInfo(uint32 objectId) external view returns (EventInfo memory) {\\n    return GameObjectControllerLib.getEventInfo(objectId);\\n  }\\n\\n  function getObjectIds(uint8 biome, ObjectSubType subType) external view returns (uint[] memory) {\\n    return GameObjectControllerLib.getObjectIds(biome, subType);\\n  }\\n\\n  function getMonsterMultiplier() external view returns (int32) {\\n    return MonsterLib.getMonsterMultiplier(IController(controller()));\\n  }\\n  //endregion ------------------------ VIEWS\\n\\n  //region ------------------------ REGISTRATION\\n\\n  function registerEvent(EventRegInfo memory regInfo) external {\\n    GameObjectControllerLib.registerEvent(IController(controller()), regInfo);\\n  }\\n\\n  function registerStory(uint16 storyId, uint8 biome, ObjectSubType subType) external {\\n    GameObjectControllerLib.registerStory(IController(controller()), storyId, biome, subType);\\n  }\\n\\n  function registerMonster(MonsterGenInfo memory monsterGenInfo) external {\\n    GameObjectControllerLib.registerMonster(IController(controller()), monsterGenInfo);\\n  }\\n\\n  function removeObject(uint32 objectId) external {\\n    GameObjectControllerLib.removeObject(IController(controller()), objectId);\\n  }\\n\\n  //endregion ------------------------ REGISTRATION\\n\\n  //region ------------------------ OBJECT\\n\\n  /// @dev Chances in range 0-1e9\\n  function getRandomObject(\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    uint8 biome,\\n    address heroToken,\\n    uint heroTokenId\\n  ) external override returns (uint32 objectId) {\\n    return GameObjectControllerLib.getRandomObject(IController(controller()), cTypes, chances, biome, heroToken, heroTokenId);\\n  }\\n\\n  function open(address heroToken, uint heroTokenId, uint32 objectId) external override returns (uint iteration) {\\n    return GameObjectControllerLib.open(IController(controller()), heroToken, heroTokenId, objectId);\\n  }\\n\\n  function action(\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 stageId,\\n    bytes memory data\\n  ) external override returns (ActionResult memory) {\\n    return GameObjectControllerLib.action(IController(controller()), sender, dungeonId, objectId, heroToken, heroTokenId, stageId, data);\\n  }\\n\\n  //endregion ------------------------ OBJECT\\n\\n}\\n\",\"keccak256\":\"0x3cc444c18e332f29190b17d961b95527c64c9ca195053779a7b212c82348620d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\n/// @notice All errors of the app\\ninterface IAppErrors {\\n  error ZeroAddress();\\n  error ZeroValueNotAllowed();\\n  error LengthsMismatch();\\n  error NotEnoughBalance();\\n\\n  //region Restrictions\\n  error ErrorNotDeployer(address sender);\\n  error ErrorNotGoc();\\n  error NotGovernance(address sender);\\n  error ErrorOnlyEoa();\\n  error NotEOA(address sender);\\n  error ErrorForbidden(address sender);\\n  error ErrorNotItemController(address sender);\\n  error ErrorNotHeroController(address sender);\\n  error ErrorNotDungeonFactory(address sender);\\n  error ErrorNotObjectController(address sender);\\n  //endregion Restrictions\\n\\n  //region Hero\\n  error ErrorHeroIsNotRegistered(address heroToken);\\n  error ErrorHeroIsDead(address heroToken, uint heroTokenId);\\n  error ErrorHeroNotInDungeon();\\n  error HeroInDungeon();\\n  error ErrorNotHeroOwner(address heroToken, address msgSender);\\n  error Staked(address heroToken, uint heroId);\\n  error HeroTokensVaultAlreadySet();\\n  error NameTaken();\\n  error TooBigName();\\n  error WrongSymbolsInTheName();\\n  error NoPayToken(address token, uint payTokenAmount);\\n  error AlreadyHaveReinforcement();\\n  //endregion Hero\\n\\n  //region Dungeon\\n  error ErrorDungeonIsFreeAlready();\\n  error ErrorNoEligibleDungeons();\\n  error ErrorDungeonBusy();\\n  error ErrorNoDungeonsForBiome(uint8 heroBiome);\\n  error ErrorDungeonCompleted();\\n  error ErrorAlreadyInDungeon();\\n  error NotEnoughTokens(uint balance, uint expectedBalance);\\n  error DungeonAlreadySpecific(uint16 dungNum);\\n  error DungeonAlreadySpecific2(uint16 dungNum);\\n  error WrongSpecificDungeon();\\n  //endregion Dungeon\\n\\n  //region Items\\n  error ErrorItemNotEligibleForTheSlot(uint itemType, uint8 itemSlot);\\n  error ErrorItemSlotBusyHand(uint8 slot);\\n  error ErrorItemSlotBusy();\\n  error ErrorItemNotInSlot();\\n  error ErrorConsumableItemIsUsed(address item);\\n  error ErrorCannotRemoveItemFromMap();\\n  error ItemEquipped();\\n  error ZeroItemMetaType();\\n  error ZeroLevel();\\n  error ItemTypeChanged();\\n  error ItemMetaTypeChanged();\\n  error UnknownItem(address item);\\n  error ItemIsAlreadyEquipped(address item);\\n  error ErrorEquipForbidden();\\n  error EquipForbiddenInDungeon();\\n  error TakeOffForbiddenInDungeon();\\n  error Consumable(address item);\\n  error NotConsumable(address item);\\n  error Broken(address item);\\n  error ZeroLife();\\n  error RequirementsToItemAttributes();\\n  error NotEquipped(address item);\\n  error ZeroDurability();\\n  error ZeroAugmentation();\\n  error TooHighAgLevel(uint8 augmentationLevel);\\n  error UseForbiddenZeroPayToken();\\n  error IncorrectMinMaxAttributeRange(int32 min, int32 max);\\n  error SameIdsNotAllowed();\\n  //endregion Items\\n\\n  //region Stages\\n  error ErrorWrongStage(uint stage);\\n  error ErrorNotStages();\\n  //endregion Stages\\n\\n  //region Level\\n  error ErrorWrongLevel(uint heroLevel);\\n  error ErrorLevelTooLow(uint heroLevel);\\n  error ErrorHeroLevelStartFrom1();\\n  error ErrorWrongLevelUpSum();\\n  error ErrorMaxLevel();\\n  //endregion Level\\n\\n  //region Treasure\\n  error ErrorNotValidTreasureToken(address treasureToken);\\n  //endregion Treasure\\n\\n  //region State\\n  error ErrorPaused();\\n  error ErrorNotReady();\\n  error ErrorNotObject1();\\n  error ErrorNotObject2();\\n  error ErrorNotCompleted();\\n  //endregion State\\n\\n  //region Biome\\n  error ErrorNotBiome();\\n  error ErrorIncorrectBiome(uint biome);\\n  error TooHighBiome(uint biome);\\n  //endregion Biome\\n\\n  //region Misc\\n  error ErrorWrongMultiplier(uint multiplier);\\n  error ErrorNotEnoughMana(uint32 mana, uint requiredMana);\\n  error ErrorExperienceMustNotDecrease();\\n  error ErrorNotEnoughExperience();\\n  error ErrorNotChances();\\n  error ErrorNotEligible(address heroToken, uint16 dungNum);\\n  error ErrorZeroKarmaNotAllowed();\\n  //endregion Misc\\n\\n  //region GOC\\n  error GenObjectIdBiomeOverflow(uint8 biome);\\n  error GenObjectIdSubTypeOverflow(uint subType);\\n  error GenObjectIdIdOverflow(uint id);\\n  error UnknownObjectTypeGoc1(uint8 objectType);\\n  error UnknownObjectTypeGoc2(uint8 objectType);\\n  error UnknownObjectTypeGocLib1(uint8 objectType);\\n  error UnknownObjectTypeGocLib2(uint8 objectType);\\n  error UnknownObjectTypeForSubtype(uint8 objectSubType);\\n  error FightDelay();\\n  error ZeroChance();\\n  error TooHighChance(uint32 chance);\\n  error TooHighRandom(uint random);\\n  error EmptyObjects();\\n  error ObjectNotFound();\\n  error WrongGetObjectTypeInput();\\n  error WrongChances(uint32 chances, uint32 maxChances);\\n  //endregion GOC\\n\\n  //region Story\\n  error PageNotRemovedError(uint pageId);\\n  error NotItem1();\\n  error NotItem2();\\n  error NotRandom(uint32 random);\\n  error NotHeroData();\\n  error NotGlobalData();\\n  error ZeroStoryIdRemoveStory();\\n  error ZeroStoryIdStoryAction();\\n  error ZeroStoryIdAction();\\n  error NotEnoughAmount(uint balance, uint requiredAmount);\\n  error NotAnswer();\\n  error AnswerStoryIdMismatch(uint16 storyId, uint16 storyIdFromAnswerHash);\\n  error AnswerPageIdMismatch(uint16 pageId, uint16 pageIdFromAnswerHash);\\n  //endregion Story\\n\\n  //region FightLib\\n  error NotMagic();\\n  error NotAType(uint atype);\\n  //endregion FightLib\\n\\n  //region MonsterLib\\n  error NotYourDebuffItem();\\n  error UnknownAttackType(uint attackType);\\n  error NotYourAttackItem();\\n  error NotYourBuffItem();\\n  //endregion MonsterLib\\n\\n  //region GameToken\\n  error ApproveToZeroAddress();\\n  error MintToZeroAddress();\\n  error TransferToZeroAddress();\\n  error TransferAmountExceedsBalance(uint balance, uint value);\\n  error InsufficientAllowance();\\n  error BurnAmountExceedsBalance();\\n  error NotMinter(address sender);\\n  //endregion GameToken\\n\\n  //region NFT\\n  error TokenTransferNotAllowed();\\n  error IdOverflow(uint id);\\n  error NotExistToken(uint tokenId);\\n  error EquippedItemIsNotAllowedToTransfer(uint tokenId);\\n  //endregion NFT\\n\\n  //region CalcLib\\n  error TooLowX(uint x);\\n  //endregion CalcLib\\n\\n  //region Controller\\n  error NotFutureGovernance(address sender);\\n  //endregion Controller\\n\\n  //region Oracle\\n  error OracleWrongInput();\\n  //region Oracle\\n\\n  //region ReinforcementController\\n  error AlreadyStaked();\\n  error MaxFee(uint8 fee);\\n  error StakeHeroNotStats();\\n  error NotStaked();\\n  error NoStakedHeroes();\\n  //region ReinforcementController\\n\\n  //region SponsoredHero\\n  error InvalidHeroClass();\\n  error ZeroAmount();\\n  error InvalidProof();\\n  error NoHeroesAvailable();\\n  error AlreadyRegistered();\\n  //endregion SponsoredHero\\n\\n  //region SacraRelay\\n  error SacraRelayNotOwner();\\n  error SacraRelayNotDelegator();\\n  error SacraRelayNotOperator();\\n  error SacraRelayInvalidChainId(uint callChainId, uint blockChainId);\\n  error SacraRelayInvalidNonce(uint callNonce, uint txNonce);\\n  error SacraRelayDeadline();\\n  error SacraRelayDelegationExpired();\\n  error SacraRelayNotAllowed();\\n  error SacraRelayInvalidSignature();\\n  /// @notice This error is generated when custom error is caught\\n  /// There is no info about custom error in SacraRelay\\n  /// but you can decode custom error by selector, see tests\\n  error SacraRelayNoErrorSelector(bytes4 selector, string tracingInfo);\\n  /// @notice This error is generated when custom error is caught\\n  /// There is no info about custom error in SacraRelay\\n  /// but you can decode custom error manually from {errorBytes} as following:\\n  /// if (keccak256(abi.encodeWithSignature(\\\"MyError()\\\")) == keccak256(errorBytes)) { ... }\\n  error SacraRelayUnexpectedReturnData(bytes errorBytes, string tracingInfo);\\n  error SacraRelayCallToNotContract(address notContract, string tracingInfo);\\n  //endregion SacraRelay\\n\\n  //region Misc\\n  error UnknownHeroClass(uint heroClass);\\n  error AbsDiff(int32 a, int32 b);\\n  //region Misc\\n}\\n\",\"keccak256\":\"0xc27d17dbfa76c8ebb21557d83e2ca966cfdf23bff69d6f632c0bf000ec6614b6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IApplicationEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"./IGOC.sol\\\";\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IDungeonFactory.sol\\\";\\nimport \\\"./IStoryController.sol\\\";\\nimport \\\"./IFightCalculator.sol\\\";\\n\\n/// @notice All events of the app\\ninterface IApplicationEvents {\\n\\n  //region ------------------ StatController\\n  event HeroItemSlotChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint itemType,\\n    uint itemSlot,\\n    address itemToken,\\n    uint itemTokenId,\\n    bool equip,\\n    address caller\\n  );\\n  event CurrentStatsChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    IStatController.ChangeableStats change,\\n    bool increase,\\n    address caller\\n  );\\n  event BonusAttributesChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    bool add,\\n    bool temporally,\\n    address caller\\n  );\\n  event TemporallyAttributesCleared(address heroToken, uint heroTokenId, address caller);\\n  event NewHeroInited(address heroToken, uint heroTokenId, IStatController.ChangeableStats stats);\\n  event LevelUp(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint heroClass,\\n    IStatController.CoreAttributes change\\n  );\\n  event ConsumableUsed(address heroToken, uint heroTokenId, address item);\\n  event RemoveConsumableUsage(address heroToken, uint heroTokenId, address item);\\n  event HeroCustomDataChanged(address token, uint tokenId, bytes32 index, uint value);\\n  event GlobalCustomDataChanged(bytes32 index, uint value);\\n  //endregion ------------------ StatController\\n\\n  //region ------------------ DungeonFactoryController\\n  event DungeonLaunched(\\n    uint16 dungeonLogicNum,\\n    uint64 dungeonId,\\n    address heroToken,\\n    uint heroTokenId,\\n    address treasuryToken,\\n    uint treasuryAmount\\n  );\\n\\n  event BossCompleted(uint32 objectId, uint biome, address hero, uint heroId);\\n  event FreeDungeonAdded(uint8 biome, uint64 dungeonId);\\n\\n  event ObjectOpened(uint64 dungId, address hero, uint id, uint32 objId, uint iteration, uint currentStage);\\n  event Clear(uint64 dungId);\\n\\n  event DungeonLogicRegistered(uint16 dungLogicId, IDungeonFactory.DungeonGenerateInfo info);\\n  event DungeonLogicRemoved(uint16 dungLogicId);\\n  event DungeonSpecificLogicRegistered(uint16 dungLogicId, uint biome, uint heroCls);\\n  event DungeonSpecificLogicRemoved(uint16 dungLogicId, uint heroLvl, uint heroCls);\\n  event DungeonRegistered(uint16 dungLogicId, uint64 dungeonId);\\n  event DungeonRemoved(uint16 dungLogicId, uint64 dungeonId);\\n  event MinLevelForTreasuryChanged(address token, uint level);\\n\\n  event ObjectAction(\\n    uint64 dungId,\\n    IGOC.ActionResult result,\\n    uint currentStage,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint newStage\\n  );\\n  /// @notice On add the item to the dungeon\\n  event AddTreasuryItem(uint64 dungId, address itemAdr, uint itemId);\\n  event AddTreasuryToken(uint64 dungId, address token, uint amount);\\n  event ClaimToken(uint64 dungId, address token, uint amount);\\n  event ClaimItem(uint64 dungId, address token, uint id);\\n\\n  event Entered(uint64 dungId, address hero, uint id);\\n  event DungeonCompleted(uint16 dungLogicNum, uint64 dungId, address hero, uint heroId);\\n  event Exit(uint64 dungId, bool claim);\\n  event FreeDungeonRemoved(uint8 biome, uint64 dungeonId);\\n  event HeroCurrentDungeonChanged(address hero, uint heroId, uint64 dungeonId);\\n  //endregion ------------------ DungeonFactoryController\\n\\n  //region ------------------ GameObjectController\\n  event EventRegistered(uint32 objectId, IGOC.EventRegInfo eventRegInfo);\\n  event StoryRegistered(uint32 objectId, uint16 storyId);\\n  event MonsterRegistered(uint32 objectId, IGOC.MonsterGenInfo monsterGenInfo);\\n  event ObjectRemoved(uint32 objectId);\\n  event ObjectResultEvent(\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    IGOC.ObjectType objectType,\\n    address hero,\\n    uint heroId,\\n    uint8 stageId,\\n    uint iteration,\\n    bytes data,\\n    IGOC.ActionResult result,\\n    uint salt\\n  );\\n  //endregion ------------------ GameObjectController\\n\\n  //region ------------------ StoryController\\n  event SetBurnItemsMeta(uint storyId, IStoryController.AnswerBurnRandomItemMeta meta);\\n  event SetNextObjRewriteMeta(uint storyId, IStoryController.NextObjRewriteMeta meta);\\n  event SetAnswersMeta(uint storyId, uint16[] answerPageIds, uint8[] answerHeroClasses, uint16[] answerIds);\\n  event SetAnswerNextPageMeta(uint storyId, IStoryController.AnswerNextPageMeta meta);\\n  event SetAnswerAttributeRequirements(uint storyId, IStoryController.AnswerAttributeRequirementsMeta meta);\\n  event SetAnswerItemRequirements(uint storyId, IStoryController.AnswerItemRequirementsMeta meta);\\n  event SetAnswerTokenRequirementsMeta(uint storyId, IStoryController.AnswerTokenRequirementsMeta meta);\\n  event SetAnswerAttributes(uint storyId, IStoryController.AnswerAttributesMeta meta);\\n  event SetAnswerHeroCustomDataRequirementMeta(uint storyId, IStoryController.AnswerCustomDataMeta meta);\\n  event SetAnswerGlobalCustomDataRequirementMeta(uint storyId, IStoryController.AnswerCustomDataMeta meta);\\n  event SetSuccessInfo(uint storyId, IStoryController.AnswerResultMeta meta);\\n  event SetFailInfo(uint storyId, IStoryController.AnswerResultMeta meta);\\n  event SetCustomDataResult(uint storyId, IStoryController.AnswerCustomDataResultMeta meta, IStoryController.CustomDataResult _type);\\n  event StoryCustomDataRequirements(uint storyId, bytes32 requiredCustomDataIndex, uint requiredCustomDataMinValue, uint requiredCustomDataMaxValue, bool requiredCustomDataIsHero);\\n  event StoryRequiredLevel(uint storyId, uint requiredLevel);\\n  event StoryFinalized(uint32 objectId, uint storyId);\\n  event StoryRemoved(uint32 objectId, uint storyId);\\n\\n  event ItemBurned(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint objectId,\\n    address nftToken,\\n    uint nftId,\\n    uint stageId,\\n    uint iteration\\n  );\\n\\n  event NotEquippedItemBurned(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint storyId,\\n    address nftToken,\\n    uint nftId,\\n    uint stageId,\\n    uint iteration\\n  );\\n\\n  event StoryChangeAttributes(\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint storyId,\\n    uint stageId,\\n    uint iteration,\\n    int32[] attributes\\n  );\\n  //endregion ------------------ StoryController\\n\\n  //region ------------------------ HeroController\\n  event HeroTokensVaultSet(address value);\\n  event HeroRegistered(address hero, uint8 heroClass, address payToken, uint payAmount);\\n  event HeroCreated(address hero, uint heroId, string name, address owner, string refCode);\\n  event BiomeChanged(address hero, uint heroId, uint8 biome);\\n  event LevelUp(address hero, uint heroId, address owner, IStatController.CoreAttributes change);\\n  event ReinforcementAsked(address hero, uint heroId, address helpHeroToken, uint helpHeroId);\\n  event ReinforcementReleased(address hero, uint heroId, address helperToken, uint helperId);\\n  event Killed(address hero, uint heroId, address killer, bytes32[] dropItems, uint dropTokenAmount);\\n  //endregion ------------------------ HeroController\\n\\n  //region ------------------------ FightLib\\n  event FightResultProcessed(\\n    address sender,\\n    IFightCalculator.FightInfoInternal result,\\n    IFightCalculator.FightCall callData,\\n    uint iteration\\n  );\\n  //endregion ------------------------ FightLib\\n\\n  //region ------------------------ Oracle\\n  event Random(uint number, uint max);\\n  //endregion ------------------------ Oracle\\n\\n  //region ------------------------ Controller\\n  event OfferGovernance(address newGov);\\n  event GovernanceAccepted(address gov);\\n  event StatControllerChanged(address value);\\n  event StoryControllerChanged(address value);\\n  event GameObjectControllerChanged(address value);\\n  event ReinforcementControllerChanged(address value);\\n  event OracleChanged(address value);\\n  event TreasuryChanged(address value);\\n  event ItemControllerChanged(address value);\\n  event HeroControllerChanged(address value);\\n  event GameTokenChanged(address value);\\n  event DungeonFactoryChanged(address value);\\n  event ProxyUpdated(address proxy, address logic);\\n  event Claimed(address token, uint amount);\\n  event TokenStatusChanged(address token, bool status);\\n  //endregion ------------------------ Controller\\n\\n  //region ------------------------ HeroTokensVault\\n  event Process(address token, uint amount, address from, uint toBurn, uint toTreasury, uint toGov);\\n  //endregion ------------------------ HeroTokensVault\\n\\n  //region ------------------------ ReinforcementController\\n  event HeroStaked(address heroToken, uint heroId, uint biome, uint score);\\n  event HeroWithdraw(address heroToken, uint heroId);\\n  event HeroAsk(address heroToken, uint heroId);\\n  event TokenRewardRegistered(address heroToken, uint heroId, address token, uint amountAdded, uint totalAmount);\\n  event NftRewardRegistered(address heroToken, uint heroId, address token, uint id);\\n  event ToHelperRatioChanged(uint value);\\n  event ClaimedToken(address heroToken, uint heroId, address token, uint amount, address recipient);\\n  event ClaimedItem(address heroToken, uint heroId, address item, uint itemId, address recipient);\\n  event MinLevelChanged(uint8 value);\\n  event MinLifeChancesChanged(uint value);\\n  //endregion ------------------------ ReinforcementController\\n\\n  //region ------------------------ Treasury\\n  event AssetsSentToDungeon(address dungeon, address token, uint amount);\\n  //endregion ------------------------ Treasury\\n\\n  //region ------------------------ EventLib\\n  event EventResult(uint64 dungeonId, address heroToken, uint heroTokenId, uint8 stageId, IStatController.ActionInternalInfo gen, uint iteration);\\n  //endregion ------------------------ EventLib\\n\\n  //region ------------------------ ItemStatsLib\\n  event ItemRegistered(address item, IItemController.RegisterItemParams info);\\n  event ItemRemoved(address item);\\n  event NewItemMinted(address item, uint itemId, IItemController.MintInfo info);\\n  event Equipped(address item, uint itemId, address heroToken, uint heroTokenId, uint8 itemSlot);\\n  event TakenOff(address item, uint itemId, address heroToken, uint heroTokenId, uint8 itemSlot, address destination);\\n  event ItemRepaired(address item, uint itemId, uint consumedItemId, uint16 baseDurability);\\n  event Augmented(address item, uint itemId, uint consumedItemId, uint8 augLevel, IItemController.AugmentInfo info);\\n  event NotAugmented(address item, uint itemId, uint consumedItemId, uint8 augLevel);\\n  event ReduceDurability(address item, uint itemId, uint newDurability);\\n  event Used(address item, uint tokenId, address heroToken, uint heroTokenId);\\n  event Destroyed(address item, uint itemId);\\n  //endregion ------------------------ ItemStatsLib\\n\\n  //region ------------------------ NFT and GameToken (only custom events, not ERC20/721 standards)\\n  event ChangePauseStatus(bool value);\\n  event MinterChanged(address value);\\n\\n  event UniqueUriChanged(uint id, string uri);\\n  event BaseUriChanged(string uri);\\n\\n  event HeroMinted(uint heroId);\\n  event HeroBurned(uint heroId);\\n  event HeroUriByStatusChanged(string uri, uint statusLvl);\\n\\n  event ItemMinted(uint tokenId);\\n  event ItemBurned(uint tokenId);\\n  event UriByRarityChanged(string uri, uint rarity);\\n  event SponsoredHeroCreated(address msgSender, address heroAddress, uint heroId, string heroName);\\n  //endregion ------------------------ NFT and GameToken (only custom events, not ERC20/721 standards)\\n}\\n\",\"keccak256\":\"0x59c0edaa6af913073e0555125fcde7caac611a153b6905a101d9373b49d76705\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IControllable {\\n\\n  function VERSION() external pure returns (string memory);\\n\\n  function revision() external view returns (uint);\\n\\n  function previousImplementation() external view returns (address);\\n\\n  function isController(address contract_) external view returns (bool);\\n\\n  function isGovernance(address contract_) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0x296b634c46b5d178b2408523fcf569ed370e20a719b7b3f2183b278631b94f65\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IController {\\n\\n  function governance() external view returns (address);\\n\\n  function statController() external view returns (address);\\n\\n  function storyController() external view returns (address);\\n\\n  function gameObjectController() external view returns (address);\\n\\n  function reinforcementController() external view returns (address);\\n\\n  function oracle() external view returns (address);\\n\\n  function treasury() external view returns (address);\\n\\n  function itemController() external view returns (address);\\n\\n  function heroController() external view returns (address);\\n\\n  function dungeonFactory() external view returns (address);\\n\\n  function gameToken() external view returns (address);\\n\\n  function validTreasuryTokens(address token) external view returns (bool);\\n\\n  function isDeployer(address adr) external view returns (bool);\\n\\n  function onPause() external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x277b18bde00efe407b007268d6a3b6524498d1616bf9ed9521980dd0048637dc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDungeonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"../openzeppelin/EnumerableMap.sol\\\";\\n\\ninterface IDungeonFactory {\\n\\n  /// @custom:storage-location erc7201:dungeon.factory.main\\n  struct MainState {\\n    /// @dev biome => dungeonLaunchedId\\n    mapping(uint => EnumerableSet.UintSet) freeDungeons;\\n    /// @dev hero + heroId + biome (packMapObject) -> completed\\n    mapping(bytes32 => bool) bossCompleted;\\n    /// @dev hero + heroId + dungNum (packDungeonKey) -> completed\\n    mapping(bytes32 => bool) specificDungeonCompleted;\\n    /// @notice Max biome completed by the hero\\n    /// @dev hero + heroId (nftPacked) -> max biome completed\\n    mapping(bytes32 => uint8) maxBiomeCompleted;\\n    /// @notice which dungeon the hero is currently in\\n    /// @dev hero+id => current DungeonId\\n    mapping(bytes32 => uint64) heroCurrentDungeon;\\n\\n    // ---\\n\\n    /// @notice Specific dungeon for the given pair of hero level + hero class\\n    ///         ALl specific dungeons are listed also in allSpecificDungeons\\n    /// @dev packUint8Array(specReqBiome, specReqHeroClass) => dungNum\\n    mapping(bytes32 => uint16) dungeonSpecific;\\n    /// @dev contains all specific dungNum for easy management\\n    EnumerableSet.UintSet allSpecificDungeons;\\n    /// @dev biome => dungNum\\n    mapping(uint8 => EnumerableSet.UintSet) dungeonsLogicByBiome;\\n\\n    // ---\\n\\n    /// @dev max available biome. auto-increment with new dung deploy\\n    uint8 maxBiome;\\n\\n    /// @notice Address of treasure token => min hero level required\\n    /// @dev manual threshold for treasury\\n    mapping(address => uint) minLevelForTreasury;\\n\\n    /// @notice Contains arrays for SKILL_1, SKILL_2, SKILL_3 with 0 or 1\\n    /// i.e. [0, 1, 0] means that durability of SKILL_2 should be reduced\\n    /// @dev hero + heroId => uint8[] array where idx = slotNum\\n    mapping(bytes32 => bytes32) skillSlotsForDurabilityReduction;\\n\\n    /// @notice Counter of dungeons, it's incremented on launch of a new dungeon\\n    uint64 dungeonCounter;\\n\\n    /// @dev dungNum = init attributes\\n    mapping(uint16 => DungeonAttributes) dungeonAttributes;\\n    /// @dev dungeonId => status\\n    mapping(uint64 => DungeonStatus) dungeonStatuses;\\n  }\\n\\n  struct ObjectGenerateInfo {\\n    /// @notice List of chamber types for each unique object\\n    /// @dev uint8 types, packed using PackingLib.packUint8Array\\n    bytes32[] objTypesByStages;\\n    /// @notice List of chances for each chamber type\\n    /// @dev uint64 chances\\n    uint32[][] objChancesByStages;\\n  }\\n\\n  struct DungeonGenerateInfo {\\n    /// @notice List of chamber types for each unique object\\n    uint8[][] objTypesByStages;\\n    /// @notice List of chances for each chamber type\\n    uint32[][] objChancesByStages;\\n\\n    uint32[] uniqObjects;\\n\\n    uint8 minLevel;\\n    uint8 maxLevel;\\n\\n    bytes32[] requiredCustomDataIndex;\\n    uint64[] requiredCustomDataMinValue;\\n    uint64[] requiredCustomDataMaxValue;\\n    bool[] requiredCustomDataIsHero;\\n  }\\n\\n  /// @notice Attributes of the given dungeon logic\\n  struct DungeonAttributes {\\n    /// @notice Total number of stages that should be passed to complete the dungeon\\n    uint8 stages;\\n    uint8 biome;\\n\\n    /// @notice Default list of objects that should be passed in the dungeon\\n    uint32[] uniqObjects;\\n\\n    /// @dev min+max (packUint8Array)\\n    bytes32 minMaxLevel;\\n\\n    bytes32[] requiredCustomDataIndex;\\n    /// @notice Packed DungeonGenerateInfo.requiredCustomData: MinValue, MaxValue, IsHero\\n    /// @dev min+max+isHero(packStoryCustomDataRequirements)\\n    bytes32[] requiredCustomDataValue;\\n\\n    ObjectGenerateInfo info;\\n  }\\n\\n  /// @notice Current status of the given dungeon\\n  struct DungeonStatus {\\n    uint64 dungeonId;\\n    /// @notice Dungeon logic id\\n    uint16 dungNum;\\n\\n    /// @notice True if the dungeon is completed by the hero\\n    bool isCompleted;\\n\\n    /// @notice Hero in the dungeon or 0\\n    address heroToken;\\n    uint heroTokenId;\\n    /// @notice Current object that should be passed by the hero. 0 - new object is not opened\\n    uint32 currentObject;\\n    /// @notice Current stage in the dungeon that should be passed by the hero.\\n    uint8 currentStage;\\n\\n    EnumerableMap.AddressToUintMap treasuryTokens;\\n    /// @notice All items that were minted on result of made actions\\n    bytes32[] treasuryItems;\\n\\n    /// @notice Total number of stages that should be passed to complete the dungeon\\n    /// This value can be bigger than length of uniqObjects\\n    uint8 stages;\\n    /// @notice List of objects to be passed in the stage. The list can be dynamically changed during passing the stages\\n    uint32[] uniqObjects;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////\\n\\n  function launchForNewHero(address heroToken, uint heroTokenId, address owner) external returns (uint64 dungeonId);\\n\\n  function maxBiomeCompleted(address heroToken, uint heroTokenId) external view returns (uint8);\\n\\n  function currentDungeon(address heroToken, uint heroTokenId) external view returns (uint64);\\n\\n  function skillSlotsForDurabilityReduction(address heroToken, uint heroTokenId) external view returns (uint8[] memory result);\\n\\n  function setBossCompleted(uint32 objectId, address heroToken, uint heroTokenId, uint8 heroBiome) external;\\n\\n}\\n\",\"keccak256\":\"0x2f24028d35a06e44dc9bd096d8a1807cfa64518ebd73692a1cc479736814b741\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbca9de297214bb9c30daefda5ecaedd0af2c3e8e0440403ad543fb33528c5ef8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa365c0e17de806f6262765ef6236512674ac8563a6ee3436e81cec7b1d87468e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe7d89e4cdfc41317d90bf469428b6ef17cec6eb6fccab0080bdf0378129d2708\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n  /**\\n   * @dev Returns the total amount of tokens stored by the contract.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n   * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n   * Use along with {totalSupply} to enumerate all tokens.\\n   */\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb4922e02edfabbe39d004e4c856701b6911d5d64174097f6c5c2ceee9b6faa3\",\"license\":\"MIT\"},\"contracts/interfaces/IFightCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IItemController.sol\\\";\\n\\ninterface IFightCalculator {\\n\\n  enum AttackType {\\n    UNKNOWN, // 0\\n    MELEE, // 1\\n    MAGIC, // 2\\n    SLOT_3,\\n    SLOT_4,\\n    SLOT_5,\\n    SLOT_6,\\n    SLOT_7,\\n    SLOT_8,\\n    SLOT_9,\\n    SLOT_10\\n  }\\n\\n  /// @notice Attacker info: suitable both for hero and monsters\\n  struct AttackInfo {\\n    /// @notice Type of the attack\\n    /// by default, if attack token presents, it's magic attack and not-magic otherwise\\n    /// but this logic can become more complicated after introducing new attack types\\n    AttackType attackType;\\n    /// @notice NFT selected by hero for attack, it should be equip on.\\n    /// If attacker is a monster, this is a special case (stub NFT with zero ID is used)\\n    address attackToken;\\n    uint attackTokenId;\\n    address[] skillTokens;\\n    uint[] skillTokenIds;\\n  }\\n\\n  struct FighterInfo {\\n    int32[] fighterAttributes;\\n    IStatController.ChangeableStats fighterStats;\\n    AttackType attackType;\\n    address attackToken;\\n    uint attackTokenId;\\n    uint race;\\n  }\\n\\n  struct Statuses {\\n    bool stun;\\n    bool burn;\\n    bool freeze;\\n    bool confuse;\\n    bool curse;\\n    bool poison;\\n    bool gotCriticalHit;\\n    bool missed;\\n    bool hitBlocked;\\n  }\\n\\n  struct FightResult {\\n    int32 healthA;\\n    int32 healthB;\\n    int32 manaConsumedA;\\n    int32 manaConsumedB;\\n  }\\n\\n  struct FightCall {\\n    FighterInfo fighterA;\\n    FighterInfo fighterB;\\n    uint64 dungeonId;\\n    uint32 objectId;\\n    address heroAdr;\\n    uint heroId;\\n    uint8 stageId;\\n    uint iteration;\\n    uint8 turn;\\n  }\\n\\n  struct SkillSlots {\\n    bool slot1;\\n    bool slot2;\\n    bool slot3;\\n  }\\n\\n  //region ------------------------ FightLib-internal (FightInfoInternal is required by IApplicationEvents..)\\n  struct FightInfoInternal {\\n    Fighter fighterA;\\n    Fighter fighterB;\\n  }\\n\\n  struct Fighter {\\n    IFightCalculator.FighterInfo info;\\n    IItemController.AttackInfo magicAttack;\\n    int32 health;\\n    int32 manaConsumed;\\n    int32 damage;\\n    int32 damagePoison;\\n    int32 damageReflect;\\n    IFightCalculator.Statuses statuses;\\n  }\\n  //endregion ------------------------ FightLib-internal\\n\\n  function fight(FightCall memory callData) external returns (FightResult memory);\\n}\\n\",\"keccak256\":\"0xdf9ba809ea21a35a24eed12bf80e53452b0d772623d59211a35498b518eb604b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGOC.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"./IController.sol\\\";\\n\\ninterface IGOC {\\n\\n  enum ObjectType {\\n    UNKNOWN, // 0\\n    EVENT, // 1\\n    MONSTER, // 2\\n    STORY, // 3\\n    END_SLOT\\n  }\\n\\n  enum ObjectSubType {\\n    UNKNOWN_0, // 0\\n    ENEMY_NPC_1, // 1\\n    ENEMY_NPC_SUPER_RARE_2, // 2\\n    BOSS_3, // 3\\n    SHRINE_4, // 4\\n    CHEST_5, // 5\\n    STORY_6, // 6\\n    STORY_UNIQUE_7, // 7\\n    SHRINE_UNIQUE_8, // 8\\n    CHEST_UNIQUE_9, // 9\\n    ENEMY_NPC_UNIQUE_10, // 10\\n    STORY_ON_ROAD_11, // 11\\n    STORY_UNDERGROUND_12, // 12\\n    STORY_NIGHT_CAMP_13, // 13\\n    STORY_MOUNTAIN_14, // 14\\n    STORY_WATER_15, // 15\\n    STORY_CASTLE_16, // 16\\n    STORY_HELL_17, // 17\\n    STORY_SPACE_18, // 18\\n    STORY_WOOD_19, // 19\\n    STORY_CATACOMBS_20, // 20\\n    STORY_BAD_HOUSE_21, // 21\\n    STORY_GOOD_TOWN_22, // 22\\n    STORY_BAD_TOWN_23, // 23\\n    STORY_BANDIT_CAMP_24, // 24\\n    STORY_BEAST_LAIR_25, // 25\\n    STORY_PRISON_26, // 26\\n    STORY_SWAMP_27, // 27\\n    STORY_INSIDE_28, // 28\\n    STORY_OUTSIDE_29, // 29\\n    STORY_INSIDE_RARE_30,\\n    STORY_OUTSIDE_RARE_31,\\n    ENEMY_NPC_INSIDE_32,\\n    ENEMY_NPC_INSIDE_RARE_33,\\n    ENEMY_NPC_OUTSIDE_34,\\n    ENEMY_NPC_OUTSIDE_RARE_35,\\n    END_SLOT\\n  }\\n\\n  /// @custom:storage-location erc7201:game.object.controller.main\\n  struct MainState {\\n\\n    /// @dev objId = biome(00) type(00) id(0000) => biome(uint8) + objType(uint8)\\n    /// Id is id of the event, story or monster.\\n    mapping(uint32 => bytes32) objectMeta;\\n\\n    /// @dev biome(uint8) + objType(uint8) => set of object id\\n    mapping(bytes32 => EnumerableSet.UintSet) objectIds;\\n\\n    /// @dev heroAdr180 + heroId64 + cType8 + biome8 => set of already played objects. Should be cleared periodically\\n    mapping(bytes32 => EnumerableSet.UintSet) playedObjects;\\n\\n    /// @dev HeroAdr(160) + heroId(uint64) + objId(uint32) => iteration count. It needs for properly emit events for every new entrance.\\n    mapping(bytes32 => uint) iterations;\\n\\n    /// @dev objId(uint32) => EventInfo\\n    mapping(uint32 => EventInfo) eventInfos;\\n\\n    /// @dev objId(uint32) => storyId\\n    mapping(uint32 => uint16) storyIds;\\n\\n    /// @dev objId(uint32) => MonsterInfo\\n    mapping(uint32 => MonsterInfo) monsterInfos;\\n\\n    /// @dev hero+id => last fight action timestamp\\n    mapping(bytes32 => uint) lastHeroFightTs;\\n\\n    /// @dev delay for user actions in fight (suppose to prevent bot actions)\\n    uint fightDelay;\\n  }\\n\\n  struct ActionResult {\\n    bool kill;\\n    bool completed;\\n    address heroToken;\\n    address[] mintItems;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n    uint32 objectId;\\n    uint32 experience;\\n    uint heroTokenId;\\n    uint iteration;\\n    uint32[] rewriteNextObject;\\n  }\\n\\n  struct EventInfo {\\n    /// @dev chance to use good or bad attributes/stats\\n    uint32 goodChance;\\n\\n    /// @dev toBytes32ArrayWithIds\\n    bytes32[] goodAttributes;\\n    bytes32[] badAttributes;\\n\\n    /// @dev experience(uint32) + heal(int32) + manaRegen(int32) + lifeChancesRecovered(int32) + damage(int32) + manaConsume(int32) packStatsChange\\n    bytes32 statsChange;\\n\\n    /// @dev item+chance packItemMintInfo\\n    bytes32[] mintItems;\\n  }\\n\\n  struct MonsterInfo {\\n    /// @dev toBytes32ArrayWithIds\\n    bytes32[] attributes;\\n    /// @dev level(uint8) + race(uint8) + experience(uint32) + maxDropItems(uint8) packMonsterStats\\n    bytes32 stats;\\n    /// @dev attackToken(160) + attackTokenId(uint64) + attackType(uint8) packAttackInfo\\n    bytes32 attackInfo;\\n\\n    /// @dev item+chance packItemMintInfo\\n    bytes32[] mintItems;\\n\\n    /// @dev heroAdr(160) + heroId(uint64) => iteration => GeneratedMonster packed\\n    mapping(bytes32 => mapping(uint => bytes32)) _generatedMonsters;\\n  }\\n\\n  struct MultiplierInfo {\\n    uint8 biome;\\n    uint totalSupply;\\n  }\\n\\n  struct GeneratedMonster {\\n    bool generated;\\n    uint8 turnCounter;\\n    int32 hp;\\n    uint32 amplifier;\\n  }\\n\\n  struct MonsterGenInfo {\\n    uint16 monsterId;\\n    uint8 biome;\\n    ObjectSubType subType;\\n\\n    uint8[] attributeIds;\\n    int32[] attributeValues;\\n\\n    uint8 level;\\n    uint8 race;\\n    uint32 experience;\\n    uint8 maxDropItems;\\n\\n    address attackToken;\\n    uint64 attackTokenId;\\n    uint8 attackType;\\n\\n    address[] mintItems;\\n    uint32[] mintItemsChances;\\n  }\\n\\n  struct ActionContext {\\n    address sender;\\n    address heroToken;\\n    IController controller;\\n    uint8 biome;\\n    uint8 objectSubType;\\n    uint8 stageId;\\n    uint32 objectId;\\n    uint64 dungeonId;\\n    uint heroTokenId;\\n    uint salt;\\n    uint iteration;\\n    bytes data;\\n  }\\n\\n  struct EventRegInfo {\\n    uint8 biome;\\n    uint16 eventId;\\n    ObjectSubType subType;\\n\\n    uint32 goodChance;\\n\\n    AttributeGenerateInfo goodAttributes;\\n    AttributeGenerateInfo badAttributes;\\n\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n\\n    address[] mintItems;\\n    uint32[] mintItemsChances;\\n  }\\n\\n  struct AttributeGenerateInfo {\\n    uint8[] ids;\\n    int32[] values;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  /// @dev represent object registration if non zero values\\n  function getObjectMeta(uint32 objectId) external view returns (uint8 biome, uint8 objectSubType);\\n\\n  function isBattleObject(uint32 objectId) external view returns (bool);\\n\\n  function getRandomObject(\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    uint8 biomeLevel,\\n    address heroToken,\\n    uint heroTokenId\\n  ) external returns (uint32 objectId);\\n\\n  function open(address heroToken, uint heroTokenId, uint32 objectId) external returns (uint iteration);\\n\\n  function action(\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 stageId,\\n    bytes memory data\\n  ) external returns (ActionResult memory);\\n\\n}\\n\",\"keccak256\":\"0x6493b091bb99b51586b94064eea3eb60f5fa921c5a6f7e061b3c491a73b89a9e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHeroController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IHeroController {\\n\\n  /// @custom:storage-location erc7201:hero.controller.main\\n  struct MainState {\\n\\n    /// @dev A central place for all hero tokens\\n    address heroTokensVault;\\n\\n    /// @dev heroAdr => packed tokenAdr160+ amount96\\n    mapping(address => bytes32) payToken;\\n\\n    /// @dev heroAdr => heroCls8\\n    mapping(address => uint8) heroClass;\\n\\n    // ---\\n\\n    /// @dev hero+id => individual hero name\\n    mapping(bytes32 => string) heroName;\\n\\n    /// @dev name => hero+id, needs for checking uniq names\\n    mapping(string => bytes32) nameToHero;\\n\\n    // ---\\n\\n    /// @dev hero+id => biome\\n    mapping(bytes32 => uint8) heroBiome;\\n\\n    /// @dev hero+id => rein hero+id\\n    mapping(bytes32 => bytes32) reinforcementHero;\\n\\n    /// @dev hero+id => rein packed attributes\\n    mapping(bytes32 => bytes32[]) reinforcementHeroAttributes;\\n  }\\n\\n  function heroClass(address hero) external view returns (uint8);\\n\\n  function heroBiome(address hero, uint heroId) external view returns (uint8);\\n\\n  function payTokenInfo(address hero) external view returns (address token, uint amount);\\n\\n  function heroReinforcementHelp(address hero, uint heroId) external view returns (address helperHeroToken, uint helperHeroId);\\n\\n  function score(address hero, uint heroId) external view returns (uint);\\n\\n  function isAllowedToTransfer(address hero, uint heroId) external view returns (bool);\\n\\n  function heroTokensVault() external view returns (address);\\n\\n  // ---\\n\\n  function create(address hero, string memory heroName_, bool enter) external returns (uint);\\n\\n  function kill(address hero, uint heroId) external returns (bytes32[] memory dropItems);\\n\\n  function releaseReinforcement(address hero, uint heroId) external returns (address helperToken, uint helperId);\\n\\n}\\n\",\"keccak256\":\"0x670ab48074f47c954a571035fb9abf04b193d524768b779047838e0990d39ef1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IItem.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IItem {\\n\\n  function isItem() external pure returns (bool);\\n\\n  function mintFor(address recipient) external returns (uint tokenId);\\n\\n  function burn(uint tokenId) external;\\n\\n  function controlledTransfer(address from, address to, uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x766165af1a0ef65f8969414e165fdbc38294b5f249d280a3be272cbaa90721a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IItemController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IGOC.sol\\\";\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IItemController {\\n\\n  /// @custom:storage-location erc7201:item.controlbler.main\\n  struct MainState {\\n\\n    ////////////////// GENERATE //////////////////\\n\\n    EnumerableSet.AddressSet items;\\n\\n    /// @dev itemAdr => itemMetaType8 + itemLvl8 + itemType8 + baseDurability16 + defaultRarity8 + minAttr8 + maxAttr8 + manaCost32 + req(packed core 128)\\n    mapping(address => bytes32) itemMeta;\\n\\n    /// @dev itemAdr => packed tokenAdr160+ amount96\\n    mapping(address => bytes32) augmentInfo;\\n\\n    // --- common attr ---\\n\\n    /// @dev itemAdr => id8 + min(int32) + max(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoAttributes;\\n\\n    // --- consumable ---\\n\\n    /// @dev itemAdr => ids+values (toBytes32ArrayWithIds)\\n    mapping(address => bytes32[]) _itemConsumableAttributes;\\n\\n    /// @dev itemAdr => IStatController.ChangeableStats packed int32[]\\n    mapping(address => bytes32) itemConsumableStats;\\n\\n    // --- buff ---\\n\\n    /// @dev itemAdr => id8 + min(int32) + max(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoCasterAttributes;\\n\\n    /// @dev itemAdr => id8 + minDmg(int32) + maxDmg(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoTargetAttributes;\\n\\n    // --- attack ---\\n\\n    /// @dev itemAdr => packed AttackInfo: attackType8 + min32 + max32 + factors(packed core 128)\\n    mapping(address => bytes32) generateInfoAttack;\\n\\n    ////////////////// ITEMS INFO //////////////////\\n\\n    /// @dev itemAdr+id => itemRarity8 + augmentationLevel8 + itemDurability16\\n    mapping(bytes32 => bytes32) itemInfo;\\n\\n    /// @dev itemAdr+id => heroAdr+id\\n    mapping(bytes32 => bytes32) equippedOn;\\n\\n    // --- common attr ---\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemAttributes;\\n\\n    // --- consumable ---\\n\\n    // consumable stats unchangeable, get them by address\\n\\n    // --- buff ---\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemCasterAttributes;\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemTargetAttributes;\\n\\n    // --- attack ---\\n\\n    /// @dev itemAdr+Id => packed AttackInfo: attackType8 + min32 + max32 + factors(packed core 128)\\n    mapping(bytes32 => bytes32) _itemAttackInfo;\\n\\n  }\\n\\n  struct RegisterItemParams {\\n    ItemMeta itemMeta;\\n    address augmentToken;\\n    uint augmentAmount;\\n    ItemGenerateInfo commonAttributes;\\n\\n    IGOC.AttributeGenerateInfo consumableAttributes;\\n    IStatController.ChangeableStats consumableStats;\\n\\n    ItemGenerateInfo casterAttributes;\\n    ItemGenerateInfo targetAttributes;\\n\\n    AttackInfo genAttackInfo;\\n  }\\n\\n  struct ItemGenerateInfo {\\n    /// @notice Attribute ids\\n    uint8[] ids;\\n    /// @notice Min value of the attribute, != 0\\n    int32[] mins;\\n    /// @notice Max value of the attribute, != 0\\n    int32[] maxs;\\n    /// @notice Chance of the selection [0..MAX_CHANCES]\\n    uint32[] chances;\\n  }\\n\\n  struct ItemMeta {\\n    uint8 itemMetaType;\\n    // Level in range 1-99. Reducing durability in low level dungeons. lvl/5+1 = biome\\n    uint8 itemLevel;\\n    IItemController.ItemType itemType;\\n    uint16 baseDurability;\\n    uint8 defaultRarity;\\n    uint32 manaCost;\\n\\n    // it doesn't include positions with 100% chance\\n    uint8 minRandomAttributes;\\n    uint8 maxRandomAttributes;\\n\\n    IStatController.CoreAttributes requirements;\\n  }\\n\\n  enum FeeType {\\n    UNKNOWN,\\n    REPAIR,\\n    AUGMENT,\\n    STORY,\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemRarity {\\n    UNKNOWN, // 0\\n    NORMAL, // 1\\n    MAGIC, // 2\\n    RARE, // 3\\n    SET, // 4\\n    UNIQUE, // 5\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemType {\\n    NO_SLOT, // 0\\n    HEAD, // 1\\n    BODY, // 2\\n    GLOVES, // 3\\n    BELT, // 4\\n    AMULET, // 5\\n    RING, // 6\\n    OFF_HAND, // 7\\n    BOOTS, // 8\\n    ONE_HAND, // 9\\n    TWO_HAND, // 10\\n    SKILL, // 11\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemMetaType {\\n    UNKNOWN, // 0\\n    COMMON, // 1\\n    ATTACK, // 2\\n    BUFF, // 3\\n    CONSUMABLE, // 4\\n\\n    END_SLOT\\n  }\\n\\n  enum AttackType {\\n    UNKNOWN, // 0\\n    FIRE, // 1\\n    COLD, // 2\\n    LIGHTNING, // 3\\n    CHAOS, // 4\\n\\n    END_SLOT\\n  }\\n\\n  struct AttackInfo {\\n    AttackType aType;\\n    int32 min;\\n    int32 max;\\n    // if not zero - activate attribute factor for the attribute\\n    IStatController.CoreAttributes attributeFactors;\\n  }\\n\\n  struct ItemInfo {\\n    ItemRarity rarity;\\n    uint8 augmentationLevel;\\n    uint16 durability;\\n  }\\n\\n  /// @dev The struct is used in events, so it's moved here from the lib\\n  struct MintInfo {\\n    IItemController.ItemMeta meta;\\n    uint8[] attributesIds;\\n    int32[] attributesValues;\\n    IItemController.ItemRarity itemRarity;\\n\\n    IItemController.AttackInfo attackInfo;\\n\\n    uint8[] casterIds;\\n    int32[] casterValues;\\n    uint8[] targetIds;\\n    int32[] targetValues;\\n  }\\n\\n  /// @dev The struct is used in events, so it's moved here from the lib\\n  struct AugmentInfo {\\n    uint8[] attributesIds;\\n    int32[] attributesValues;\\n    IItemController.AttackInfo attackInfo;\\n    uint8[] casterIds;\\n    int32[] casterValues;\\n    uint8[] targetIds;\\n    int32[] targetValues;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  function itemMeta(address item) external view returns (ItemMeta memory meta);\\n\\n  function augmentInfo(address item) external view returns (address token, uint amount);\\n\\n  function genAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genCasterAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genTargetAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genAttackInfo(address item) external view returns (AttackInfo memory info);\\n\\n  function itemInfo(address item, uint itemId) external view returns (ItemInfo memory info);\\n\\n  function equippedOn(address item, uint itemId) external view returns (address hero, uint heroId);\\n\\n  function itemAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function consumableAttributes(address item) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function consumableStats(address item) external view returns (IStatController.ChangeableStats memory stats);\\n\\n  function casterAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function targetAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function itemAttackInfo(address item, uint itemId) external view returns (AttackInfo memory info);\\n\\n  function score(address item, uint tokenId) external view returns (uint);\\n\\n  function isAllowedToTransfer(address item, uint tokenId) external view returns (bool);\\n\\n  // ---\\n\\n  function mint(address item, address recipient) external returns (uint itemId);\\n\\n  function reduceDurability(address hero, uint heroId, uint8 biome) external;\\n\\n  function destroy(address item, uint tokenId) external;\\n\\n  function takeOffDirectly(\\n    address item,\\n    uint itemId,\\n    address hero,\\n    uint heroId,\\n    uint8 itemSlot,\\n    address destination,\\n    bool broken\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36d2a1f44e3f2308ea27ca7579d40f374efd27e8eca1737253c7b1598313d3f7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IOracle {\\n\\n  function getRandomNumber(uint max, uint seed) external returns (uint);\\n\\n  function getRandomNumberInRange(uint min, uint max, uint seed) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x75a2bed27cbd9be6c76b6f3e941ee5f6f55380f61cd867254a0c766fc3b71976\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStatController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IStatController {\\n\\n  /// @custom:storage-location erc7201:stat.controller.main\\n  struct MainState {\\n    mapping(bytes32 => bytes32[]) heroTotalAttributes;\\n    /// @dev heroAdr+heroId => int32 packed strength, dexterity, vitality, energy\\n    mapping(bytes32 => bytes32) _heroCore;\\n    mapping(bytes32 => bytes32[]) heroBonusAttributes;\\n    mapping(bytes32 => bytes32[]) heroTemporallyAttributes;\\n    /// @dev heroAdr+heroId => uint32 packed level, experience, life, mana, lifeChances\\n    mapping(bytes32 => bytes32) heroStats;\\n    /// @dev heroAdr+heroId+itemSlot => itemAdr + itemId\\n    mapping(bytes32 => bytes32) heroSlots;\\n    /// @dev heroAdr+heroId => busy slots uint8[] packed\\n    mapping(bytes32 => bytes32) heroBusySlots;\\n    mapping(bytes32 => EnumerableSet.AddressSet) usedConsumables;\\n    mapping(bytes32 => mapping(bytes32 => uint)) heroCustomData;\\n    mapping(bytes32 => uint) globalCustomData;\\n  }\\n\\n\\n  enum ATTRIBUTES {\\n    // core\\n    STRENGTH, // 0\\n    DEXTERITY, // 1\\n    VITALITY, // 2\\n    ENERGY, // 3\\n    // attributes\\n    DAMAGE_MIN, // 4\\n    DAMAGE_MAX, // 5\\n    ATTACK_RATING, // 6\\n    DEFENSE, // 7\\n    BLOCK_RATING, // 8\\n    LIFE, // 9\\n    MANA, // 10\\n    // resistance\\n    FIRE_RESISTANCE, // 11\\n    COLD_RESISTANCE, // 12\\n    LIGHTNING_RESISTANCE, // 13\\n    // dmg against\\n    DMG_AGAINST_HUMAN, // 14\\n    DMG_AGAINST_UNDEAD, // 15\\n    DMG_AGAINST_DAEMON, // 16\\n    DMG_AGAINST_BEAST, // 17\\n\\n    // defence against\\n    DEF_AGAINST_HUMAN, // 18\\n    DEF_AGAINST_UNDEAD, // 19\\n    DEF_AGAINST_DAEMON, // 20\\n    DEF_AGAINST_BEAST, // 21\\n\\n    // --- unique, not augmentable\\n    // hero will not die until have positive chances\\n    LIFE_CHANCES, // 22\\n    // increase chance to get an item\\n    MAGIC_FIND, // 23\\n    // decrease chance to get an item\\n    DESTROY_ITEMS, // 24\\n    // percent of chance x2 dmg\\n    CRITICAL_HIT, // 25\\n    // dmg factors\\n    MELEE_DMG_FACTOR, // 26\\n    FIRE_DMG_FACTOR, // 27\\n    COLD_DMG_FACTOR, // 28\\n    LIGHTNING_DMG_FACTOR, // 29\\n    // increase attack rating on given percent\\n    AR_FACTOR, // 30\\n    // percent of damage will be converted to HP\\n    LIFE_STOLEN_PER_HIT, // 31\\n    // amount of mana restored after each battle\\n    MANA_AFTER_KILL, // 32\\n    // reduce all damage on percent after all other reductions\\n    DAMAGE_REDUCTION, // 33\\n\\n    // -- statuses\\n    // chance to stun an enemy, stunned enemy skip next hit\\n    STUN, // 34\\n    // chance burn an enemy, burned enemy will loss 50% of defence\\n    BURN, // 35\\n    // chance freeze an enemy, frozen enemy will loss 50% of MELEE damage\\n    FREEZE, // 36\\n    // chance to reduce enemy's attack rating on 50%\\n    CONFUSE, // 37\\n    // chance curse an enemy, cursed enemy will loss 50% of resistance\\n    CURSE, // 38\\n    // percent of dmg return to attacker\\n    REFLECT_DAMAGE_MELEE, // 39\\n    REFLECT_DAMAGE_MAGIC, // 40\\n    // chance to poison enemy, poisoned enemy will loss 10% of the current health\\n    POISON, // 41\\n    // reduce chance get any of uniq statuses\\n    RESIST_TO_STATUSES, // 42\\n\\n    END_SLOT // 46\\n  }\\n\\n  // possible\\n  // HEAL_FACTOR\\n\\n  struct CoreAttributes {\\n    int32 strength;\\n    int32 dexterity;\\n    int32 vitality;\\n    int32 energy;\\n  }\\n\\n  struct ChangeableStats {\\n    uint32 level;\\n    uint32 experience;\\n    uint32 life;\\n    uint32 mana;\\n    uint32 lifeChances;\\n  }\\n\\n  enum ItemSlots {\\n    UNKNOWN, // 0\\n    HEAD, // 1\\n    BODY, // 2\\n    GLOVES, // 3\\n    BELT, // 4\\n    AMULET, // 5\\n    BOOTS, // 6\\n    RIGHT_RING, // 7\\n    LEFT_RING, // 8\\n    RIGHT_HAND, // 9\\n    LEFT_HAND, // 10\\n    TWO_HAND, // 11\\n    SKILL_1, // 12\\n    SKILL_2, // 13\\n    SKILL_3, // 14\\n    END_SLOT // 15\\n  }\\n\\n  struct NftItem {\\n    address token;\\n    uint tokenId;\\n  }\\n\\n  enum Race {\\n    UNKNOWN, // 0\\n    HUMAN, // 1\\n    UNDEAD, // 2\\n    DAEMON, // 3\\n    BEAST, // 4\\n    END_SLOT // 5\\n  }\\n\\n  struct ChangeAttributesInfo {\\n    address heroToken;\\n    uint heroTokenId;\\n    int32[] changeAttributes;\\n    bool add;\\n    bool temporally;\\n  }\\n\\n  struct BuffInfo {\\n    address heroToken;\\n    uint heroTokenId;\\n    uint32 heroLevel;\\n    address[] buffTokens;\\n    uint[] buffTokenIds;\\n  }\\n\\n  /// @dev This struct is used inside event, so it's moved here from lib\\n  struct ActionInternalInfo {\\n    int32[] posAttributes;\\n    int32[] negAttributes;\\n\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n\\n    address[] mintedItems;\\n  }\\n\\n  function initNewHero(address token, uint tokenId, uint heroClass) external;\\n\\n  function heroAttributes(address token, uint tokenId) external view returns (int32[] memory);\\n\\n  function heroAttribute(address token, uint tokenId, uint index) external view returns (int32);\\n\\n  function heroAttributesLength(address token, uint tokenId) external view returns (uint);\\n\\n  function heroBaseAttributes(address token, uint tokenId) external view returns (CoreAttributes memory);\\n\\n  function heroCustomData(address token, uint tokenId, bytes32 index) external view returns (uint);\\n\\n  function globalCustomData(bytes32 index) external view returns (uint);\\n\\n  function heroStats(address token, uint tokenId) external view returns (ChangeableStats memory);\\n\\n  function heroItemSlot(address token, uint64 tokenId, uint8 itemSlot) external view returns (bytes32 nftPacked);\\n\\n  function heroItemSlots(address heroToken, uint heroTokenId) external view returns (uint8[] memory);\\n\\n  function isHeroAlive(address heroToken, uint heroTokenId) external view returns (bool);\\n\\n  function levelUp(address token, uint tokenId, uint heroClass, CoreAttributes memory change) external returns (uint newLvl);\\n\\n  function changeHeroItemSlot(\\n    address heroToken,\\n    uint64 heroTokenId,\\n    uint itemType,\\n    uint8 itemSlot,\\n    address itemToken,\\n    uint itemTokenId,\\n    bool equip\\n  ) external;\\n\\n  function changeCurrentStats(\\n    address token,\\n    uint tokenId,\\n    ChangeableStats memory change,\\n    bool increase\\n  ) external;\\n\\n  function changeBonusAttributes(ChangeAttributesInfo memory info) external;\\n\\n  function registerConsumableUsage(address heroToken, uint heroTokenId, address item) external;\\n\\n  function clearUsedConsumables(address heroToken, uint heroTokenId) external;\\n\\n  function clearTemporallyAttributes(address heroToken, uint heroTokenId) external;\\n\\n  function buffHero(BuffInfo memory info) external view returns (int32[] memory attributes, int32 manaConsumed);\\n\\n  function setHeroCustomData(address token, uint tokenId, bytes32 index, uint value) external;\\n\\n  function setGlobalCustomData(bytes32 index, uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x92bcc6057f867ff0d418fd9ec397578444c5fd6244b979782c2ddd14b607a561\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStoryController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IHeroController.sol\\\";\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IStoryController {\\n\\n  enum AnswerResultId {\\n    UNKNOWN, // 0\\n    SUCCESS, // 1\\n    ATTRIBUTE_FAIL, // 2\\n    RANDOM_FAIL, // 3\\n    DELAY_FAIL, // 4\\n    HERO_CUSTOM_DATA_FAIL, // 5\\n    GLOBAL_CUSTOM_DATA_FAIL, // 6\\n\\n    END_SLOT\\n  }\\n\\n  enum CustomDataResult {\\n    UNKNOWN, // 0\\n    HERO_SUCCESS, // 1\\n    HERO_FAIL, // 2\\n    GLOBAL_SUCCESS, // 3\\n    GLOBAL_FAIL, // 4\\n\\n    END_SLOT\\n  }\\n\\n  /// @custom:storage-location erc7201:story.controller.main\\n  struct MainState {\\n\\n    // --- STORY REG INFO ---\\n\\n    /// @dev Uniq story identification.\\n    mapping(uint32 => uint16) storyIds;\\n    /// @dev Revers mapping for stories for using in the next object rewrite logic.\\n    mapping(uint16 => uint32) idToStory;\\n    /// @dev Store used ids for stories.\\n    mapping(uint16 => bool) _usedStoryIds;\\n    /// @dev Prevent register the story twice\\n    mapping(uint32 => bool) registeredStories;\\n\\n    // --- ANSWER MAPPING ---\\n\\n    /// @dev storyId => all story pages. We need to have this mapping for properly remove meta info\\n    mapping(uint16 => EnumerableSet.UintSet) allStoryPages;\\n\\n    /// @dev storyId => all possible answers. We need to have this mapping for properly remove meta info\\n    mapping(uint16 => EnumerableSet.Bytes32Set) allStoryAnswers;\\n\\n    /// @dev storyId + pageId + heroClass (zero is default answers) => storyId + pageId + heroClass (zero is default answers) + answerId\\n    mapping(bytes32 => bytes32[]) answers;\\n    /// @dev answerUnPackedId + answerResultId => nextPageIds (will be chosen randomly from this array)\\n    ///      where answerResultId is:\\n    ///      0 - unknown,\\n    ///      1 - success,\\n    ///      2 - attr fail\\n    ///      3 - random fail\\n    ///      4 - delay fail\\n    ///      5 - hero custom data fail\\n    ///      6 - global custom data fail\\n    ///      see COUNT_ANSWER_RESULT_IDS\\n    mapping(bytes32 => uint16[]) nextPageIds;\\n    /// @dev story + pageId + heroClass (zero is default answers) => random nextObjs (adr + id, like packed nft id)\\n    mapping(bytes32 => uint32[]) nextObjectsRewrite;\\n\\n    /// @dev answerPackedId => packed array of uint32[]\\n    ///      0 - random requirement(uint32, 1 - 99% success of this action, zero means no check)\\n    ///      1 - delay requirement(uint32, if time since the last call more than this value the check is fail, zero means no check)\\n    ///      2 - isFinalAnswer(uint8)\\n    mapping(bytes32 => bytes32) answerAttributes;\\n\\n    // --- ANSWER REQUIREMENTS ---\\n\\n    /// @dev answerPackedId => array of AttributeRequirementsPacked\\n    mapping(bytes32 => bytes32[]) attributeRequirements;\\n    /// @dev answerPackedId=> array of ItemRequirementsPacked\\n    mapping(bytes32 => bytes32[]) itemRequirements;\\n    /// @dev answerPackedId => array of TokenRequirementsPacked\\n    mapping(bytes32 => bytes32[]) tokenRequirements;\\n    /// @dev answerPackedId => custom data for hero\\n    mapping(bytes32 => CustomDataRequirementPacked[]) heroCustomDataRequirement;\\n    /// @dev answerPackedId => global custom data\\n    mapping(bytes32 => CustomDataRequirementPacked[]) globalCustomDataRequirement;\\n\\n    // --- ANSWER RESULTS ---\\n\\n    /// @dev answerPackedId => change attributes\\n    mapping(bytes32 => bytes32[]) successInfoAttributes;\\n    /// @dev answerPackedId => change stats\\n    mapping(bytes32 => bytes32) successInfoStats;\\n    /// @dev answerPackedId => mint items\\n    mapping(bytes32 => bytes32[]) successInfoMintItems;\\n\\n    /// @dev answerPackedId => change attributes\\n    mapping(bytes32 => bytes32[]) failInfoAttributes;\\n    /// @dev answerPackedId => change stats\\n    mapping(bytes32 => bytes32) failInfoStats;\\n    /// @dev answerPackedId => mint items\\n    mapping(bytes32 => bytes32[]) failInfoMintItems;\\n\\n    /// @dev answerUnPackedId + CustomDataResult => custom data array change\\n    ///      where CustomDataResult is\\n    ///      1 - hero success\\n    ///      2 - hero fail\\n    ///      3 - global success\\n    ///      4 - global fail\\n    ///      see COUNT_CUSTOM_DATA_RESULT_IDS\\n    mapping(bytes32 => bytes32[]) customDataResult;\\n    /// @dev answerPackedId => slot+chance+stopIfBurnt\\n    mapping(bytes32 => bytes32[]) burnItem;\\n\\n    // --- GENERAL STORY REQUIREMENTS ---\\n\\n    /// @dev story => Custom hero data requirements for a story. If exist and hero is not eligible should be not chose in a dungeon.\\n    mapping(uint => CustomDataRequirementRangePacked[]) storyRequiredHeroData;\\n    /// @dev story => Minimal level for the history. 0 means no requirements.\\n    mapping(uint => uint) storyRequiredLevel;\\n\\n    // --- HERO STATES ---\\n\\n    /// @dev hero + heroId + storyId => pageId + heroLastActionTS\\n    mapping(bytes32 => bytes32) heroState;\\n\\n    // --- OTHER ---\\n\\n    /// @dev storyId => build hash for the last update\\n    mapping(uint16 => uint) storyBuildHash;\\n  }\\n\\n  /// @dev We need to have flat structure coz Solidity can not handle arrays of structs properly\\n  struct StoryMetaInfo {\\n    uint16 storyId;\\n\\n    // --- story reqs\\n\\n    bytes32[] requiredCustomDataIndex;\\n    uint64[] requiredCustomDataMinValue;\\n    uint64[] requiredCustomDataMaxValue;\\n    bool[] requiredCustomDataIsHero;\\n    uint minLevel;\\n\\n    // --- answer reqs\\n\\n    AnswersMeta answersMeta;\\n    AnswerNextPageMeta answerNextPage;\\n    AnswerAttributeRequirementsMeta answerAttributeRequirements;\\n    AnswerItemRequirementsMeta answerItemRequirements;\\n    AnswerTokenRequirementsMeta answerTokenRequirements;\\n    AnswerAttributesMeta answerAttributes;\\n    AnswerCustomDataMeta answerHeroCustomDataRequirement;\\n    AnswerCustomDataMeta answerGlobalCustomDataRequirement;\\n\\n    // --- answer results\\n\\n    AnswerBurnRandomItemMeta answerBurnRandomItemMeta;\\n    NextObjRewriteMeta nextObjRewriteMeta;\\n\\n    // --- story results\\n\\n    AnswerResultMeta successInfo;\\n    AnswerResultMeta failInfo;\\n\\n    AnswerCustomDataResultMeta successHeroCustomData;\\n    AnswerCustomDataResultMeta failHeroCustomData;\\n    AnswerCustomDataResultMeta successGlobalCustomData;\\n    AnswerCustomDataResultMeta failGlobalCustomData;\\n  }\\n\\n  struct NextObjRewriteMeta {\\n    uint16[] nextObjPageIds;\\n    uint8[] nextObjHeroClasses;\\n    uint32[][] nextObjIds;\\n  }\\n\\n  struct AnswersMeta {\\n    uint16[] answerPageIds;\\n    uint8[] answerHeroClasses;\\n    uint16[] answerIds;\\n  }\\n\\n  struct AnswerNextPageMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    uint8[] answerResultIds;\\n    uint16[][] answerNextPageIds;\\n  }\\n\\n  struct AnswerAttributeRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    bool[][] cores;\\n    uint8[][] ids;\\n    int32[][] values;\\n  }\\n\\n  struct AnswerItemRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    address[][] requireItems;\\n    bool[][] requireItemBurn;\\n    bool[][] requireItemEquipped;\\n  }\\n\\n  struct AnswerTokenRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    address[][] requireToken;\\n    uint88[][] requireAmount;\\n    bool[][] requireTransfer;\\n  }\\n\\n  struct AnswerAttributesMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    uint32[] randomRequirements;\\n    uint32[] delayRequirements;\\n    bool[] isFinalAnswer;\\n  }\\n\\n  struct AnswerCustomDataMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    bytes32[][] dataIndexes;\\n    bool[][] mandatory;\\n    uint64[][] dataValuesMin;\\n    uint64[][] dataValuesMax;\\n  }\\n\\n  struct AnswerResultMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    uint8[][] attributeIds;\\n    /// @dev Max value is limitied by int24, see toBytes32ArrayWithIds impl\\n    int32[][] attributeValues;\\n\\n    uint32[] experience;\\n    int32[] heal;\\n    int32[] manaRegen;\\n    int32[] lifeChancesRecovered;\\n    int32[] damage;\\n    int32[] manaConsumed;\\n\\n    address[][] mintItems;\\n    uint32[][] mintItemsChances;\\n  }\\n\\n  struct AnswerCustomDataResultMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    bytes32[][] dataIndexes;\\n    int16[][] dataValues;\\n  }\\n\\n  struct AnswerBurnRandomItemMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    /// @notice 0 - random slot\\n    uint8[][] slots;\\n    /// @notice typical chances are [0..100] (no decimals here)\\n    uint64[][] chances;\\n    bool[][] isStopIfBurnt;\\n  }\\n\\n  struct CustomDataRequirementPacked {\\n    bytes32 index;\\n    /// @dev min(uint64) + max(uint64) + mandatory(uint8)\\n    bytes32 data;\\n  }\\n\\n  struct CustomDataRequirementRangePacked {\\n    bytes32 index;\\n    /// @dev min(uint64) + max(uint64) + isHeroData(uint8)\\n    bytes32 data;\\n  }\\n\\n  struct StatsChange {\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n  }\\n\\n  struct StoryActionContext {\\n    uint stageId;\\n    uint iteration;\\n    bytes32 answerIdHash;\\n    bytes32 answerAttributes;\\n    address sender;\\n    address heroToken;\\n    IController controller;\\n    IStatController statController;\\n    IHeroController heroController;\\n    IOracle oracle;\\n    IItemController itemController;\\n    uint8 heroClass;\\n    uint8 heroClassFromAnswerHash;\\n    uint8 biome;\\n    uint16 storyId;\\n    uint16 storyIdFromAnswerHash;\\n    uint16 pageIdFromAnswerHash;\\n    uint16 answerNumber;\\n    uint16 pageId;\\n    uint32 objectId;\\n    uint64 dungeonId;\\n    uint40 heroLastActionTS;\\n    uint80 heroTokenId;\\n    IStatController.ChangeableStats heroStats;\\n  }\\n\\n  // --- WRITE ---\\n\\n  function storyAction(\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    uint stageId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 biome,\\n    uint iteration,\\n    bytes memory data\\n  ) external returns (IGOC.ActionResult memory);\\n\\n  // --- READ ---\\n\\n  function isStoryAvailableForHero(uint32 objectId, address heroToken, uint heroTokenId) external view returns (bool);\\n\\n  function idToStory(uint16 id) external view returns (uint32 objectId);\\n\\n  function heroPage(address hero, uint80 heroId, uint16 storyId) external view returns (uint16 pageId);\\n\\n  function storyIds(uint32 objectId) external view returns (uint16);\\n\\n  function registeredStories(uint32 objectId) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x6bc71b74f885c82d9949c582a49280738feed3af3704e7400d4acc1ba545f32e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IItemController.sol\\\";\\n\\ninterface ITreasury {\\n\\n  function balanceOfToken(address token) external view returns (uint);\\n\\n  function sendToDungeon(address dungeon, address token, uint amount) external;\\n\\n  function sendFee(address token, uint amount, IItemController.FeeType feeType) external;\\n\\n}\\n\",\"keccak256\":\"0x82d202ce82b2cd5e795d76acdb95248e1816771d4c22e9cee9148ac566566c9d\",\"license\":\"BUSL-1.1\"},\"contracts/lib/CalcLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../solady/LibPRNG.sol\\\";\\n\\nlibrary CalcLib {\\n\\n  uint32 public constant MAX_CHANCE = 1e9;\\n\\n  function minI32(int32 a, int32 b) internal pure returns (int32) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max32(int32 a, int32 b) internal pure returns (int32) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function absDiff(int32 a, int32 b) internal pure returns (uint32) {\\n    if (!((a >= 0 && b >= 0) || (a <= 0 && b <= 0))) revert IAppErrors.AbsDiff(a, b);\\n    if (a < 0) {\\n      a = - a;\\n    }\\n    if (b < 0) {\\n      b = - b;\\n    }\\n    return uint32(uint(int(a >= b ? a - b : b - a)));\\n  }\\n\\n  function toUint(int32 n) internal pure returns (uint) {\\n    if (n < 0) {\\n      return 0;\\n    }\\n    if (n <= 0) {\\n      return 0;\\n    }\\n    return uint(int(n));\\n  }\\n\\n  function toInt32(uint a) internal pure returns (int32){\\n    if (a >= uint(int(type(int32).max))) {\\n      return type(int32).max;\\n    }\\n    return int32(int(a));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality\\n  function pseudoRandom(uint maxValue) internal view returns (uint) {\\n    if (maxValue == 0) {\\n      return 0;\\n    }\\n    // pseudo random number\\n    return (uint(keccak256(abi.encodePacked(blockhash(block.number), block.coinbase, block.difficulty, block.number, block.timestamp, tx.gasprice, gasleft()))) % (maxValue + 1));\\n  }\\n\\n  function pseudoRandomUint32(uint32 maxValue) internal view returns (uint32) {\\n    return uint32(pseudoRandom(uint(maxValue)));\\n  }\\n\\n  /// @notice Generate pseudo-random uint in the range [0..maxValue) using Solady pseudo-random function\\n  function nextPrng(LibPRNG.PRNG memory prng, uint maxValue) internal pure returns (uint) {\\n    return LibPRNG.next(prng) % maxValue;\\n  }\\n\\n  /// @notice pseudoRandomUint32 with customizable pseudoRandom()\\n  function pseudoRandomUint32Flex(\\n    uint32 maxValue,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint32) {\\n    return uint32(random_(uint(maxValue)));\\n  }\\n\\n  function pseudoRandomInt32(int32 maxValue) internal view returns (int32) {\\n    bool neg;\\n    if (maxValue < 0) {\\n      neg = true;\\n      maxValue = - maxValue;\\n    }\\n    uint32 v = uint32(pseudoRandom(uint(int(maxValue))));\\n    return neg\\n      ? - int32(int(uint(v)))\\n      : int32(int(uint(v)));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality\\n  function pseudoRandomWithSeed(uint maxValue, uint seed) internal view returns (uint) {\\n    if (maxValue == 0) {\\n      return 0;\\n    }\\n    // pseudo random number\\n    return (uint(keccak256(abi.encodePacked(blockhash(block.number), block.coinbase, block.difficulty, block.number, block.timestamp, tx.gasprice, gasleft(), seed))) % (maxValue + 1));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality, in range\\n  function pseudoRandomInRange(uint min, uint max) internal view returns (uint) {\\n    if (min >= max) {\\n      return max;\\n    }\\n    uint r = pseudoRandom(max - min);\\n    return min + r;\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality, in range\\n  ///      Equal to pseudoRandomInRange(min, max, pseudoRandom)\\n  function pseudoRandomInRangeFlex(\\n    uint min,\\n    uint max,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint) {\\n    return min >= max ? max : min + random_(max - min);\\n  }\\n\\n  function minusWithZeroFloor(uint a, uint b) internal pure returns (uint){\\n    if (a <= b) {\\n      return 0;\\n    }\\n    return a - b;\\n  }\\n\\n  function minusWithMinFloorI32(int32 a, int32 b) internal pure returns (int32){\\n    if (int(a) - int(b) < type(int32).min) {\\n      return type(int32).min;\\n    }\\n    return a - b;\\n  }\\n\\n  function plusWithMaxFloor32(int32 a, int32 b) internal pure returns (int32){\\n    if (int(a) + int(b) >= type(int32).max) {\\n      return type(int32).max;\\n    }\\n    return a + b;\\n  }\\n\\n  function sqrt(uint x) internal pure returns (uint z) {\\n    assembly {\\n    // Start off with z at 1.\\n      z := 1\\n\\n    // Used below to help find a nearby power of 2.\\n      let y := x\\n\\n    // Find the lowest power of 2 that is at least sqrt(x).\\n      if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n        y := shr(128, y) // Like dividing by 2 ** 128.\\n        z := shl(64, z) // Like multiplying by 2 ** 64.\\n      }\\n      if iszero(lt(y, 0x10000000000000000)) {\\n        y := shr(64, y) // Like dividing by 2 ** 64.\\n        z := shl(32, z) // Like multiplying by 2 ** 32.\\n      }\\n      if iszero(lt(y, 0x100000000)) {\\n        y := shr(32, y) // Like dividing by 2 ** 32.\\n        z := shl(16, z) // Like multiplying by 2 ** 16.\\n      }\\n      if iszero(lt(y, 0x10000)) {\\n        y := shr(16, y) // Like dividing by 2 ** 16.\\n        z := shl(8, z) // Like multiplying by 2 ** 8.\\n      }\\n      if iszero(lt(y, 0x100)) {\\n        y := shr(8, y) // Like dividing by 2 ** 8.\\n        z := shl(4, z) // Like multiplying by 2 ** 4.\\n      }\\n      if iszero(lt(y, 0x10)) {\\n        y := shr(4, y) // Like dividing by 2 ** 4.\\n        z := shl(2, z) // Like multiplying by 2 ** 2.\\n      }\\n      if iszero(lt(y, 0x8)) {\\n      // Equivalent to 2 ** z.\\n        z := shl(1, z)\\n      }\\n\\n    // Shifting right by 1 is like dividing by 2.\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n\\n    // Compute a rounded down version of z.\\n      let zRoundDown := div(x, z)\\n\\n    // If zRoundDown is smaller, use it.\\n      if lt(zRoundDown, z) {\\n        z := zRoundDown\\n      }\\n    }\\n  }\\n\\n  /*********************************************\\n *              PRB-MATH                      *\\n *   https://github.com/hifi-finance/prb-math *\\n **********************************************/\\n  /// @notice Calculates the binary logarithm of x.\\n  ///\\n  /// @dev Based on the iterative approximation algorithm.\\n  /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n  ///\\n  /// Requirements:\\n  /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n  ///\\n  /// Caveats:\\n  /// - The results are nor perfectly accurate to the last decimal,\\n  ///   due to the lossy precision of the iterative approximation.\\n  ///\\n  /// @param x The unsigned 60.18-decimal fixed-point number for which\\n  ///           to calculate the binary logarithm.\\n  /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n  function log2(uint256 x) internal pure returns (uint256 result) {\\n    if (x < 1e18) revert IAppErrors.TooLowX(x);\\n\\n    // Calculate the integer part of the logarithm\\n    // and add it to the result and finally calculate y = x * 2^(-n).\\n    uint256 n = mostSignificantBit(x / 1e18);\\n\\n    // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number.\\n    // The operation can't overflow because n is maximum 255 and SCALE is 1e18.\\n    uint256 rValue = n * 1e18;\\n\\n    // This is y = x * 2^(-n).\\n    uint256 y = x >> n;\\n\\n    // If y = 1, the fractional part is zero.\\n    if (y == 1e18) {\\n      return rValue;\\n    }\\n\\n    // Calculate the fractional part via the iterative approximation.\\n    // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n    for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n      y = (y * y) / 1e18;\\n\\n      // Is y^2 > 2 and so in the range [2,4)?\\n      if (y >= 2 * 1e18) {\\n        // Add the 2^(-m) factor to the logarithm.\\n        rValue += delta;\\n\\n        // Corresponds to z/2 on Wikipedia.\\n        y >>= 1;\\n      }\\n    }\\n    return rValue;\\n  }\\n\\n  /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n  /// @dev See the note on msb in the \\\"Find First Set\\\"\\n  ///      Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n  /// @param x The uint256 number for which to find the index of the most significant bit.\\n  /// @return msb The index of the most significant bit as an uint256.\\n  //noinspection NoReturn\\n  function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n    if (x >= 2 ** 128) {\\n      x >>= 128;\\n      msb += 128;\\n    }\\n    if (x >= 2 ** 64) {\\n      x >>= 64;\\n      msb += 64;\\n    }\\n    if (x >= 2 ** 32) {\\n      x >>= 32;\\n      msb += 32;\\n    }\\n    if (x >= 2 ** 16) {\\n      x >>= 16;\\n      msb += 16;\\n    }\\n    if (x >= 2 ** 8) {\\n      x >>= 8;\\n      msb += 8;\\n    }\\n    if (x >= 2 ** 4) {\\n      x >>= 4;\\n      msb += 4;\\n    }\\n    if (x >= 2 ** 2) {\\n      x >>= 2;\\n      msb += 2;\\n    }\\n    if (x >= 2 ** 1) {\\n      // No need to shift x any more.\\n      msb += 1;\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd5178ce117e26987cd3cb3496e13bd2c6e7d220557ec25f771444dd2f4d2db5b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EventLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./PackingLib.sol\\\";\\nimport \\\"./ItemLib.sol\\\";\\nimport \\\"./StoryLib.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\n\\nlibrary EventLib {\\n  using CalcLib for int32;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n  using PackingLib for uint16;\\n  using PackingLib for uint8;\\n  using PackingLib for address;\\n  using PackingLib for uint32[];\\n  using PackingLib for uint32;\\n  using PackingLib for uint64;\\n  using PackingLib for int32[];\\n  using PackingLib for int32;\\n\\n  //region ------------------------ Main logic\\n\\n  function action(IGOC.ActionContext calldata ctx, IGOC.EventInfo storage info) external returns (\\n    IGOC.ActionResult memory\\n  ) {\\n    (bool accept) = abi.decode(ctx.data, (bool));\\n    return accept\\n      ? _eventAcceptResult(ctx, info)\\n      : _noActionResult();\\n  }\\n\\n  /// @notice Save data from {regInfo} to {info}\\n  function eventRegInfoToInfo(IGOC.EventRegInfo calldata regInfo, IGOC.EventInfo storage info) external {\\n    info.goodChance = regInfo.goodChance;\\n    info.goodAttributes = regInfo.goodAttributes.values.toBytes32ArrayWithIds(regInfo.goodAttributes.ids);\\n    info.badAttributes = regInfo.badAttributes.values.toBytes32ArrayWithIds(regInfo.badAttributes.ids);\\n    info.statsChange = regInfo.experience.packStatsChange(\\n      regInfo.heal,\\n      regInfo.manaRegen,\\n      regInfo.lifeChancesRecovered,\\n      regInfo.damage,\\n      regInfo.manaConsumed\\n    );\\n\\n    bytes32[] memory mintItems = new bytes32[](regInfo.mintItems.length);\\n\\n    for (uint i; i < mintItems.length; ++i) {\\n      mintItems[i] = regInfo.mintItems[i].packItemMintInfo(regInfo.mintItemsChances[i]);\\n    }\\n    info.mintItems = mintItems;\\n  }\\n  //endregion ------------------------ Main logic\\n\\n  //region ------------------------ Internal logic\\n  function _eventAcceptResult(IGOC.ActionContext calldata ctx, IGOC.EventInfo storage info) internal returns (\\n    IGOC.ActionResult memory result\\n  ) {\\n    IStatController sc = IStatController(ctx.controller.statController());\\n\\n    IStatController.ActionInternalInfo memory gen = _generate(ctx, info, sc);\\n\\n    if (gen.posAttributes.length != 0) {\\n      sc.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: ctx.heroToken,\\n        heroTokenId: ctx.heroTokenId,\\n        changeAttributes: gen.posAttributes,\\n        add: true,\\n        temporally: true\\n      }));\\n    }\\n\\n    if (gen.negAttributes.length != 0) {\\n      sc.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: ctx.heroToken,\\n        heroTokenId: ctx.heroTokenId,\\n        changeAttributes: gen.negAttributes,\\n        add: true,\\n        temporally: true\\n      }));\\n    }\\n\\n    // refreshed stats\\n    IStatController.ChangeableStats memory stats = sc.heroStats(ctx.heroToken, ctx.heroTokenId);\\n\\n    result.completed = true;\\n    result.experience = gen.experience;\\n    result.heal = gen.heal;\\n    result.manaRegen = gen.manaRegen;\\n    result.lifeChancesRecovered = gen.lifeChancesRecovered;\\n    result.damage = gen.damage;\\n    result.manaConsumed = CalcLib.minI32(gen.manaConsumed, int32(stats.mana));\\n    result.mintItems = gen.mintedItems;\\n\\n    if (stats.life <= gen.damage.toUint()) {\\n      result.kill = true;\\n    }\\n\\n    emit IApplicationEvents.EventResult(ctx.dungeonId, ctx.heroToken, ctx.heroTokenId, ctx.stageId, gen, ctx.iteration);\\n    return result;\\n  }\\n\\n  /// @notice Generate empty result structure, only \\\"completed\\\" is true\\n  function _noActionResult() internal pure returns (IGOC.ActionResult memory result) {\\n    result.completed = true;\\n    return result;\\n  }\\n\\n  /// @notice Generate either positive or negative attributes, mint single item in any case\\n  function _generate(IGOC.ActionContext calldata ctx, IGOC.EventInfo storage info, IStatController sc) internal returns (\\n    IStatController.ActionInternalInfo memory result\\n  ) {\\n    uint32 goodChance = info.goodChance;\\n    if (goodChance > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighChance(goodChance);\\n\\n    IOracle oracle = IOracle(ctx.controller.oracle());\\n\\n    uint random = goodChance == CalcLib.MAX_CHANCE ? CalcLib.MAX_CHANCE : oracle.getRandomNumber(CalcLib.MAX_CHANCE, 0);\\n    if (random <= goodChance) {\\n      result.posAttributes = StoryLib._generateAttributes(info.goodAttributes);\\n      (result.experience,\\n        result.heal,\\n        result.manaRegen,\\n        result.lifeChancesRecovered,,) = info.statsChange.unpackStatsChange();\\n    } else {\\n      result.negAttributes = StoryLib._generateAttributes(info.badAttributes);\\n      (,,,, result.damage, result.manaConsumed) = info.statsChange.unpackStatsChange();\\n    }\\n\\n    // always mint possible items even if bad result\\n    result.mintedItems = _mintRandomItem(ctx, info, oracle, sc, CalcLib.nextPrng);\\n\\n    return result;\\n  }\\n\\n  /// @notice Mint single random item\\n  /// @param nextPrng_ CalcLib.nextPrng, param is required by unit tests\\n  function _mintRandomItem(\\n    IGOC.ActionContext calldata ctx,\\n    IGOC.EventInfo storage info,\\n    IOracle oracle,\\n    IStatController sc,\\n    function (LibPRNG.PRNG memory, uint) internal view returns (uint) nextPrng_\\n  ) internal returns (address[] memory minted) {\\n    bytes32[] memory mintItemsPacked = info.mintItems;\\n    if (mintItemsPacked.length == 0) {\\n      return minted;\\n    }\\n\\n    IStatController.ChangeableStats memory stats = sc.heroStats(ctx.heroToken, ctx.heroTokenId);\\n\\n    address[] memory mintItems = new address[](mintItemsPacked.length);\\n    uint32[] memory mintItemsChances = new uint32[](mintItemsPacked.length);\\n\\n    for (uint i = 0; i < mintItemsPacked.length; i++) {\\n      (mintItems[i], mintItemsChances[i]) = mintItemsPacked[i].unpackItemMintInfo();\\n    }\\n\\n    return ItemLib._mintRandomItems(\\n      ItemLib.MintItemInfo({\\n        mintItems: mintItems,\\n        mintItemsChances: mintItemsChances,\\n        biome: ctx.biome,\\n        amplifier: 0,\\n        seed: 0,\\n        oracle: oracle,\\n        heroExp: stats.experience,\\n        heroCurrentLvl: uint8(stats.level),\\n        magicFind: 0,\\n        destroyItems: 0,\\n        maxItems: 1 // MINT ONLY 1 ITEM!\\n      }),\\n      nextPrng_\\n    );\\n  }\\n  //endregion ------------------------ Internal logic\\n}\\n\",\"keccak256\":\"0x66a5a3c695cf786c3df622e1ad915c74aeccedce74dd129b434a2117cf4794fe\",\"license\":\"BUSL-1.1\"},\"contracts/lib/FightLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IFightCalculator.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../lib/StatLib.sol\\\";\\nimport \\\"../lib/CalcLib.sol\\\";\\nimport \\\"../lib/PackingLib.sol\\\";\\n\\nlibrary FightLib {\\n  using PackingLib for bytes32;\\n  using CalcLib for int32;\\n\\n  //region ------------------------ Data types\\n  struct AttackResult {\\n    int32 defenderHealth;\\n    int32 damage;\\n    int32 lifeStolen;\\n    int32 reflectDamage;\\n    uint8 critical;\\n    uint8 missed;\\n    uint8 blocked;\\n  }\\n  //endregion ------------------------ Data types\\n\\n  //region ------------------------ Constants\\n  uint internal constant MAX_FIGHT_CYCLES = 100;\\n  int32 internal constant RESISTANCE_DENOMINATOR = 100;\\n  int32 internal constant _MAX_RESIST = 90;\\n\\n  //endregion ------------------------ Constants\\n\\n  //region ------------------------ Main logic\\n\\n  /// @dev Items ownership must be checked before\\n  ///      it is no write actions but we need to emit an event for properly handle the battle on UI\\n  ///      return huge structs more expensive that call an event here\\n  /// @param random_ Pass _pseudoRandom here, param is required for unit tests\\n  function fight(\\n    IItemController ic,\\n    IFightCalculator.FightCall memory callData,\\n    function (uint) internal view returns (uint) random_\\n  ) internal returns (\\n    IFightCalculator.FightResult memory\\n  ) {\\n    IFightCalculator.FightInfoInternal memory fResult = prepareFightInternalInfo(ic, callData.fighterA, callData.fighterB);\\n\\n    fightProcessing(fResult, random_);\\n\\n    emit IApplicationEvents.FightResultProcessed(msg.sender, fResult, callData, callData.iteration);\\n\\n    return IFightCalculator.FightResult({\\n      healthA: fResult.fighterA.health,\\n      healthB: fResult.fighterB.health,\\n      manaConsumedA: fResult.fighterA.manaConsumed,\\n      manaConsumedB: fResult.fighterB.manaConsumed\\n    });\\n  }\\n  //endregion ------------------------ Main logic\\n\\n  //region ------------------------ High level of internal logic\\n  function fightProcessing(\\n    IFightCalculator.FightInfoInternal memory fResult,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n\\n    bool firstA = calcFirstHit(fResult);\\n\\n    setStatuses(fResult, firstA, random_);\\n    setStatuses(fResult, !firstA, random_);\\n\\n    reduceAttributesByStatuses(fResult.fighterA.info.fighterAttributes, fResult.fighterA.statuses, fResult.fighterB.info.fighterAttributes);\\n    reduceAttributesByStatuses(fResult.fighterB.info.fighterAttributes, fResult.fighterB.statuses, fResult.fighterA.info.fighterAttributes);\\n\\n    AttackResult memory resultA = processAttack(fResult, true, random_);\\n    AttackResult memory resultB = processAttack(fResult, false, random_);\\n\\n    fResult.fighterA.statuses.gotCriticalHit = resultA.critical != 0;\\n    fResult.fighterA.statuses.missed = resultA.missed != 0;\\n    fResult.fighterA.statuses.hitBlocked = resultA.blocked != 0;\\n\\n    fResult.fighterB.statuses.gotCriticalHit = resultB.critical != 0;\\n    fResult.fighterB.statuses.missed = resultB.missed != 0;\\n    fResult.fighterB.statuses.hitBlocked = resultB.blocked != 0;\\n\\n    reduceHp(\\n      firstA ? resultA : resultB,\\n      firstA ? resultB : resultA,\\n      firstA ? fResult.fighterA : fResult.fighterB,\\n      firstA ? fResult.fighterB : fResult.fighterA\\n    );\\n\\n    // restore health from stolen life\\n    stealLife(fResult.fighterA, resultA);\\n    stealLife(fResult.fighterB, resultB);\\n  }\\n\\n  function processAttack(\\n    IFightCalculator.FightInfoInternal memory fResult,\\n    bool isA,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (AttackResult memory attackResult) {\\n\\n    int32 defenderHealth = isA ? fResult.fighterB.health : fResult.fighterA.health;\\n\\n    if (skipTurn(fResult, isA)) {\\n      return AttackResult({\\n        defenderHealth: defenderHealth,\\n        damage: 0,\\n        lifeStolen: 0,\\n        reflectDamage: 0,\\n        critical: 0,\\n        missed: 0,\\n        blocked: 0\\n      });\\n    }\\n\\n    IFightCalculator.FighterInfo memory attackerInfo = isA ? fResult.fighterA.info : fResult.fighterB.info;\\n    IFightCalculator.FighterInfo memory defenderInfo = isA ? fResult.fighterB.info : fResult.fighterA.info;\\n\\n    if (attackerInfo.attackType == IFightCalculator.AttackType.MELEE) {\\n      attackResult = meleeDamageCalculation(attackerInfo, defenderInfo, defenderHealth, random_);\\n    } else if (attackerInfo.attackType == IFightCalculator.AttackType.MAGIC) {\\n      attackResult = magicDamageCalculation(\\n        attackerInfo,\\n        defenderInfo,\\n        isA ? fResult.fighterA.magicAttack : fResult.fighterB.magicAttack,\\n        defenderHealth,\\n        random_\\n      );\\n    } else {\\n      revert IAppErrors.NotAType(uint(attackerInfo.attackType));\\n    }\\n  }\\n  //endregion ------------------------ High level of internal logic\\n\\n  //region ------------------------ Internal logic\\n  function prepareFightInternalInfo(\\n    IItemController ic,\\n    IFightCalculator.FighterInfo memory fighterA,\\n    IFightCalculator.FighterInfo memory fighterB\\n  ) internal view returns (IFightCalculator.FightInfoInternal memory) {\\n    IFightCalculator.FightInfoInternal memory fInfo;\\n    _setFightData(ic, fighterA, fInfo.fighterA);\\n    _setFightData(ic, fighterB, fInfo.fighterB);\\n    return fInfo;\\n  }\\n\\n  /// @dev A part of prepareFightInternalInfo\\n  function _setFightData(\\n    IItemController ic,\\n    IFightCalculator.FighterInfo memory fighter,\\n    IFightCalculator.Fighter memory dest\\n  ) internal view {\\n    dest.info = fighter;\\n    dest.health = int32(fighter.fighterStats.life);\\n    if (fighter.attackToken != address(0)) {\\n      if (fighter.attackType != IFightCalculator.AttackType.MAGIC) revert IAppErrors.NotMagic();\\n      dest.magicAttack = ic.itemAttackInfo(fighter.attackToken, fighter.attackTokenId);\\n    }\\n    // dest.manaConsumed is 0 by default, in current implementation we don't need to change it\\n  }\\n\\n  /// @param random_ Either _pseudoRandom or pseudo-random for ut\\n  function statusChance(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    IItemController.AttackInfo memory attackerMA,\\n    IStatController.ATTRIBUTES index,\\n    int32 resist,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (bool) {\\n    int32 chance = _getChance(attackerInfo, attackerMA.aType, index, resist);\\n    if (chance == 0) {\\n      return false;\\n    }\\n    if (chance >= RESISTANCE_DENOMINATOR) {\\n      return true;\\n    }\\n    return random_(RESISTANCE_DENOMINATOR.toUint()) < chance.toUint();\\n  }\\n\\n  /// @notice set fResult.fighterB.statuses (for isA = true) or fResult.fighterA.statuses (for isA = false)\\n  /// @param random_ Either _pseudoRandom or pseudo-random for ut\\n  function setStatuses(\\n    IFightCalculator.FightInfoInternal memory fResult,\\n    bool isA,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    // setStatuses is called twice one by one: first time for A, second time for B\\n    // if stun is set for A, setStatuses is skipped for B completely\\n    if (!skipTurn(fResult, isA)) {\\n      IFightCalculator.FighterInfo memory attackerInfo = isA ? fResult.fighterA.info : fResult.fighterB.info;\\n      IFightCalculator.FighterInfo memory defenderInfo = isA ? fResult.fighterB.info : fResult.fighterA.info;\\n\\n      IItemController.AttackInfo memory attackerMA = isA ? fResult.fighterA.magicAttack : fResult.fighterB.magicAttack;\\n\\n      IFightCalculator.Statuses memory statuses = isA ? fResult.fighterB.statuses : fResult.fighterA.statuses;\\n\\n      int32 resist = defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.RESIST_TO_STATUSES)];\\n\\n      statuses.stun = statusChance(attackerInfo, attackerMA, IStatController.ATTRIBUTES.STUN, resist, random_);\\n      statuses.burn = statusChance(\\n        attackerInfo,\\n        attackerMA,\\n        IStatController.ATTRIBUTES.BURN,\\n        defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.FIRE_RESISTANCE)],\\n        random_\\n      );\\n      statuses.freeze = statusChance(\\n        attackerInfo,\\n        attackerMA,\\n        IStatController.ATTRIBUTES.FREEZE,\\n        defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.COLD_RESISTANCE)],\\n        random_\\n      );\\n      statuses.confuse = statusChance(attackerInfo, attackerMA, IStatController.ATTRIBUTES.CONFUSE, resist, random_);\\n      statuses.curse = statusChance(attackerInfo, attackerMA, IStatController.ATTRIBUTES.CURSE, resist, random_);\\n      statuses.poison = statusChance(attackerInfo, attackerMA, IStatController.ATTRIBUTES.POISON, resist, random_);\\n    }\\n  }\\n\\n  function magicDamageCalculation(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    IFightCalculator.FighterInfo memory defenderInfo,\\n    IItemController.AttackInfo memory magicAttack,\\n    int32 defenderHealth,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (AttackResult memory attackResult) {\\n    // generate damage\\n    int32 damage = getMagicDamage(\\n      attackerInfo,\\n      magicAttack,\\n      CalcLib.pseudoRandomInRangeFlex(magicAttack.min.toUint(), magicAttack.max.toUint(), random_)\\n    );\\n    damage = increaseMagicDmgByFactor(damage, attackerInfo, magicAttack.aType);\\n    damage = increaseRaceDmg(damage, attackerInfo, defenderInfo.race);\\n    bool critical = isCriticalHit(attackerInfo, random_(RESISTANCE_DENOMINATOR.toUint()));\\n    damage = critical ? damage * 2 : damage;\\n\\n    // decrease damage\\n    damage = decreaseRaceDmg(damage, defenderInfo, attackerInfo.race);\\n    damage = decreaseDmgByDmgReduction(damage, defenderInfo);\\n\\n    if (magicAttack.aType == IItemController.AttackType.FIRE) {\\n      damage -= _calcDmgInline(damage, defenderInfo, IStatController.ATTRIBUTES.FIRE_RESISTANCE);\\n    } else if (magicAttack.aType == IItemController.AttackType.COLD) {\\n      damage -= _calcDmgInline(damage, defenderInfo, IStatController.ATTRIBUTES.COLD_RESISTANCE);\\n    } else if (magicAttack.aType == IItemController.AttackType.LIGHTNING) {\\n      damage -= _calcDmgInline(damage, defenderInfo, IStatController.ATTRIBUTES.LIGHTNING_RESISTANCE);\\n    }\\n\\n    int32 defenderHealthResult = defenderHealth < damage ? int32(0) : defenderHealth - damage;\\n    damage = defenderHealth - defenderHealthResult;\\n\\n    return AttackResult({\\n      defenderHealth: defenderHealthResult,\\n      damage: damage,\\n      lifeStolen: lifeStolenPerHit(damage, attackerInfo),\\n      reflectDamage: reflectMagicDmg(damage, defenderInfo) + reflectChaos(magicAttack, attackerInfo, random_(1e18)),\\n      critical: critical ? uint8(1) : uint8(0),\\n      missed: 0,\\n      blocked: 0\\n    });\\n  }\\n\\n  function meleeDamageCalculation(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    IFightCalculator.FighterInfo memory defenderInfo,\\n    int32 defenderHealth,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (AttackResult memory attackResult) {\\n    attackResult = (new AttackResult[](1))[0];\\n\\n    // generate damage\\n    int32 damage = getDamage(attackerInfo.fighterAttributes, random_);\\n    damage = increaseMeleeDmgByFactor(damage, attackerInfo);\\n    damage = increaseRaceDmg(damage, attackerInfo, defenderInfo.race);\\n    attackResult.critical = isCriticalHit(attackerInfo, random_(RESISTANCE_DENOMINATOR.toUint())) ? uint8(1) : uint8(0);\\n    damage = attackResult.critical == 0 ? damage : damage * 2;\\n\\n    // decrease damage\\n    damage = decreaseRaceDmg(damage, defenderInfo, attackerInfo.race);\\n    damage = decreaseDmgByDmgReduction(damage, defenderInfo);\\n\\n    attackResult.missed = random_(1e18) > StatLib.chanceToHit(\\n      attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)].toUint(),\\n      defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DEFENSE)].toUint(),\\n      attackerInfo.fighterStats.level,\\n      defenderInfo.fighterStats.level,\\n      attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.AR_FACTOR)].toUint()\\n    ) ? 1 : 0;\\n\\n    attackResult.blocked = (random_(100) < defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.BLOCK_RATING)].toUint()) ? 1 : 0;\\n\\n    if (attackResult.missed != 0 || attackResult.blocked != 0) {\\n      damage = 0;\\n    }\\n\\n    int32 defenderHealthResult = defenderHealth <= damage ? int32(0) : defenderHealth - damage;\\n    damage = defenderHealth - defenderHealthResult;\\n\\n\\n    attackResult.defenderHealth = defenderHealthResult;\\n    attackResult.damage = damage;\\n    attackResult.lifeStolen = lifeStolenPerHit(damage, attackerInfo);\\n    attackResult.reflectDamage = reflectMeleeDmg(damage, defenderInfo);\\n  }\\n\\n  function getDamage(\\n    int32[] memory attributes,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (int32) {\\n    return int32(int(CalcLib.pseudoRandomInRangeFlex(\\n      attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)].toUint(),\\n      attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)].toUint(),\\n      random_\\n    )));\\n  }\\n\\n  //endregion ------------------------ Internal logic\\n\\n  //region ------------------------ Pure utils\\n\\n  /// @notice Modify values in {targetAttributes} and {casterAttributes} according to {statuses}\\n  function reduceAttributesByStatuses(\\n    int32[] memory targetAttributes,\\n    IFightCalculator.Statuses memory statuses,\\n    int32[] memory casterAttributes\\n  ) internal pure {\\n\\n    if (statuses.burn) {\\n      targetAttributes[uint(IStatController.ATTRIBUTES.DEFENSE)] -= (targetAttributes[uint(IStatController.ATTRIBUTES.DEFENSE)] / 3);\\n      targetAttributes[uint(IStatController.ATTRIBUTES.COLD_RESISTANCE)] += 50;\\n      casterAttributes[uint(IStatController.ATTRIBUTES.CRITICAL_HIT)] += 10;\\n      casterAttributes[uint(IStatController.ATTRIBUTES.DESTROY_ITEMS)] += 20;\\n    }\\n    if (statuses.freeze) {\\n      targetAttributes[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)] /= 2;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)] /= 2;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] -= targetAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] / 3;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.BLOCK_RATING)] /= 2;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.FIRE_RESISTANCE)] += 50;\\n    }\\n    if (statuses.confuse) {\\n      targetAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] /= 2;\\n    }\\n    if (statuses.curse) {\\n      targetAttributes[uint(IStatController.ATTRIBUTES.FIRE_RESISTANCE)] /= 2;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.COLD_RESISTANCE)] /= 2;\\n      targetAttributes[uint(IStatController.ATTRIBUTES.LIGHTNING_RESISTANCE)] /= 2;\\n    }\\n    if (statuses.stun) {\\n      casterAttributes[uint(IStatController.ATTRIBUTES.CRITICAL_HIT)] += 10;\\n    }\\n    if (statuses.poison) {\\n      targetAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] /= 2;\\n    }\\n\\n  }\\n\\n  /// @notice Calculate new damage value depending on {defenderRace} and value of corresponded DMG_AGAINST_XXX attribute\\n  /// @param defenderRace See IStatController.Race\\n  /// @return Updated damage value\\n  function increaseRaceDmg(int32 dmg, IFightCalculator.FighterInfo memory attackerInfo, uint defenderRace)\\n  internal pure returns (int32) {\\n    if (defenderRace == uint(IStatController.Race.HUMAN)) {\\n      return dmg + attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_HUMAN)] * dmg / RESISTANCE_DENOMINATOR;\\n    } else if (defenderRace == uint(IStatController.Race.UNDEAD)) {\\n      return dmg + attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_UNDEAD)] * dmg / RESISTANCE_DENOMINATOR;\\n    } else if (defenderRace == uint(IStatController.Race.DAEMON)) {\\n      return dmg + attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_DAEMON)] * dmg / RESISTANCE_DENOMINATOR;\\n    } else if (defenderRace == uint(IStatController.Race.BEAST)) {\\n      return dmg + attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_BEAST)] * dmg / RESISTANCE_DENOMINATOR;\\n    } else {\\n      return dmg;\\n    }\\n  }\\n\\n  /// @notice Decrease damage depending on {attackerRace}\\n  function decreaseRaceDmg(int32 dmg, IFightCalculator.FighterInfo memory defenderInfo, uint attackerRace) internal pure returns (int32) {\\n    if (attackerRace == uint(IStatController.Race.HUMAN)) {\\n      return dmg - _calcDmgInline(dmg, defenderInfo, IStatController.ATTRIBUTES.DEF_AGAINST_HUMAN);\\n    } else if (attackerRace == uint(IStatController.Race.UNDEAD)) {\\n      return dmg - _calcDmgInline(dmg, defenderInfo, IStatController.ATTRIBUTES.DEF_AGAINST_UNDEAD);\\n    } else if (attackerRace == uint(IStatController.Race.DAEMON)) {\\n      return dmg - _calcDmgInline(dmg, defenderInfo, IStatController.ATTRIBUTES.DEF_AGAINST_DAEMON);\\n    } else if (attackerRace == uint(IStatController.Race.BEAST)) {\\n      return dmg - _calcDmgInline(dmg, defenderInfo, IStatController.ATTRIBUTES.DEF_AGAINST_BEAST);\\n    } else {\\n      return dmg;\\n    }\\n  }\\n\\n  /// @notice Calculate damage after Melee-attack\\n  function increaseMeleeDmgByFactor(int32 dmg, IFightCalculator.FighterInfo memory attackerInfo) internal pure returns (int32){\\n    return dmg + attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.MELEE_DMG_FACTOR)] * dmg / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  /// @notice Calculate damage after Magic-attack\\n  function increaseMagicDmgByFactor(int32 dmg, IFightCalculator.FighterInfo memory attackerInfo, IItemController.AttackType aType) internal pure returns (int32) {\\n    if (aType == IItemController.AttackType.FIRE) {\\n      return dmg + dmg * attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.FIRE_DMG_FACTOR)] / RESISTANCE_DENOMINATOR;\\n    } else if (aType == IItemController.AttackType.COLD) {\\n      return dmg + dmg * attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.COLD_DMG_FACTOR)] / RESISTANCE_DENOMINATOR;\\n    } else if (aType == IItemController.AttackType.LIGHTNING) {\\n      return dmg + dmg * attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.LIGHTNING_DMG_FACTOR)] / RESISTANCE_DENOMINATOR;\\n    } else {\\n      return dmg;\\n    }\\n  }\\n\\n  /// @notice Reduce damage depending on value of Damage Reduction attribute\\n  function decreaseDmgByDmgReduction(int32 dmg, IFightCalculator.FighterInfo memory defenderInfo) internal pure returns (int32) {\\n    return dmg - _calcDmgInline(dmg, defenderInfo, IStatController.ATTRIBUTES.DAMAGE_REDUCTION);\\n  }\\n\\n  /// @notice Calculate poison damage < {health}\\n  function poisonDmg(int32 health, IFightCalculator.Statuses memory statuses) internal pure returns (int32) {\\n    // poison should not kill\\n    if (statuses.poison && health.toUint() > 1) {\\n      // at least 1 dmg\\n      return int32(int(Math.max(health.toUint() / 10, 1)));\\n    }\\n    return 0;\\n  }\\n\\n  /// @notice Reduce health of the fighters according to attacks results, calc damagePoison, damage and damageReflect.\\n  function reduceHp(\\n    AttackResult memory firstAttack,\\n    AttackResult memory secondAttack,\\n    IFightCalculator.Fighter memory firstFighter,\\n    IFightCalculator.Fighter memory secondFighter\\n  ) internal pure {\\n    secondFighter.health = firstAttack.defenderHealth;\\n    firstFighter.damage = firstAttack.damage;\\n\\n    // hit only if second fighter survived\\n    if (secondFighter.health != 0) {\\n      firstFighter.health = secondAttack.defenderHealth;\\n      secondFighter.damage = secondAttack.damage;\\n\\n      // reflect damage from second to first\\n      secondFighter.damageReflect = (CalcLib.minI32(firstAttack.reflectDamage, firstFighter.health));\\n      firstFighter.health -= secondFighter.damageReflect;\\n\\n      // reflect damage from first to second\\n      firstFighter.damageReflect = (CalcLib.minI32(secondAttack.reflectDamage, secondFighter.health));\\n      secondFighter.health -= firstFighter.damageReflect;\\n    }\\n\\n    // poison second firstly (he got damage and statuses early)\\n    firstFighter.damagePoison = poisonDmg(secondFighter.health, secondFighter.statuses);\\n    secondFighter.health -= firstFighter.damagePoison;\\n\\n    // poison first fighter\\n    secondFighter.damagePoison = poisonDmg(firstFighter.health, firstFighter.statuses);\\n    firstFighter.health -= secondFighter.damagePoison;\\n  }\\n\\n  /// @notice Calculate life-stolen-per-hit value for the given {damage} value\\n  function lifeStolenPerHit(int32 dmg, IFightCalculator.FighterInfo memory attackerInfo) internal pure returns (int32) {\\n    return dmg * attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.LIFE_STOLEN_PER_HIT)] / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  /// @notice Increase {fighter.health} on the value of life-stolen-per-hit (only if the health > 0)\\n  function stealLife(IFightCalculator.Fighter memory fighter, AttackResult memory attackResult) internal pure {\\n    if (fighter.health != 0) {\\n      int32 newHealth = fighter.health + attackResult.lifeStolen;\\n      int32 maxHealth = fighter.info.fighterAttributes[uint(IStatController.ATTRIBUTES.LIFE)];\\n      fighter.health = (CalcLib.minI32(newHealth, maxHealth));\\n    }\\n  }\\n\\n  function skipTurn(IFightCalculator.FightInfoInternal memory fResult, bool isA) internal pure returns (bool) {\\n    return isA ? fResult.fighterA.statuses.stun : fResult.fighterB.statuses.stun;\\n  }\\n\\n  /// @notice Detect which hero is faster and makes the hit first. Magic is faster melee.\\n  /// Otherwise first hit is made by the fighter with higher attack rating (A is selected if the ratings are equal)\\n  function calcFirstHit(IFightCalculator.FightInfoInternal memory fInfo) internal pure returns (bool aFirst){\\n    if (fInfo.fighterA.info.attackType == IFightCalculator.AttackType.MAGIC) {\\n      if (fInfo.fighterB.info.attackType == IFightCalculator.AttackType.MAGIC) {\\n        // if both fighters use magic we check attack rating\\n        aFirst = isAttackerFaster(fInfo.fighterA.info, fInfo.fighterB.info);\\n      } else {\\n        // otherwise, magic always faster than melee\\n        aFirst = true;\\n      }\\n    } else {\\n      if (fInfo.fighterB.info.attackType == IFightCalculator.AttackType.MAGIC) {\\n        // if fighter use magic he will be faster\\n        aFirst = false;\\n      } else {\\n        // otherwise, check attack rating\\n        aFirst = isAttackerFaster(fInfo.fighterA.info, fInfo.fighterB.info);\\n      }\\n    }\\n  }\\n\\n  function isAttackerFaster(\\n    IFightCalculator.FighterInfo memory fighterAInfo,\\n    IFightCalculator.FighterInfo memory fighterBInfo\\n  ) internal pure returns (bool) {\\n    return fighterAInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)]\\n      >= fighterBInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)];\\n  }\\n\\n  function reflectMeleeDmg(int32 dmg, IFightCalculator.FighterInfo memory defenderInfo) internal pure returns (int32) {\\n    return dmg * defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.REFLECT_DAMAGE_MELEE)] / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  function reflectMagicDmg(int32 dmg, IFightCalculator.FighterInfo memory defenderInfo) internal pure returns (int32) {\\n    return dmg * defenderInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.REFLECT_DAMAGE_MAGIC)] / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  function _getChance(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    IItemController.AttackType aType,\\n    IStatController.ATTRIBUTES index,\\n    int32 resist\\n  ) internal pure returns (int32 chance) {\\n    chance = attackerInfo.fighterAttributes[uint(index)];\\n\\n    if (attackerInfo.attackType == IFightCalculator.AttackType.MAGIC) {\\n      if (index == IStatController.ATTRIBUTES.BURN && aType == IItemController.AttackType.FIRE) {\\n        chance += int32(20);\\n      }\\n      if (index == IStatController.ATTRIBUTES.FREEZE && aType == IItemController.AttackType.COLD) {\\n        chance += int32(20);\\n      }\\n      if (index == IStatController.ATTRIBUTES.CONFUSE && aType == IItemController.AttackType.LIGHTNING) {\\n        chance += int32(20);\\n      }\\n    }\\n\\n    return chance - chance * (CalcLib.minI32(resist, _MAX_RESIST)) / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  /// @param randomValue Result of call _pseudoRandom, value in the range [0...RESISTANCE_DENOMINATOR)\\n  function isCriticalHit(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    uint randomValue\\n  ) internal pure returns (bool) {\\n    return randomValue < attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.CRITICAL_HIT)].toUint();\\n  }\\n\\n  /// @param randomValue Result of call CalcLib.pseudoRandom(1e18)\\n  function reflectChaos(\\n    IItemController.AttackInfo memory magicAttack,\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    uint randomValue\\n  ) internal pure returns (int32) {\\n    return (magicAttack.aType == IItemController.AttackType.CHAOS && randomValue > 5e17)\\n      ? int32(attackerInfo.fighterStats.life) / int32(2)\\n      : int32(0);\\n  }\\n\\n  function _calcDmgInline(int32 dmg, IFightCalculator.FighterInfo memory info, IStatController.ATTRIBUTES index) internal pure returns (int32) {\\n    return dmg * (CalcLib.minI32(info.fighterAttributes[uint(index)], _MAX_RESIST)) / RESISTANCE_DENOMINATOR;\\n  }\\n\\n  function getMagicDamage(\\n    IFightCalculator.FighterInfo memory attackerInfo,\\n    IItemController.AttackInfo memory mAttack,\\n    uint randomValue_\\n  ) internal pure returns (int32) {\\n\\n    int32 attributeFactorResult = (attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.STRENGTH)] * mAttack.attributeFactors.strength / 100);\\n    attributeFactorResult += (attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DEXTERITY)] * mAttack.attributeFactors.dexterity / 100);\\n    attributeFactorResult += (attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.VITALITY)] * mAttack.attributeFactors.vitality / 100);\\n    attributeFactorResult += (attackerInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.ENERGY)] * mAttack.attributeFactors.energy / 100);\\n\\n    return int32(int(randomValue_)) + attributeFactorResult;\\n  }\\n\\n  //endregion ------------------------ Pure utils\\n\\n}\\n\",\"keccak256\":\"0x28859c6988ba5328aa1231ac48b5dfe1b5ddfee2a2ee87b924a3fa6a62545bfa\",\"license\":\"BUSL-1.1\"},\"contracts/lib/GOCLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IStoryController.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./PackingLib.sol\\\";\\n\\nlibrary GOCLib {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using PackingLib for address;\\n\\n  /// @param cTypes Array of object subtypes, see IGOC.ObjectSubType.XXX\\n  /// @param chances Chances in range 0-1e9, chances are corresponded to {cTypes} array\\n  function getRandomObject(\\n    IGOC.MainState storage s,\\n    IStoryController sc,\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    uint8 biome,\\n    address heroToken,\\n    uint heroTokenId\\n  ) internal returns (uint32 objectId) {\\n\\n    uint8 cType = _getObjectType(cTypes, chances, CalcLib.pseudoRandom);\\n\\n    EnumerableSet.UintSet storage objects = s.objectIds[packObjectMeta(biome, cType)];\\n    uint len = objects.length();\\n    if (len == 0) revert IAppErrors.EmptyObjects();\\n    uint objectArrayIdx = len == 1\\n      ? 0\\n      : CalcLib.pseudoRandom(len - 1);\\n\\n    EnumerableSet.UintSet storage played = s.playedObjects[heroToken.packPlayedObjKey(uint64(heroTokenId), cType, biome)];\\n    objectId = _searchObject(sc, len, objects, played, objectArrayIdx, false, heroToken, heroTokenId, cType);\\n\\n    if (objectId == 0) revert IAppErrors.ObjectNotFound();\\n    played.add(objectId);\\n  }\\n\\n  /// @notice Select cType using pseudo-random value according to the given {chances}\\n  /// @param cTypes Zero values are ignored.\\n  /// @param chances [0..100], decimals 9. At least once item should have value 100 to avoid {UnknownObjectType} error.\\n  /// @param random_ CalcLib.pseudoRandom, required for unit tests\\n  function _getObjectType(\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint8 cType) {\\n    uint len = cTypes.length;\\n    if (len == 0 || len != chances.length) revert IAppErrors.WrongGetObjectTypeInput();\\n\\n    if (len == 1) {\\n      cType = cTypes[0];\\n    } else {\\n      uint random = random_(CalcLib.MAX_CHANCE);\\n      uint minChance = CalcLib.MAX_CHANCE + 1;\\n      for (uint i; i < len; ++i) {\\n        // obj set can contain empty values, ignore them\\n        if (cTypes[i] == 0) continue;\\n        if (chances[i] > CalcLib.MAX_CHANCE) revert IAppErrors.WrongChances(chances[i], CalcLib.MAX_CHANCE);\\n        if ((CalcLib.MAX_CHANCE - chances[i]) <= random) {\\n          if (chances[i] < minChance) {\\n            minChance = chances[i];\\n            cType = cTypes[i];\\n          }\\n        }\\n      }\\n    }\\n\\n    if (cType == 0) revert IAppErrors.UnknownObjectTypeGoc1(0);\\n    return cType;\\n  }\\n\\n  /// @notice Find first object in {objects} available for the hero starting from {objArrayIdx}\\n  /// If object not found clear {played} and try to search again.\\n  /// @param lenObjects Length of {objects}\\n  /// @param objArrayIdx Start index in objects\\n  /// @param cType Object subtype\\n  /// @param skipPlayed true - don't check if the found object was already played\\n  /// @return objectId ID of the found object or 0 if the object is not found\\n  function _searchObject(\\n    IStoryController sc,\\n    uint lenObjects,\\n    EnumerableSet.UintSet storage objects,\\n    EnumerableSet.UintSet storage played,\\n    uint objArrayIdx,\\n    bool skipPlayed,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 cType\\n  ) internal returns (uint32 objectId) {\\n\\n    // clear played objects if we played them all at the current biome\\n    if (played.length() >= lenObjects) {\\n      skipPlayed = true;\\n      _clearPlayedObjects(played);\\n    }\\n\\n    bool foundValid;\\n\\n    unchecked {\\n    // search in a loop available objects\\n      for (uint i; i < lenObjects; ++i) {\\n        if (objArrayIdx >= lenObjects) {\\n          objArrayIdx = 0;\\n        }\\n        uint32 objId = uint32(objects.at(objArrayIdx));\\n        if (\\n          isAvailableForHero(sc, objId, cType, heroToken, heroTokenId)\\n          && (skipPlayed || !played.contains(objId))\\n        ) {\\n          foundValid = true;\\n          objectId = objId;\\n          break;\\n        }\\n\\n        ++objArrayIdx;\\n      }\\n    }\\n    // in case when we do not have available objects it is possible they are not eligible and need to reset counter\\n    if (!foundValid && !skipPlayed) {\\n      _clearPlayedObjects(played);\\n      objectId = _searchObject(sc, lenObjects, objects, played, objArrayIdx, true, heroToken, heroTokenId, cType);\\n    }\\n\\n    return objectId;\\n  }\\n\\n  function _clearPlayedObjects(EnumerableSet.UintSet storage played) internal {\\n    uint[] memory values = played.values();\\n    for (uint i; i < values.length; ++i) {\\n      played.remove(values[i]);\\n    }\\n  }\\n\\n  /// @notice Check if the object subtype is available for the hero\\n  function isAvailableForHero(IStoryController sc, uint32 objId, uint8 objectSubType, address hero, uint heroId) internal view returns (bool) {\\n    IGOC.ObjectType objType = getObjectTypeBySubType(IGOC.ObjectSubType(objectSubType));\\n    if (objType == IGOC.ObjectType.EVENT) {\\n      // no checks\\n      return true;\\n    } else if (objType == IGOC.ObjectType.MONSTER) {\\n      // no checks\\n      return true;\\n    } else if (objType == IGOC.ObjectType.STORY) {\\n      return sc.isStoryAvailableForHero(objId, hero, heroId);\\n    } else {\\n      // actually, this case is impossible, getObjectTypeBySubType will revert above if objectSubType is incorrect\\n      revert IAppErrors.UnknownObjectTypeForSubtype(objectSubType);\\n    }\\n  }\\n\\n  function packObjectMeta(uint8 biome, uint8 oType) internal pure returns (bytes32) {\\n    return PackingLib.packUint8Array3(biome, oType, 0);\\n  }\\n\\n  function unpackObjectMeta(bytes32 data) internal pure returns (uint8 biome, uint8 oType) {\\n    (biome, oType,) = PackingLib.unpackUint8Array3(data);\\n  }\\n\\n  /// @notice Get object type for the given {subType}\\n  function getObjectTypeBySubType(IGOC.ObjectSubType subType) internal pure returns (IGOC.ObjectType) {\\n    if (\\n      subType == IGOC.ObjectSubType.SHRINE_4\\n      || subType == IGOC.ObjectSubType.CHEST_5\\n      || subType == IGOC.ObjectSubType.SHRINE_UNIQUE_8\\n    ) {\\n      return IGOC.ObjectType.EVENT;\\n    } else if (\\n      subType == IGOC.ObjectSubType.ENEMY_NPC_1\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_SUPER_RARE_2\\n      || subType == IGOC.ObjectSubType.BOSS_3\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_UNIQUE_10\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_INSIDE_32\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_INSIDE_RARE_33\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_OUTSIDE_34\\n      || subType == IGOC.ObjectSubType.ENEMY_NPC_OUTSIDE_RARE_35\\n    ) {\\n      return IGOC.ObjectType.MONSTER;\\n    } else if (\\n      subType == IGOC.ObjectSubType.STORY_6\\n      || subType == IGOC.ObjectSubType.STORY_UNIQUE_7\\n      || subType == IGOC.ObjectSubType.STORY_ON_ROAD_11\\n      || subType == IGOC.ObjectSubType.STORY_UNDERGROUND_12\\n      || subType == IGOC.ObjectSubType.STORY_NIGHT_CAMP_13\\n      || subType == IGOC.ObjectSubType.STORY_MOUNTAIN_14\\n      || subType == IGOC.ObjectSubType.STORY_WATER_15\\n      || subType == IGOC.ObjectSubType.STORY_CASTLE_16\\n      || subType == IGOC.ObjectSubType.STORY_HELL_17\\n      || subType == IGOC.ObjectSubType.STORY_SPACE_18\\n      || subType == IGOC.ObjectSubType.STORY_WOOD_19\\n      || subType == IGOC.ObjectSubType.STORY_CATACOMBS_20\\n      || subType == IGOC.ObjectSubType.STORY_BAD_HOUSE_21\\n      || subType == IGOC.ObjectSubType.STORY_GOOD_TOWN_22\\n      || subType == IGOC.ObjectSubType.STORY_BAD_TOWN_23\\n      || subType == IGOC.ObjectSubType.STORY_BANDIT_CAMP_24\\n      || subType == IGOC.ObjectSubType.STORY_BEAST_LAIR_25\\n      || subType == IGOC.ObjectSubType.STORY_PRISON_26\\n      || subType == IGOC.ObjectSubType.STORY_SWAMP_27\\n      || subType == IGOC.ObjectSubType.STORY_INSIDE_28\\n      || subType == IGOC.ObjectSubType.STORY_OUTSIDE_29\\n      || subType == IGOC.ObjectSubType.STORY_INSIDE_RARE_30\\n      || subType == IGOC.ObjectSubType.STORY_OUTSIDE_RARE_31\\n    ) {\\n      return IGOC.ObjectType.STORY;\\n    } else {\\n      revert IAppErrors.UnknownObjectTypeGoc2(uint8(subType));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xda53ed0a5695ae11e3395b2afc1a6df5b0f16ebb54880773ed448895aa96b9c8\",\"license\":\"BUSL-1.1\"},\"contracts/lib/GameObjectControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../proxy/Controllable.sol\\\";\\nimport \\\"../lib/PackingLib.sol\\\";\\nimport \\\"../lib/EventLib.sol\\\";\\nimport \\\"../lib/StoryLib.sol\\\";\\nimport \\\"../lib/MonsterLib.sol\\\";\\nimport \\\"../lib/GOCLib.sol\\\";\\n\\nlibrary GameObjectControllerLib {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using PackingLib for bytes32;\\n  using PackingLib for uint16;\\n  using PackingLib for uint8;\\n  using PackingLib for address;\\n  using PackingLib for uint32[];\\n  using PackingLib for uint32;\\n  using PackingLib for uint64;\\n  using PackingLib for int32[];\\n  using PackingLib for int32;\\n\\n  //region ------------------------ CONSTANTS\\n  /// @dev keccak256(abi.encode(uint256(keccak256(\\\"game.object.controller.main\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 internal constant MAIN_STORAGE_LOCATION = 0xfa9e067a92ca4a9057b7b4465a8f29d633e1758238bd3a4a8ec5d0f904f6b900;\\n  //endregion ------------------------ CONSTANTS\\n\\n  //region ------------------------ RESTRICTIONS\\n\\n  function onlyDeployer(IController controller) internal view {\\n    if (!controller.isDeployer(msg.sender)) revert IAppErrors.ErrorNotDeployer(msg.sender);\\n  }\\n\\n  function onlyDungeonFactory(IController c) internal view {\\n    if (c.dungeonFactory() != msg.sender) revert IAppErrors.ErrorNotDungeonFactory(msg.sender);\\n  }\\n  //endregion ------------------------ RESTRICTIONS\\n\\n  //region ------------------------ VIEWS\\n\\n  function _S() internal pure returns (IGOC.MainState storage s) {\\n    assembly {\\n      s.slot := MAIN_STORAGE_LOCATION\\n    }\\n    return s;\\n  }\\n\\n  function getObjectMeta(uint32 objectId) internal view returns (uint8 biome, uint8 objectSubType) {\\n    return GOCLib.unpackObjectMeta(_S().objectMeta[objectId]);\\n  }\\n\\n  function isAvailableForHero(IController controller, address heroToken, uint heroTokenId, uint32 objId) internal view returns (bool) {\\n    (, uint8 objectSubType) = getObjectMeta(objId);\\n    return GOCLib.isAvailableForHero(IStoryController(controller.storyController()), objId, objectSubType, heroToken, heroTokenId);\\n  }\\n\\n  function isBattleObject(uint32 objectId) internal view returns (bool) {\\n    (,uint8 objectSubType) = GOCLib.unpackObjectMeta(_S().objectMeta[objectId]);\\n    return GOCLib.getObjectTypeBySubType(IGOC.ObjectSubType(objectSubType)) == IGOC.ObjectType.MONSTER;\\n  }\\n\\n  function getObjectTypeBySubType(uint32 objectId) internal view returns (IGOC.ObjectType) {\\n    (,uint8 objectSubType) = GOCLib.unpackObjectMeta(_S().objectMeta[objectId]);\\n    return GOCLib.getObjectTypeBySubType(IGOC.ObjectSubType(objectSubType));\\n  }\\n\\n  function getMonsterInfo(address hero, uint heroId, uint32 objectId) internal view returns (IGOC.MonsterGenInfo memory mGenInfo, IGOC.GeneratedMonster memory gen) {\\n    uint iteration = _S().iterations[hero.packIterationKey(uint64(heroId), objectId)];\\n    mGenInfo = MonsterLib.unpackMonsterInfo(_S().monsterInfos[objectId]);\\n    gen = MonsterLib.unpackGeneratedMonster(_S().monsterInfos[objectId]._generatedMonsters[hero.packNftId(heroId)][iteration]);\\n  }\\n\\n  function getIteration(address heroToken, uint heroTokenId, uint32 objId) internal view returns (uint) {\\n    return _S().iterations[_iterationKey(heroToken, heroTokenId, objId)];\\n  }\\n\\n  function getLastHeroFightTs(address heroToken, uint heroTokenId) internal view returns (uint) {\\n    return _S().lastHeroFightTs[heroToken.packNftId(heroTokenId)];\\n  }\\n\\n  function getFightDelay() internal view returns (uint) {\\n    return _S().fightDelay;\\n  }\\n\\n  function getStoryId(uint32 objectId) internal view returns (uint16) {\\n    return _S().storyIds[objectId];\\n  }\\n\\n  function getEventInfo(uint32 objectId) internal view returns (IGOC.EventInfo memory) {\\n    return _S().eventInfos[objectId];\\n  }\\n\\n  function getObjectIds(uint8 biome, IGOC.ObjectSubType subType) internal view returns (uint[] memory) {\\n    return _S().objectIds[GOCLib.packObjectMeta(biome, uint8(subType))].values();\\n  }\\n  //endregion ------------------------ VIEWS\\n\\n  //region ------------------------ REGISTRATION\\n\\n  function registerEvent(IController controller, IGOC.EventRegInfo memory regInfo) internal {\\n    onlyDeployer(controller);\\n    _checkMintItems(regInfo.mintItems, regInfo.mintItemsChances);\\n    uint32 objectId = _registerMetaId(regInfo.biome, regInfo.subType, regInfo.eventId);\\n    EventLib.eventRegInfoToInfo(regInfo, _S().eventInfos[objectId]);\\n    emit IApplicationEvents.EventRegistered(objectId, regInfo);\\n  }\\n\\n  function registerStory(IController controller, uint16 storyId, uint8 biome, IGOC.ObjectSubType subType) internal {\\n    onlyDeployer(controller);\\n    uint32 objectId = _registerMetaId(biome, subType, storyId);\\n    _S().storyIds[objectId] = storyId;\\n    emit IApplicationEvents.StoryRegistered(objectId, storyId);\\n  }\\n\\n  function registerMonster(IController controller, IGOC.MonsterGenInfo memory monsterGenInfo) internal {\\n    onlyDeployer(controller);\\n    _checkMintItems(monsterGenInfo.mintItems, monsterGenInfo.mintItemsChances);\\n    uint32 objectId = _registerMetaId(monsterGenInfo.biome, monsterGenInfo.subType, monsterGenInfo.monsterId);\\n\\n    delete _S().monsterInfos[objectId];\\n\\n    MonsterLib.packMonsterInfo(monsterGenInfo, _S().monsterInfos[objectId]);\\n    emit IApplicationEvents.MonsterRegistered(objectId, monsterGenInfo);\\n  }\\n\\n  function removeObject(IController controller, uint32 objectId) internal {\\n    onlyDeployer(controller);\\n    bytes32 meta = _S().objectMeta[objectId];\\n    delete _S().objectMeta[objectId];\\n    _S().objectIds[meta].remove(objectId);\\n\\n    emit IApplicationEvents.ObjectRemoved(objectId);\\n  }\\n  //endregion ------------------------ REGISTRATION\\n\\n  //region ------------------------ OBJECT ACTIONS\\n\\n  /// @param cTypes Array of object subtypes, see IGOC.ObjectSubType.XXX\\n  /// @param chances Chances in range 0-1e9, chances are corresponded to {cTypes} array\\n  function getRandomObject(\\n    IController c,\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    uint8 biome,\\n    address heroToken,\\n    uint heroTokenId\\n  ) internal returns (uint32 objectId) {\\n    onlyDungeonFactory(c);\\n    return GOCLib.getRandomObject(\\n      _S(),\\n      IStoryController(c.storyController()),\\n      cTypes,\\n      chances,\\n      biome,\\n      heroToken,\\n      heroTokenId\\n    );\\n  }\\n\\n  /// @notice Open {object}: increase iteration, [generate monsters]\\n  function open(IController c, address heroToken, uint heroTokenId, uint32 objectId) internal returns (uint iteration) {\\n    onlyDungeonFactory(c);\\n\\n    iteration = _increaseIteration(heroToken, heroTokenId, objectId);\\n\\n    (, uint8 objectSubType) = getObjectMeta(objectId);\\n    uint8 t = uint8(GOCLib.getObjectTypeBySubType(IGOC.ObjectSubType(objectSubType)));\\n\\n    if (t == uint8(IGOC.ObjectType.EVENT)) {\\n      // noop\\n    } else if (t == uint8(IGOC.ObjectType.MONSTER)) {\\n      MonsterLib.initialGeneration(_S().monsterInfos[objectId], heroToken, heroTokenId, iteration, IERC20(c.gameToken()).totalSupply());\\n    } else if (t == uint8(IGOC.ObjectType.STORY)) {\\n      // noop\\n    } else {\\n      revert IAppErrors.UnknownObjectTypeGocLib1(t);\\n    }\\n  }\\n\\n  /// @notice Execute event/story/monster action\\n  /// @param data Object type-specified data packed using abi.encode.\\n  /// For events: bool (accept / not accept results)\\n  /// For monsters: AttackInfo\\n  /// For story: bytes32 (answer id)\\n  function action(\\n    IController c,\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 stageId,\\n    bytes memory data\\n  ) internal returns (IGOC.ActionResult memory) {\\n    onlyDungeonFactory(c);\\n\\n    IGOC.ActionContext memory ctx;\\n\\n    ctx.objectId = objectId;\\n    ctx.sender = sender;\\n    ctx.heroToken = heroToken;\\n    ctx.heroTokenId = heroTokenId;\\n    ctx.stageId = stageId;\\n    ctx.data = data;\\n    (ctx.biome, ctx.objectSubType) = getObjectMeta(objectId);\\n\\n    ctx.dungeonId = dungeonId;\\n    ctx.iteration = _S().iterations[_iterationKey(heroToken, heroTokenId, objectId)];\\n    ctx.controller = c;\\n\\n    IGOC.ActionResult memory r;\\n    uint8 t = uint8(GOCLib.getObjectTypeBySubType(IGOC.ObjectSubType(ctx.objectSubType)));\\n    ctx.salt = block.number;\\n\\n    if (t == uint8(IGOC.ObjectType.EVENT)) {\\n      r = EventLib.action(ctx, _S().eventInfos[objectId]);\\n    } else if (t == uint8(IGOC.ObjectType.MONSTER)) {\\n      _checkAndRefreshFightTs(heroToken, heroTokenId);\\n      (r, ctx.salt) = MonsterLib.action(ctx, _S().monsterInfos[objectId]);\\n    } else if (t == uint8(IGOC.ObjectType.STORY)) {\\n      r = StoryLib.action(ctx, _S().storyIds[objectId]);\\n    } else {\\n      revert IAppErrors.UnknownObjectTypeGocLib2(t);\\n    }\\n\\n    r.objectId = ctx.objectId;\\n    r.heroToken = heroToken;\\n    r.heroTokenId = heroTokenId;\\n    r.iteration = ctx.iteration;\\n\\n\\n    emit IApplicationEvents.ObjectResultEvent(\\n      dungeonId,\\n      objectId,\\n      IGOC.ObjectType(t),\\n      heroToken,\\n      heroTokenId,\\n      stageId,\\n      ctx.iteration,\\n      data,\\n      r,\\n      ctx.salt\\n    );\\n    return r;\\n  }\\n//endregion ------------------------ OBJECT ACTIONS\\n\\n  //region ------------------------ Utils\\n\\n  /// @notice Generate object ID using (biome, subType, id)\\n  /// @param biome Biome to which the object belongs. [1..99]\\n  /// @param subType Subtype of the object, see IGOC.ObjectSubType.XXX. [1..99]\\n  /// @param id Id of the event / story / monster. [1..10_000]\\n  function _genObjectId(uint8 biome, uint8 subType, uint16 id) internal pure returns (uint32 objectId) {\\n    if (biome == 0 || subType == 0 || id == 0) revert IAppErrors.ZeroValueNotAllowed();\\n    if (biome >= 100) revert IAppErrors.GenObjectIdBiomeOverflow(biome);\\n    if (uint(subType) >= 100) revert IAppErrors.GenObjectIdSubTypeOverflow(subType);\\n    if (id > 10_000) revert IAppErrors.GenObjectIdIdOverflow(id);\\n    objectId = uint32(biome) * 1_000_000 + uint32(subType) * 10_000 + uint32(id);\\n  }\\n\\n  /// @notice Register the object in objectMeta and objectIds\\n  /// @param biome Biome to which the object belongs. [1..99]\\n  /// @param subType Subtype of the object, [1..99]\\n  /// @param id Id of the event / story / monster. [1..10_000]\\n  /// @return objectId Object id generated by {_genObjectId}\\n  function _registerMetaId(uint8 biome, IGOC.ObjectSubType subType, uint16 id) internal returns (uint32 objectId) {\\n    IGOC.MainState storage s = _S();\\n    objectId = _genObjectId(biome, uint8(subType), id);\\n    bytes32 meta = GOCLib.packObjectMeta(biome, uint8(subType));\\n    s.objectMeta[objectId] = meta;\\n    s.objectIds[meta].add(objectId);\\n  }\\n\\n  /// @notice Update last-hero-fight-timestamp\\n  function _checkAndRefreshFightTs(address heroToken, uint heroTokenId) internal {\\n    IGOC.MainState storage s = _S();\\n    bytes32 key = heroToken.packNftId(heroTokenId);\\n    if (s.lastHeroFightTs[key] + s.fightDelay > block.timestamp) revert IAppErrors.FightDelay();\\n    s.lastHeroFightTs[key] = block.timestamp;\\n  }\\n\\n  function _increaseIteration(address heroToken, uint heroTokenId, uint32 objId) internal returns (uint iteration) {\\n    IGOC.MainState storage s = _S();\\n    bytes32 key = _iterationKey(heroToken, heroTokenId, objId);\\n    iteration = s.iterations[key] + 1;\\n    s.iterations[key] = iteration;\\n  }\\n\\n  function _iterationKey(address heroToken, uint heroTokenId, uint32 objId) internal pure returns (bytes32) {\\n    return heroToken.packIterationKey(uint64(heroTokenId), objId);\\n  }\\n\\n  /// @notice Validate passed {mintItems_} and {mintItemsChances_}\\n  function _checkMintItems(address[] memory mintItems_, uint32[] memory mintItemsChances_) internal pure {\\n    uint length = mintItems_.length;\\n    if (mintItemsChances_.length != length) revert IAppErrors.LengthsMismatch();\\n\\n    for (uint i; i < length; ++i) {\\n      if (mintItems_[i] == address(0)) revert IAppErrors.ZeroAddress();\\n      if (mintItemsChances_[i] == 0) revert IAppErrors.ZeroChance();\\n      if (mintItemsChances_[i] > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighChance(mintItemsChances_[i]);\\n    }\\n  }\\n  //endregion ------------------------ Utils\\n}\\n\",\"keccak256\":\"0x857b9a65b0435711895fc2b22e61a4928d6138bfabe96cd07587a127c9cc39c8\",\"license\":\"BUSL-1.1\"},\"contracts/lib/ItemLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./StatLib.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IItem.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../solady/LibPRNG.sol\\\";\\n\\nlibrary ItemLib {\\n  using CalcLib for int32;\\n  using PackingLib for address;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n  using PackingLib for uint32[];\\n  using PackingLib for int32[];\\n\\n  //region ------------------------ Data types\\n  struct GenerateAttributesContext {\\n    /// @notice True if max allowed amount of random attributes were reached inside {_prepareAttributes}\\n    bool stopGenerateRandom;\\n    /// @notice Flag - attribute was generated. The array matches to info.ids\\n    bool[] usedIndexes;\\n    /// @notice Ids of the generated attributes\\n    uint8[] ids;\\n    /// @notice Randomly selected values of the generated attributes\\n    int32[] values;\\n    /// @notice Counter of the stored values into {ids} and {values}\\n    uint counter;\\n    /// @notice Total number of random attributes that were generated inside {_prepareAttributes}\\n    uint randomAttrCounter;\\n    /// @notice Total sum of all {random} values for random attributes generated in {_prepareAttributes}\\n    uint randomSum;\\n    /// @notice Total sum of all chances of the random attributes generated in {_prepareAttributes}\\n    uint chancesSum;\\n    /// @notice Total number of random attributes that can be generated\\n    uint totalRandomAttrsPossible;\\n  }\\n\\n  struct MintItemInfo {\\n    uint8 biome;\\n    uint8 heroCurrentLvl;\\n    uint8 maxItems;\\n    IOracle oracle;\\n    address[] mintItems;\\n    int32 magicFind;\\n    int32 destroyItems;\\n    uint32[] mintItemsChances;\\n    uint32 heroExp;\\n    uint amplifier;\\n    uint seed;\\n  }\\n  //endregion ------------------------ Data types\\n\\n  //region ------------------------ Main logic\\n\\n  /// @notice Mint new item, setup attributes, make extra setup if necessary (setup attack item, buff item)\\n  /// @param sender Dungeon Factory only is allowed\\n  /// @param item Item to be minted\\n  /// @param recipient The item is minted for the given recipient\\n  /// @return itemId Id of the newly minted item\\n  function mintNewItem(\\n    IItemController.MainState storage s,\\n    IController controller,\\n    address sender,\\n    address item,\\n    address recipient\\n  ) external returns (uint itemId) {\\n    if (controller.dungeonFactory() != sender) revert IAppErrors.ErrorNotDungeonFactory(sender);\\n\\n    itemId = IItem(item).mintFor(recipient);\\n\\n    IItemController.MintInfo memory info;\\n\\n    (\\n      info.meta,\\n      info.attributesIds,\\n      info.attributesValues,\\n      info.itemRarity\\n    ) = _setupNewAttributes(s, item, itemId, CalcLib.pseudoRandom);\\n\\n    // setup extra info\\n\\n    if (info.meta.itemMetaType == uint8(IItemController.ItemMetaType.ATTACK)) {\\n      info.attackInfo = unpackItemAttackInfo(_setupNewAttackItem(s, item, itemId));\\n    } else if (info.meta.itemMetaType == uint8(IItemController.ItemMetaType.BUFF)) {\\n      (\\n        info.casterIds,\\n        info.casterValues,\\n        info.targetIds,\\n        info.targetValues\\n      ) = _setupNewBuffItem(s, item, itemId, CalcLib.pseudoRandom);\\n    }\\n    // consumable stats unchangeable, get them by address\\n\\n    emit IApplicationEvents.NewItemMinted(item, itemId, info);\\n  }\\n\\n  /// @notice Mint random items, not more than {info.maxItems}\\n  function mintRandomItems(MintItemInfo memory info) internal returns (address[] memory) {\\n    return _mintRandomItems(info, CalcLib.nextPrng);\\n  }\\n\\n  //endregion ------------------------ Main logic\\n\\n  //region ------------------------ Internal logic\\n  /// @param nextPrng_ CalcLib.nextPrng, param is required by unit tests\\n  function _mintRandomItems(\\n    MintItemInfo memory info,\\n    function (LibPRNG.PRNG memory, uint) internal view returns (uint) nextPrng_\\n  ) internal returns (address[] memory) {\\n    unchecked {\\n      uint len = info.mintItems.length;\\n\\n    // Fisher\\u2013Yates shuffle\\n      LibPRNG.PRNG memory prng = LibPRNG.PRNG(info.oracle.getRandomNumber(CalcLib.MAX_CHANCE, info.seed));\\n      uint[] memory indices = new uint[](len);\\n      for (uint i = 1; i < len; ++i) {\\n        indices[i] = i;\\n      }\\n      LibPRNG.shuffle(prng, indices);\\n\\n      address[] memory minted = new address[](len);\\n      uint mintedLength;\\n      uint delta = StatLib.mintDropChanceDelta(info.heroExp, info.heroCurrentLvl, info.biome);\\n      uint di = Math.min(uint(int(info.destroyItems)), 100);\\n\\n      for (uint i; i < len; ++i) {\\n        if (info.mintItemsChances[indices[i]] > CalcLib.MAX_CHANCE) {\\n          revert IAppErrors.TooHighChance(info.mintItemsChances[indices[i]]);\\n        }\\n        uint chance = StatLib.mintDropChance(info.mintItemsChances[indices[i]], info.amplifier, delta);\\n        chance += chance * uint(int(info.magicFind)) / 100;\\n        chance -= chance * di / 100;\\n\\n        // need to call random in each loop coz each minted item should have dedicated chance\\n        uint rnd = nextPrng_(prng, CalcLib.MAX_CHANCE); // randomWithSeed_(CalcLib.MAX_CHANCE, rndSeed);\\n\\n        if (chance != 0 && (chance >= CalcLib.MAX_CHANCE || rnd < chance)) {\\n          // There is no break here: the cycle is continued even if the number of the minted items reaches the max.\\n          // The reason: gas consumption of success operation must be great of equal of the gas consumption of fail op.\\n          if (mintedLength < info.maxItems) {\\n            minted[i] = info.mintItems[indices[i]];\\n            ++mintedLength;\\n          }\\n        }\\n      }\\n\\n      address[] memory mintedAdjusted = new address[](mintedLength);\\n      uint j;\\n      for (uint i; i < len; ++i) {\\n        if (minted[i] != address(0)) {\\n          mintedAdjusted[j] = minted[i];\\n          ++j;\\n        }\\n      }\\n\\n      return mintedAdjusted;\\n    }\\n  }\\n\\n  function _setupNewAttributes(\\n    IItemController.MainState storage s,\\n    address item,\\n    uint itemId,\\n    function (uint) internal view returns (uint) random_\\n  ) internal returns (\\n    IItemController.ItemMeta memory meta,\\n    uint8[] memory ids,\\n    int32[] memory values,\\n    IItemController.ItemRarity itemRarity\\n  ){\\n    meta = unpackedItemMeta(s.itemMeta[item]);\\n    (ids, values, itemRarity) = _generateAttributes(unpackItemGenerateInfo(s.generateInfoAttributes[item]), meta, random_);\\n\\n    bytes32 packedItemId = item.packNftId(itemId);\\n    if (ids.length != 0) {\\n      s._itemAttributes[packedItemId] = values.toBytes32ArrayWithIds(ids);\\n    }\\n\\n    s.itemInfo[packedItemId] = PackingLib.packItemInfo(uint8(itemRarity), 0, meta.baseDurability);\\n  }\\n\\n  function _setupNewAttackItem(IItemController.MainState storage s, address item, uint itemId) internal returns (bytes32 attackInfo){\\n    // we just write data for attack item, no need to generate, it will be augmented later so need individual data for itemId\\n    attackInfo = s.generateInfoAttack[item];\\n    s._itemAttackInfo[item.packNftId(itemId)] = attackInfo;\\n  }\\n\\n  function _setupNewBuffItem(\\n    IItemController.MainState storage s,\\n    address item,\\n    uint itemId,\\n    function (uint) internal view returns (uint) random_\\n  ) internal returns (\\n    uint8[] memory casterIds,\\n    int32[] memory casterValues,\\n    uint8[] memory targetIds,\\n    int32[] memory targetValues\\n  ){\\n\\n    // CASTER\\n    (casterIds, casterValues) = _generateSimpleAttributes(\\n      unpackItemGenerateInfo(s.generateInfoCasterAttributes[item]),\\n      true,\\n      random_\\n    );\\n\\n    if (casterIds.length != 0) {\\n      s._itemCasterAttributes[item.packNftId(itemId)] = casterValues.toBytes32ArrayWithIds(casterIds);\\n    }\\n\\n    // TARGET\\n    (targetIds, targetValues) = _generateSimpleAttributes(\\n      unpackItemGenerateInfo(s.generateInfoTargetAttributes[item]),\\n      true,\\n      random_\\n    );\\n\\n    if (targetIds.length != 0) {\\n      s._itemTargetAttributes[item.packNftId(itemId)] = targetValues.toBytes32ArrayWithIds(targetIds);\\n    }\\n  }\\n\\n  /// @notice Generate all mandatory attributes and try to generate required number of random attributes.\\n  /// Generate at least {info.minRandomAttributes} of random attributes if it's possible\\n  /// but not more than {info.maxRandomAttributes}. Value of each attribute is generated randomly according its chances.\\n  /// @param meta Assume, that meta.min != 0, meta.max != 0 and both meta.min and meta.min should have same sign\\n  /// because results value cannot be 0\\n  /// @return ids Ids of the attributes, zero id is allowed\\n  /// @return values Randomly generated attributes values, min <= value <= max\\n  /// @return itemRarity Rarity of the item (Either meta.defaultRarity or calculated if there is no default rarity)\\n  function _generateAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    IItemController.ItemMeta memory meta,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    uint8[] memory ids,\\n    int32[] memory values,\\n    IItemController.ItemRarity itemRarity\\n  ) {\\n    GenerateAttributesContext memory ctx;\\n\\n    uint len = info.ids.length;\\n    if (len != 0) {\\n      ctx.ids = new uint8[](len);\\n      ctx.values = new int32[](len);\\n      ctx.usedIndexes = new bool[](len);\\n\\n      // Fisher\\u2013Yates shuffle\\n      _shuffleInfo(info, random_);\\n\\n      // initialize ctx by initial values\\n      // generate all mandatory attributes, try to generate not more than {meta.maxRandomAttributes} random attributes\\n      _prepareAttributes(info, meta.maxRandomAttributes, ctx, random_);\\n\\n      // generate missing random attributes if it's necessary, ctx.counter is incremented\\n      _generateMissingRandomAttributes(info, meta.minRandomAttributes, ctx, random_);\\n\\n      itemRarity = meta.defaultRarity == 0\\n        ? _calculateRarity(ctx.randomSum, ctx.chancesSum, ctx.randomAttrCounter, meta.maxRandomAttributes)\\n        : IItemController.ItemRarity(meta.defaultRarity);\\n    } else {\\n      itemRarity = IItemController.ItemRarity.UNKNOWN;\\n    }\\n\\n    (ids, values) = _fixLengthsIdsValues(ctx.ids, ctx.values, ctx.counter);\\n  }\\n\\n  /// @notice Generate missing random attributes if necessary\\n  function _generateMissingRandomAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    uint8 minRandomAttributes,\\n    GenerateAttributesContext memory ctx,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint attrToGen = Math.min(ctx.totalRandomAttrsPossible, minRandomAttributes);\\n    if (ctx.randomAttrCounter < attrToGen && ctx.totalRandomAttrsPossible > ctx.randomAttrCounter) {\\n      // it's necessary AND possible to generate more random attributes\\n      uint possibleRemainingAttrs = ctx.totalRandomAttrsPossible - ctx.randomAttrCounter;\\n      uint remainingAttrsToGen = attrToGen - ctx.randomAttrCounter;\\n\\n      uint[] memory indicesToGen = new uint[](possibleRemainingAttrs);\\n      uint indicesToGenCounter;\\n\\n      // enumerate all attributes, add all indices of not-generated attributes to {indexesToGen}\\n      for (uint i; i < info.ids.length; ++i) {\\n        // mandatory attrs should be already generated and no need to check\\n        if (!ctx.usedIndexes[i]) {\\n          indicesToGen[indicesToGenCounter] = i;\\n          indicesToGenCounter++;\\n        }\\n      }\\n\\n      // Shuffle indices of not-generated attributes using Fisher\\u2013Yates shuffle\\n      if (possibleRemainingAttrs > 1) {\\n        for (uint i; i < possibleRemainingAttrs - 1; ++i) {\\n          uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, possibleRemainingAttrs - 1, random_);\\n          (indicesToGen[randomIndex], indicesToGen[i]) = (indicesToGen[i], indicesToGen[randomIndex]);\\n        }\\n      }\\n      // Generate necessary amount of attributes. Fist (shuffled) attributes are selected (MAX_CHANCE is used for each)\\n      for (uint i; i < remainingAttrsToGen; ++i) {\\n        uint idx = indicesToGen[i];\\n        (int32 attr,) = _generateAttribute(info.mins[idx], info.maxs[idx], CalcLib.MAX_CHANCE, random_);\\n        ctx.ids[ctx.counter] = info.ids[idx];\\n        ctx.values[ctx.counter] = attr;\\n        ctx.counter++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Generate all mandatory attributes, generate not more than {meta.maxRandomAttributes} random attributes.\\n  /// Updates context:\\n  ///   {ctx.totalRandomAttrsPossible} - total number of possible random attributes\\n  ///   {ctx.randomAttrCounter} - total number of generated random attributes  <= {maxRandomAttributes}\\n  ///   {ctx.randomSum} = sum of random of all random attributes.\\n  ///   {ctx.chancesSum} = sum of chances of all random attributes.\\n  ///   {ctx.counter} = total number of generated attributes. Values of ctx.ids, ctx.values, ctx.usedIndexes are\\n  ///   initialized in the range [0...ctx.counter)\\n  /// @param ctx Empty struct but arrays ids, values and usedIndexes should be allocated for info.ids.length items\\n  function _prepareAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    uint8 maxRandomAttributes,\\n    GenerateAttributesContext memory ctx,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint len = info.ids.length;\\n    for (uint i; i < len; ++i) {\\n      if (info.chances[i] != CalcLib.MAX_CHANCE) {\\n        ctx.totalRandomAttrsPossible++;\\n      }\\n\\n      if (info.chances[i] >= CalcLib.MAX_CHANCE || !ctx.stopGenerateRandom) {\\n        (int32 attr, uint random) = _generateAttribute(info.mins[i], info.maxs[i], info.chances[i], random_);\\n//          console.log(\\\"GEN id: %s, value: %s%s\\\", _info.ids[i], attr >= 0 ? '' : '-', attr >= 0 ? uint(int(attr)) : uint(int(- attr)));\\n\\n        // count only random attributes for calc rarity\\n        if (attr != 0) {\\n\\n          if (\\n            info.chances[i] < CalcLib.MAX_CHANCE\\n            // && random != 0 // commented: random = 0 can produce crash in _generateMissingRandomAttributes\\n          ) {\\n            ctx.randomAttrCounter++;\\n            ctx.randomSum += random;\\n            ctx.chancesSum += info.chances[i];\\n          }\\n          ctx.ids[ctx.counter] = info.ids[i];\\n          ctx.values[ctx.counter] = attr;\\n          ctx.counter++;\\n          ctx.usedIndexes[i] = true;\\n        }\\n\\n        // it is a bit less fair random for attrs in the end of the list, however we assume it should be pretty rare case\\n        if (ctx.randomAttrCounter == maxRandomAttributes) {\\n          ctx.stopGenerateRandom = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Shuffle info arrays using Fisher\\u2013Yates shuffle algo\\n  function _shuffleInfo(\\n    IItemController.ItemGenerateInfo memory info,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint len = info.ids.length;\\n    if (len > 1) {\\n      for (uint i; i < len - 1; i++) {\\n        uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, len - 1, random_);\\n\\n        (info.ids[randomIndex], info.ids[i]) = (info.ids[i], info.ids[randomIndex]);\\n        (info.mins[randomIndex], info.mins[i]) = (info.mins[i], info.mins[randomIndex]);\\n        (info.maxs[randomIndex], info.maxs[i]) = (info.maxs[i], info.maxs[randomIndex]);\\n        (info.chances[randomIndex], info.chances[i]) = (info.chances[i], info.chances[randomIndex]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Generate array [0,1,2.. N-1] and shuffle it using Fisher\\u2013Yates shuffle algo\\n  function _shuffleIndices(\\n    uint countItems,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint[] memory indices){\\n    indices = new uint[](countItems);\\n    for (uint i = 1; i < countItems; ++i) {\\n      indices[i] = i;\\n    }\\n    if (countItems > 1) {\\n      for (uint i; i < countItems - 1; i++) {\\n        uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, countItems - 1, random_);\\n        (indices[randomIndex], indices[i]) = (indices[i], indices[randomIndex]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Reduce lengths of {ids} and {values} to {count}\\n  function _fixLengthsIdsValues(uint8[] memory ids, int32[] memory values, uint count) internal pure returns (\\n    uint8[] memory idsOut,\\n    int32[] memory valuesOut\\n  ) {\\n    if (count == ids.length) {\\n      return (ids, values);\\n    }\\n\\n    idsOut = new uint8[](count);\\n    valuesOut = new int32[](count);\\n    for (uint i; i < count; ++i) {\\n      idsOut[i] = ids[i];\\n      valuesOut[i] = values[i];\\n    }\\n    return (idsOut, valuesOut);\\n  }\\n\\n  /// @param random_ Pass CalcLib.pseudoRandom here, param is required for unit tests. Max value is MAX_CHANCE\\n  function _generateSimpleAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    bool maxChance,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    uint8[] memory ids,\\n    int32[] memory values\\n  ) {\\n    uint len = info.ids.length;\\n    ids = new uint8[](len);\\n    values = new int32[](len);\\n\\n    uint n = 0;\\n    for (uint i; i < len; ++i) {\\n      (int32 attr,) = _generateAttribute(\\n        info.mins[i],\\n        info.maxs[i],\\n        maxChance ? CalcLib.MAX_CHANCE : info.chances[i],\\n        random_\\n      );\\n      if (attr != 0) {\\n        ids[n] = info.ids[i];\\n        values[n] = attr;\\n        ++n;\\n      }\\n    }\\n\\n    return _fixLengthsIdsValues(ids, values, n);\\n  }\\n\\n  //endregion ------------------------ Internal logic\\n\\n  //region ------------------------ Internal utils\\n  /// @param chance Chance in the range [0...MAX_CHANCE], MAX_CHANCE=1e9 means \\\"mandatory\\\" element.\\n  /// @param random_ Pass CalcLib.pseudoRandom here, param is required for unit tests\\n  /// @return attr Either 0 or min <= attr <= max\\n  /// @return rnd Random value in the range [0...MAX_CHANCE]; It's always 0 for mandatory elements\\n  function _generateAttribute(\\n    int32 min,\\n    int32 max,\\n    uint32 chance,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    int32 attr,\\n    uint rnd\\n  ) {\\n    if (chance > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighChance(chance);\\n\\n    uint diff = uint(CalcLib.absDiff(min, max));\\n\\n    if (chance < CalcLib.MAX_CHANCE) {\\n      uint32 random = CalcLib.pseudoRandomUint32Flex(CalcLib.MAX_CHANCE, random_);\\n      if (random < chance) {\\n        uint r = uint(CalcLib.MAX_CHANCE - random * (CalcLib.MAX_CHANCE / chance));\\n        int32 k = int32(int(r * diff / uint(CalcLib.MAX_CHANCE)));\\n        return (min + k, random);\\n      }\\n    } else { // chance == CalcLib.MAX_CHANCE => mandatory element\\n      if (diff == 0) {\\n        return (min, 0);\\n      } else {\\n        uint r = uint(CalcLib.pseudoRandomUint32Flex(CalcLib.MAX_CHANCE, random_));\\n        int32 k = int32(int(r % (diff + 1)));\\n\\n        // return zero random - no need to calc rarity for mandatory elements\\n        return (min + k, 0);\\n      }\\n    }\\n\\n    return (0, 0);\\n  }\\n\\n  /// @notice Calculate item rarity\\n  /// @param randomSum Total sum random values of all random attributes in ItemGenerateInfo, [0...MAX_CHANCE/attrCounter]\\n  /// @param chancesSum Total sum of all random chances in ItemGenerateInfo\\n  /// @param attrCounter Count of random attributes in ItemGenerateInfo\\n  /// @param maxAttr Index of max allowed random attribute (all attributes with higher indices are not random)\\n  /// @return item rarity\\n  function _calculateRarity(uint randomSum, uint chancesSum, uint attrCounter, uint maxAttr) internal pure returns (\\n    IItemController.ItemRarity\\n  ) {\\n    if (attrCounter == 0) {\\n      return IItemController.ItemRarity.NORMAL;\\n    }\\n\\n    uint random = randomSum / attrCounter;\\n    uint averageChance = chancesSum / attrCounter;\\n\\n    if (random > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighRandom(random);\\n\\n    if (random < averageChance / 4 && attrCounter == maxAttr) {\\n      return IItemController.ItemRarity.RARE;\\n    } else if (random < averageChance * 3 / 4) {\\n      return attrCounter > 2\\n        ? IItemController.ItemRarity.RARE\\n        : IItemController.ItemRarity.MAGIC;\\n    } else {\\n      return attrCounter > 1\\n        ? IItemController.ItemRarity.MAGIC\\n        : IItemController.ItemRarity.NORMAL;\\n    }\\n  }\\n  //endregion ------------------------ Internal utils\\n\\n  //region ------------------------ PACKING\\n\\n  function packItemGenerateInfo(IItemController.ItemGenerateInfo memory info) internal pure returns (bytes32[] memory result) {\\n    uint len = info.ids.length;\\n    if (len != info.mins.length || len != info.maxs.length || len != info.chances.length) {\\n      revert IAppErrors.LengthsMismatch();\\n    }\\n\\n    result = new bytes32[](len);\\n\\n    for (uint i; i < len; ++i) {\\n      result[i] = PackingLib.packItemGenerateInfo(info.ids[i], info.mins[i], info.maxs[i], info.chances[i]);\\n    }\\n  }\\n\\n  function unpackItemGenerateInfo(bytes32[] memory gen) internal pure returns (\\n    IItemController.ItemGenerateInfo memory\\n  ) {\\n    uint length = gen.length;\\n\\n    uint8[] memory ids = new uint8[](length);\\n    int32[] memory mins = new int32[](length);\\n    int32[] memory maxs = new int32[](length);\\n    uint32[] memory chances = new uint32[](length);\\n\\n    for (uint i; i < length; ++i) {\\n      (ids[i], mins[i], maxs[i], chances[i]) = gen[i].unpackItemGenerateInfo();\\n    }\\n\\n    return IItemController.ItemGenerateInfo(ids, mins, maxs, chances);\\n  }\\n\\n  function packItemMeta(IItemController.ItemMeta memory meta) internal pure returns (bytes32) {\\n    return PackingLib.packItemMeta(\\n      meta.itemMetaType,\\n      meta.itemLevel,\\n      uint8(meta.itemType),\\n      meta.baseDurability,\\n      meta.defaultRarity,\\n      meta.minRandomAttributes,\\n      meta.maxRandomAttributes,\\n      meta.manaCost,\\n      meta.requirements\\n    );\\n  }\\n\\n  function unpackedItemMeta(bytes32 meta) internal pure returns (IItemController.ItemMeta memory result) {\\n    return meta.unpackItemMeta();\\n  }\\n\\n  function packItemInfo(IItemController.ItemInfo memory info) internal pure returns (bytes32) {\\n    return PackingLib.packItemInfo(uint8(info.rarity), info.augmentationLevel, info.durability);\\n  }\\n\\n  function unpackedItemInfo(bytes32 info) internal pure returns (IItemController.ItemInfo memory result) {\\n    uint8 rarity;\\n    (rarity, result.augmentationLevel, result.durability) = info.unpackItemInfo();\\n\\n    result.rarity = IItemController.ItemRarity(rarity);\\n    return result;\\n  }\\n\\n  function packItemAttackInfo(IItemController.AttackInfo memory info) internal pure returns (bytes32) {\\n    return PackingLib.packItemAttackInfo(\\n      uint8(info.aType),\\n      info.min,\\n      info.max,\\n      info.attributeFactors.strength,\\n      info.attributeFactors.dexterity,\\n      info.attributeFactors.vitality,\\n      info.attributeFactors.energy\\n    );\\n  }\\n\\n  function unpackItemAttackInfo(bytes32 info) internal pure returns (IItemController.AttackInfo memory result) {\\n    IStatController.CoreAttributes memory fs;\\n    uint8 aType;\\n    (aType, result.min, result.max, fs.strength, fs.dexterity, fs.vitality, fs.energy) = info.unpackItemAttackInfo();\\n\\n    result.aType = IItemController.AttackType(aType);\\n    result.attributeFactors = fs;\\n\\n    return result;\\n  }\\n  //endregion ------------------------ PACKING\\n}\\n\",\"keccak256\":\"0x35be525f87553c0d2c6066c366baa6cb25ec073cdb9dab01efdd0db3b98449b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/MonsterLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./PackingLib.sol\\\";\\nimport \\\"./StatLib.sol\\\";\\nimport \\\"./ItemLib.sol\\\";\\nimport \\\"./StringLib.sol\\\";\\nimport \\\"./FightLib.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IFightCalculator.sol\\\";\\nimport \\\"../interfaces/IDungeonFactory.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary MonsterLib {\\n  using CalcLib for int32;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n  using PackingLib for uint16;\\n  using PackingLib for uint8;\\n  using PackingLib for address;\\n  using PackingLib for uint32[];\\n  using PackingLib for uint32;\\n  using PackingLib for uint64;\\n  using PackingLib for int32[];\\n  using PackingLib for int32;\\n\\n  /// @notice Max value for monster rarity and monster/dungeon multiplier\\n  uint32 internal constant _MAX_AMPLIFIER = 1e9;\\n  uint private constant _TOTAL_SUPPLY_BASE = 10_000_000e18;\\n\\n  //region ------------------------ Data types\\n  struct AdrContext {\\n    address sender;\\n    address heroToken;\\n    IController controller;\\n    IOracle oracle;\\n    IStatController statController;\\n    IItemController itemController;\\n    uint heroTokenId;\\n  }\\n\\n  struct FightInternalInfo {\\n    int32 manaConsumed;\\n    int32 damage;\\n    int32 heroLifeRegen;\\n    int32 heroHp;\\n    int32 monsterHp;\\n    uint32 monsterRarity;\\n    IFightCalculator.FighterInfo heroFightInfo;\\n    IFightCalculator.FighterInfo monsterFightInfo;\\n  }\\n  //endregion ------------------------ Data types\\n\\n  //region ------------------------ Main logic\\n\\n  function initialGeneration(IGOC.MonsterInfo storage mInfo, address heroToken, uint heroTokenId, uint iteration, uint totalSupply) internal {\\n    return _initialGeneration(mInfo, heroToken, heroTokenId, iteration, _pseudoRandom, totalSupply);\\n  }\\n\\n  /// @notice Fight, post fight, generate fight results\\n  /// @return result Fields objectId, heroToken, heroTokenId, iteration remain uninitialized here.\\n  /// Caller is responsible to set that values.\\n  /// @dev weird, but memory ctx is more efficient here than calldata ctx\\n  function action(IGOC.ActionContext memory ctx, IGOC.MonsterInfo storage mInfo) external returns (\\n    IGOC.ActionResult memory result,\\n    uint8 turn\\n  ) {\\n    return _action(ctx, mInfo, _pseudoRandom, FightLib.fight);\\n  }\\n\\n  //endregion ------------------------ Main logic\\n\\n  //region ------------------------ Internal calculations\\n  function _action(\\n    IGOC.ActionContext memory ctx,\\n    IGOC.MonsterInfo storage mInfo,\\n    function (uint) internal view returns (uint) random_,\\n    function(\\n      IItemController,\\n      IFightCalculator.FightCall memory,\\n      function (uint) internal view returns (uint)\\n    ) internal returns (IFightCalculator.FightResult memory) fight_\\n  ) internal returns (\\n    IGOC.ActionResult memory result,\\n    uint8 turn\\n  ) {\\n    AdrContext memory adrCtx = _context(ctx);\\n    IGOC.GeneratedMonster memory gen = unpackGeneratedMonster(mInfo._generatedMonsters[ctx.heroToken.packNftId(ctx.heroTokenId)][ctx.iteration]);\\n    turn = gen.turnCounter;\\n\\n    (FightInternalInfo memory fInfo, IGOC.MonsterGenInfo memory genInfo) = _fight(ctx, mInfo, gen, adrCtx, random_, fight_);\\n    result = _postFight(mInfo, ctx, adrCtx, fInfo, genInfo, gen);\\n  }\\n\\n  /// @dev This function was extracted from {action()} to simplify unit testing\\n  /// @param gen These values CAN BE modified in place in some cases.\\n  /// @return result Fields objectId, heroToken, heroTokenId, iteration remain uninitialized here.\\n  /// Caller is responsible to set that values.\\n  function _postFight(\\n    IGOC.MonsterInfo storage mInfo,\\n    IGOC.ActionContext memory ctx,\\n    AdrContext memory adrCtx,\\n    FightInternalInfo memory fInfo,\\n    IGOC.MonsterGenInfo memory genInfo,\\n    IGOC.GeneratedMonster memory gen\\n  ) internal returns (\\n    IGOC.ActionResult memory result\\n  ) {\\n    bytes32 heroPackedId = ctx.heroToken.packNftId(ctx.heroTokenId);\\n    if (gen.turnCounter > 100) {\\n      // instant kill hero if too long battle\\n      fInfo.heroHp = 0;\\n    }\\n\\n    bool isMonsterDead = fInfo.monsterHp == 0;\\n    bool isHeroDead = fInfo.heroHp == 0;\\n\\n    if (isMonsterDead) {\\n      _bossDefeated(adrCtx, ctx);\\n    }\\n\\n    if (isMonsterDead || isHeroDead) {\\n      if (gen.generated) {\\n        delete mInfo._generatedMonsters[heroPackedId][ctx.iteration];\\n      }\\n      adrCtx.statController.clearUsedConsumables(ctx.heroToken, ctx.heroTokenId);\\n    } else {\\n      if (gen.generated) {\\n        gen.hp = fInfo.monsterHp;\\n        gen.turnCounter = gen.turnCounter + 1;\\n      } else {\\n        // new instance of gen is created\\n        gen = IGOC.GeneratedMonster({\\n          generated: true,\\n          amplifier: fInfo.monsterRarity,\\n          hp: fInfo.monsterHp,\\n          turnCounter: 1\\n        });\\n      }\\n\\n      mInfo._generatedMonsters[heroPackedId][ctx.iteration] = packGeneratedMonster(gen);\\n    }\\n\\n    if (isMonsterDead) {\\n      bytes32 index = _getMonsterCounterIndex(ctx.objectId);\\n      uint curValue = adrCtx.statController.heroCustomData(ctx.heroToken, ctx.heroTokenId, index);\\n      adrCtx.statController.setHeroCustomData(ctx.heroToken, ctx.heroTokenId, index, curValue + 1);\\n    }\\n\\n    // --- generate result\\n    result.kill = isHeroDead;\\n    result.experience = isMonsterDead\\n      ? StatLib.expPerMonster(\\n        fInfo.monsterFightInfo.fighterStats.experience,\\n        fInfo.monsterRarity,\\n        fInfo.heroFightInfo.fighterStats.experience,\\n        fInfo.heroFightInfo.fighterStats.level,\\n        ctx.biome\\n      )\\n      : 0;\\n\\n    result.heal = fInfo.heroLifeRegen;\\n    result.manaRegen = isMonsterDead ? fInfo.heroFightInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.MANA_AFTER_KILL)] : int32(0);\\n    // result.lifeChancesRecovered = 0; // zero by default\\n    result.damage = fInfo.damage;\\n    result.manaConsumed = fInfo.manaConsumed;\\n    result.mintItems = isMonsterDead\\n      ? _mintRandomItems(fInfo, ctx, genInfo, CalcLib.nextPrng)\\n      : new address[](0);\\n    result.completed = isMonsterDead || isHeroDead;\\n\\n    return result;\\n  }\\n\\n  /// @notice Generate new {GeneratedMonster} and put it to {mInfo._generatedMonsters}\\n  /// @param random_ Pass _pseudoRandom here, param is required for unit tests, range [0...MAX_AMPLIFIER]\\n  function _initialGeneration(\\n    IGOC.MonsterInfo storage mInfo,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint iteration,\\n    function (uint) internal view returns (uint) random_,\\n    uint totalSupply\\n  ) internal {\\n    IGOC.GeneratedMonster memory gen = IGOC.GeneratedMonster({\\n      generated: true,\\n      amplifier: uint32(random_(_MAX_AMPLIFIER)),\\n      hp: 0,\\n      turnCounter: 0\\n    });\\n\\n    IGOC.MonsterGenInfo memory info = unpackMonsterInfo(mInfo);\\n\\n    (int32[] memory attributes,) = generateMonsterAttributes(\\n      info.attributeIds,\\n      info.attributeValues,\\n      gen.amplifier,\\n      monsterMultiplier(totalSupply),\\n      info.experience\\n    );\\n    gen.hp = attributes[uint(IStatController.ATTRIBUTES.LIFE)];\\n\\n    mInfo._generatedMonsters[heroToken.packNftId(heroTokenId)][iteration] = packGeneratedMonster(gen);\\n  }\\n\\n  function _bossDefeated(AdrContext memory adrCtx, IGOC.ActionContext memory ctx) internal {\\n    if (ctx.objectSubType == uint8(IGOC.ObjectSubType.BOSS_3)) {\\n      IDungeonFactory(adrCtx.controller.dungeonFactory()).setBossCompleted(ctx.objectId, ctx.heroToken, ctx.heroTokenId, ctx.biome);\\n    }\\n  }\\n\\n  function _collectHeroFighterInfo(\\n    IFightCalculator.AttackInfo memory attackInfo,\\n    AdrContext memory adrContext\\n  ) internal view returns (\\n    IFightCalculator.FighterInfo memory fInfo,\\n    int32 manaConsumed\\n  ) {\\n    IStatController.ChangeableStats memory heroStats = adrContext.statController.heroStats(adrContext.heroToken, adrContext.heroTokenId);\\n\\n    (int32[] memory heroAttributes, int32 _manaConsumed) = _buffAndGetHeroAttributes(heroStats.level, attackInfo, adrContext);\\n\\n    manaConsumed = _manaConsumed;\\n\\n    if (attackInfo.attackType == IFightCalculator.AttackType.MAGIC) {\\n      manaConsumed += int32(adrContext.itemController.itemMeta(attackInfo.attackToken).manaCost);\\n    }\\n\\n    fInfo = IFightCalculator.FighterInfo({\\n      fighterAttributes: heroAttributes,\\n      fighterStats: heroStats,\\n      attackType: attackInfo.attackType,\\n      attackToken: attackInfo.attackToken,\\n      attackTokenId: attackInfo.attackTokenId,\\n      race: uint(IStatController.Race.HUMAN)\\n    });\\n  }\\n\\n  function _buffAndGetHeroAttributes(\\n    uint level,\\n    IFightCalculator.AttackInfo memory attackInfo,\\n    AdrContext memory context\\n  ) internal view returns (\\n    int32[] memory heroAttributes,\\n    int32 manaConsumed\\n  ) {\\n    return context.statController.buffHero(IStatController.BuffInfo({\\n      heroToken: context.heroToken,\\n      heroTokenId: context.heroTokenId,\\n      heroLevel: uint32(level),\\n      buffTokens: attackInfo.skillTokens,\\n      buffTokenIds: attackInfo.skillTokenIds\\n    }));\\n  }\\n\\n  /// @notice Get skill tokens, ensure that they are equipped on, add skill-tokens target attributes to hero attributes\\n  /// @param attributes Hero attributes. These values are incremented in place\\n  function _debuff(\\n    int32[] memory attributes,\\n    IFightCalculator.AttackInfo memory heroAttackInfo,\\n    AdrContext memory context\\n  ) internal view {\\n    uint length = heroAttackInfo.skillTokens.length;\\n    for (uint i; i < length; ++i) {\\n      address token = heroAttackInfo.skillTokens[i];\\n      uint id = heroAttackInfo.skillTokenIds[i];\\n\\n      (address equippedHero, uint equippedHeroId) = context.itemController.equippedOn(token, id);\\n      if (context.heroToken != equippedHero || context.heroTokenId != equippedHeroId) revert IAppErrors.NotYourDebuffItem();\\n\\n      (int32[] memory values, uint8[] memory ids) = context.itemController.targetAttributes(token, id);\\n\\n      StatLib.attributesAdd(attributes, StatLib.valuesToFullAttributesArray(values, ids));\\n    }\\n  }\\n\\n  /// @param random_ Pass _pseudoRandom here, param is required for unit tests, range [0...MAX_AMPLIFIER]\\n  function _collectMonsterFighterInfo(\\n    IGOC.MultiplierInfo memory multiplierInfo,\\n    IGOC.MonsterInfo storage mInfo,\\n    IGOC.GeneratedMonster memory gen,\\n    IFightCalculator.AttackInfo memory heroAttackInfo,\\n    uint heroLevel,\\n    AdrContext memory adrCtx,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    IFightCalculator.FighterInfo memory fighterInfo,\\n    uint32 rarity,\\n    IGOC.MonsterGenInfo memory genInfo\\n  ) {\\n    IFightCalculator.AttackInfo memory attackInfo;\\n\\n    rarity = gen.generated ? gen.amplifier : uint32(random_(_MAX_AMPLIFIER));\\n    (\\n      fighterInfo.fighterAttributes,\\n      fighterInfo.fighterStats.level,\\n      fighterInfo.fighterStats.experience,\\n      attackInfo,\\n      genInfo\\n    ) = _generateMonsterInfo(mInfo, rarity, monsterMultiplier(multiplierInfo.totalSupply), heroLevel, multiplierInfo.biome, random_);\\n\\n    _debuff(fighterInfo.fighterAttributes, heroAttackInfo, adrCtx);\\n\\n    fighterInfo.fighterStats.life = gen.generated\\n      ? uint32(gen.hp)\\n      : fighterInfo.fighterStats.life = uint32(CalcLib.max32(fighterInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.LIFE)], int32(1)));\\n\\n    fighterInfo.fighterStats.mana = uint32(fighterInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.MANA)]);\\n\\n    fighterInfo.attackType = attackInfo.attackType;\\n    fighterInfo.attackToken = attackInfo.attackToken;\\n    fighterInfo.attackTokenId = attackInfo.attackTokenId;\\n    fighterInfo.race = genInfo.race;\\n\\n    return (fighterInfo, rarity, genInfo);\\n  }\\n\\n  /// @param random_ Pass _pseudoRandom here, param is required to simplify unit testing\\n  /// @param fight_ Pass FightLib.fight here, param is required to simplify unit testing\\n  function _fight(\\n    IGOC.ActionContext memory ctx,\\n    IGOC.MonsterInfo storage mInfo,\\n    IGOC.GeneratedMonster memory gen,\\n    AdrContext memory adrCtx,\\n    function (uint) internal view returns (uint) random_,\\n    function(\\n      IItemController,\\n      IFightCalculator.FightCall memory,\\n      function (uint) internal view returns (uint)\\n    ) internal returns (IFightCalculator.FightResult memory) fight_\\n  ) internal returns (\\n    FightInternalInfo memory fInfo,\\n    IGOC.MonsterGenInfo memory info\\n  ) {\\n    IFightCalculator.FighterInfo memory heroFightInfo;\\n    IFightCalculator.FighterInfo memory monsterFightInfo;\\n\\n    {\\n      IFightCalculator.AttackInfo memory heroAttackInfo = decodeAndCheckAttackInfo(\\n        adrCtx.itemController,\\n        ctx.data,\\n        adrCtx.heroToken,\\n        adrCtx.heroTokenId\\n      );\\n\\n      // use fInfo.manaConsumed and fInfo.monsterRarity to story values temporally to avoid creation of additional vars\\n      (heroFightInfo, fInfo.manaConsumed) = _collectHeroFighterInfo(heroAttackInfo, adrCtx);\\n      (monsterFightInfo, fInfo.monsterRarity, info) = _collectMonsterFighterInfo(\\n        IGOC.MultiplierInfo(ctx.biome, IERC20(ctx.controller.gameToken()).totalSupply()),\\n        mInfo,\\n        gen,\\n        heroAttackInfo,\\n        heroFightInfo.fighterStats.level,\\n        adrCtx,\\n        random_\\n      );\\n    }\\n\\n    // >>> FIGHT!\\n    IFightCalculator.FightResult memory fightResult = fight_(\\n      adrCtx.itemController,\\n      IFightCalculator.FightCall({\\n        fighterA: heroFightInfo,\\n        fighterB: monsterFightInfo,\\n        dungeonId: ctx.dungeonId,\\n        objectId: ctx.objectId,\\n        heroAdr: adrCtx.heroToken,\\n        heroId: adrCtx.heroTokenId,\\n        stageId: ctx.stageId,\\n        iteration: ctx.iteration,\\n        turn: gen.turnCounter\\n      }),\\n      random_\\n    );\\n\\n    fInfo = FightInternalInfo({\\n      manaConsumed: fInfo.manaConsumed + fightResult.manaConsumedA,\\n      monsterRarity: fInfo.monsterRarity,\\n      damage: _calcDmg(int32(heroFightInfo.fighterStats.life), fightResult.healthA),\\n      heroFightInfo: heroFightInfo,\\n      monsterFightInfo: monsterFightInfo,\\n      heroLifeRegen: fightResult.healthA > int32(heroFightInfo.fighterStats.life) ? fightResult.healthA - int32(heroFightInfo.fighterStats.life) : int32(0),\\n      heroHp: fightResult.healthA,\\n      monsterHp: fightResult.healthB\\n    });\\n  }\\n\\n  /// @param random_ Pass _pseudoRandom here, param is required for unit tests, range [0...1e18]\\n  /// @return attributes Attributes amplified on amplifier and dungeonMultiplier\\n  /// @return level Result level in the range: [mInfo.level .. heroLevel]\\n  /// @return experience Experience amplified on amplifier and dungeonMultiplier\\n  /// @return attackInfo Attack info. For magic hero attack type monster will have melee in half hits (randomly)\\n  /// @return info Unpacked data from {mInfo}, some fields can be uninitialized, see comments to unpackMonsterInfo (!)\\n  function _generateMonsterInfo(\\n    IGOC.MonsterInfo storage mInfo,\\n    uint32 amplifier,\\n    int32 dungeonMultiplier,\\n    uint heroLevel,\\n    uint biome,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    int32[] memory attributes,\\n    uint32 level,\\n    uint32 experience,\\n    IFightCalculator.AttackInfo memory attackInfo,\\n    IGOC.MonsterGenInfo memory info\\n  ) {\\n    info = unpackMonsterInfo(mInfo);\\n\\n    level = uint32(info.level);\\n    if (level < heroLevel + 1) {\\n      level = uint32(Math.min(level + ((heroLevel - level) * 10 / 15), biome * 5));\\n    }\\n\\n    if (info.attackType == uint8(IFightCalculator.AttackType.MAGIC)) {\\n      // sometimes use melee (25% chance)\\n      uint rnd = random_(1e18);\\n      if (rnd > 0.75e18) {\\n        attackInfo.attackType = IFightCalculator.AttackType.MELEE;\\n      } else {\\n        attackInfo.attackType = IFightCalculator.AttackType.MAGIC;\\n        attackInfo.attackToken = info.attackToken;\\n        attackInfo.attackTokenId = info.attackTokenId;\\n      }\\n    } else {\\n      attackInfo.attackType = IFightCalculator.AttackType(info.attackType);\\n    }\\n\\n    (attributes, experience) = generateMonsterAttributes(\\n      info.attributeIds,\\n      info.attributeValues,\\n      amplifier,\\n      dungeonMultiplier,\\n      info.experience\\n    );\\n\\n    return (attributes, level, experience, attackInfo, info);\\n  }\\n\\n  function _mintRandomItems(\\n    FightInternalInfo memory fInfo,\\n    IGOC.ActionContext memory ctx,\\n    IGOC.MonsterGenInfo memory genInfo,\\n    function (LibPRNG.PRNG memory, uint) internal view returns (uint) nextPrng_\\n  ) internal returns (\\n    address[] memory\\n  ) {\\n    return ItemLib._mintRandomItems(\\n      ItemLib.MintItemInfo({\\n        mintItems: genInfo.mintItems,\\n        mintItemsChances: genInfo.mintItemsChances,\\n        biome: ctx.biome,\\n        amplifier: fInfo.monsterRarity,\\n        seed: 0,\\n        oracle: IOracle(ctx.controller.oracle()),\\n        heroExp: fInfo.heroFightInfo.fighterStats.experience,\\n        heroCurrentLvl: uint8(fInfo.heroFightInfo.fighterStats.level),\\n        magicFind: fInfo.heroFightInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.MAGIC_FIND)],\\n        destroyItems: fInfo.heroFightInfo.fighterAttributes[uint(IStatController.ATTRIBUTES.DESTROY_ITEMS)],\\n        maxItems: genInfo.maxDropItems\\n      }),\\n      nextPrng_\\n    );\\n  }\\n\\n  //endregion ------------------------ Internal calculations\\n\\n  //region ------------------------ Utils\\n\\n  function _context(IGOC.ActionContext memory ctx) internal view returns (AdrContext memory context) {\\n    context = AdrContext({\\n      sender: ctx.sender,\\n      heroToken: ctx.heroToken,\\n      heroTokenId: ctx.heroTokenId,\\n      controller: ctx.controller,\\n      oracle: IOracle(ctx.controller.oracle()),\\n      statController: IStatController(ctx.controller.statController()),\\n      itemController: IItemController(ctx.controller.itemController())\\n    });\\n  }\\n\\n  function unpackGeneratedMonster(bytes32 gen) internal pure returns (IGOC.GeneratedMonster memory result) {\\n    (bool generated, uint32 amplifier, int32 hp, uint8 turnCounter) = gen.unpackGeneratedMonster();\\n    result = IGOC.GeneratedMonster({\\n      generated: generated,\\n      amplifier: amplifier,\\n      hp: hp,\\n      turnCounter: turnCounter\\n    });\\n  }\\n\\n  function packGeneratedMonster(IGOC.GeneratedMonster memory gen) internal pure returns (bytes32) {\\n    return PackingLib.packGeneratedMonster(gen.generated, gen.amplifier, gen.hp, gen.turnCounter);\\n  }\\n\\n  function packMonsterInfo(IGOC.MonsterGenInfo memory mInfo, IGOC.MonsterInfo storage info) internal {\\n    info.attributes = mInfo.attributeValues.toBytes32ArrayWithIds(mInfo.attributeIds);\\n    info.stats = PackingLib.packMonsterStats(mInfo.level, mInfo.race, mInfo.experience, mInfo.maxDropItems);\\n    info.attackInfo = PackingLib.packAttackInfo(mInfo.attackToken, mInfo.attackTokenId, mInfo.attackType);\\n\\n    uint len = mInfo.mintItems.length;\\n    bytes32[] memory mintItems = new bytes32[](len);\\n\\n    for (uint i; i < len; ++i) {\\n      mintItems[i] = mInfo.mintItems[i].packItemMintInfo(mInfo.mintItemsChances[i]);\\n    }\\n\\n    info.mintItems = mintItems;\\n  }\\n\\n  /// @return Attention: Following fields are not initialized: biome, subType, monsterId\\n  function unpackMonsterInfo(IGOC.MonsterInfo storage mInfo) internal view returns (IGOC.MonsterGenInfo memory) {\\n    IGOC.MonsterGenInfo memory result;\\n    (result.attributeValues, result.attributeIds) = mInfo.attributes.toInt32ArrayWithIds();\\n    (result.level, result.race, result.experience, result.maxDropItems) = mInfo.stats.unpackMonsterStats();\\n    (result.attackToken, result.attackTokenId, result.attackType) = mInfo.attackInfo.unpackAttackInfo();\\n\\n    uint len = mInfo.mintItems.length;\\n    result.mintItems = new address[](len);\\n    result.mintItemsChances = new uint32[](len);\\n\\n    for (uint i = 0; i < len; i++) {\\n      (result.mintItems[i], result.mintItemsChances[i]) = mInfo.mintItems[i].unpackItemMintInfo();\\n    }\\n\\n    // Attention: result.biome, result.subType, result.monsterId are not initialized\\n    return result;\\n  }\\n\\n  function decodeAndCheckAttackInfo(IItemController ic, bytes memory data, address heroToken, uint heroId) internal view returns (IFightCalculator.AttackInfo memory) {\\n    (IFightCalculator.AttackInfo memory attackInfo) = abi.decode(data, (IFightCalculator.AttackInfo));\\n\\n    if (uint(attackInfo.attackType) == 0) revert IAppErrors.UnknownAttackType(uint(attackInfo.attackType));\\n\\n    if (attackInfo.attackToken != address(0)) {\\n      (address h, uint hId) = ic.equippedOn(attackInfo.attackToken, attackInfo.attackTokenId);\\n      if (heroToken != h || hId != heroId) revert IAppErrors.NotYourAttackItem();\\n    }\\n\\n    for (uint i; i < attackInfo.skillTokens.length; ++i) {\\n      (address h, uint hId) = ic.equippedOn(attackInfo.skillTokens[i], attackInfo.skillTokenIds[i]);\\n      if (heroToken != h || hId != heroId) revert IAppErrors.NotYourBuffItem();\\n    }\\n\\n    return attackInfo;\\n  }\\n\\n  /// @dev MAX_AMPLIFIER value will means +100% to all attributes\\n  ///      slowly increase monsters power from 10% of the target supply\\n  function monsterMultiplier(uint totalSupply) internal pure returns (int32) {\\n    if(totalSupply < _TOTAL_SUPPLY_BASE / 10) {\\n      return 0;\\n    }\\n\\n    return int32(int((uint(_MAX_AMPLIFIER) * totalSupply) / _TOTAL_SUPPLY_BASE));\\n  }\\n\\n  function getMonsterMultiplier(IController controller) internal view returns (int32) {\\n    uint totalSupply = IERC20(controller.gameToken()).totalSupply();\\n    return monsterMultiplier(totalSupply);\\n  }\\n\\n  function amplifyMonsterAttribute(int32 value, uint32 amplifier, int32 dungeonMultiplier) internal pure returns (int32) {\\n    if (value == 0) {\\n      return 0;\\n    }\\n    return value +\\n      int32(\\n        (int(value) * int(uint(amplifier)) / int(uint(_MAX_AMPLIFIER)))\\n        + (int(value) * int(dungeonMultiplier) / int(uint(_MAX_AMPLIFIER)))\\n      );\\n  }\\n\\n  /// @dev A wrapper around {CalcLib.pseudoRandom} to pass it as param (to be able to implement unit tests}\\n  function _pseudoRandom(uint max) internal view returns (uint) {\\n    return CalcLib.pseudoRandom(max);\\n  }\\n\\n  /// @notice Amplify values of the attributes and of the experience\\n  ///         using randomly generated {amplifier} and {dungeonMultiplier}.\\n  ///         Attributes = amplify(ids, values), experience = amplify(baseExperience)\\n  function generateMonsterAttributes(\\n    uint8[] memory ids,\\n    int32[] memory values,\\n    uint32 amplifier,\\n    int32 dungeonMultiplier,\\n    uint32 baseExperience\\n  ) internal pure returns (\\n    int32[] memory attributes,\\n    uint32 experience\\n  ) {\\n    // reduce random\\n    amplifier = amplifier / 4;\\n\\n    attributes = new int32[](uint(IStatController.ATTRIBUTES.END_SLOT));\\n    for (uint i; i < ids.length; ++i) {\\n      attributes[ids[i]] = amplifyMonsterAttribute(values[i], amplifier, dungeonMultiplier);\\n    }\\n    experience = uint32(amplifyMonsterAttribute(int32(baseExperience), amplifier, dungeonMultiplier));\\n  }\\n\\n  function _calcDmg(int32 heroLifeBefore, int32 heroLifeAfter) internal pure returns (int32 damage) {\\n    return heroLifeAfter == 0\\n      ? heroLifeBefore\\n      : heroLifeBefore - CalcLib.minI32(heroLifeAfter, heroLifeBefore);\\n  }\\n\\n  function _getMonsterCounterIndex(uint32 objectId) internal pure returns (bytes32) {\\n    return bytes32(abi.encodePacked(\\\"MONSTER_\\\", StringLib._toString(uint(objectId))));\\n  }\\n  //endregion ------------------------ Utils\\n\\n\\n}\\n\",\"keccak256\":\"0xf4f9c00f224db5907fa3808497d6ea8381ad4964414d4cf3a2c62501f613f7ce\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PackingLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\n\\nlibrary PackingLib {\\n\\n  error TooHighValue(uint value);\\n  error OutOfBounds(uint index, uint length);\\n  error UnexpectedValue(uint expected, uint actual);\\n  error WrongValue(uint newValue, uint actual);\\n  error LengthsMismatch();\\n  error IntOutOfRange(int value);\\n  error ZeroValue();\\n  /// @notice packCustomDataChange requires an input string with two zero bytes at the beginning\\n  ///         0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0000\\n  /// This error happens if these bytes are not zero\\n  error IncompatibleInputString();\\n\\n  //////////////////////////\\n  // ---- PACKING LOGIC ----\\n  //////////////////////////\\n\\n  //region ------------------------------------ COMMON\\n\\n  function packNftId(address token, uint id) internal pure returns (bytes32 serialized) {\\n    if (id > uint(type(uint64).max)) revert TooHighValue(id);\\n    serialized = bytes32(uint(uint160(token)));\\n    serialized |= bytes32(uint(uint64(id))) << 160;\\n  }\\n\\n  function unpackNftId(bytes32 data) internal pure returns (address token, uint id) {\\n    token = address(uint160(uint(data)));\\n    id = uint(data) >> 160;\\n  }\\n\\n  function packAddressWithAmount(address token, uint amount) internal pure returns (bytes32 data) {\\n    if (amount > uint(type(uint96).max)) revert TooHighValue(amount);\\n    data = bytes32(uint(uint160(token)));\\n    data |= bytes32(uint(uint96(amount))) << 160;\\n  }\\n\\n  function unpackAddressWithAmount(bytes32 data) internal pure returns (address token, uint amount) {\\n    token = address(uint160(uint(data)));\\n    amount = uint(data) >> 160;\\n  }\\n\\n  function packItemMintInfo(address item, uint32 chance) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(item)));\\n    data |= bytes32(uint(chance)) << 160;\\n  }\\n\\n  function unpackItemMintInfo(bytes32 data) internal pure returns (address item, uint32 chance) {\\n    item = address(uint160(uint(data)));\\n    chance = uint32(uint(data) >> 160);\\n  }\\n\\n  /// @param customDataIndex We assume, that two lowest bytes of this string are always zero\\n  /// So, the string looks like following: 0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0000\\n  /// Last 2 bytes will be used to encode {value}\\n  function packCustomDataChange(bytes32 customDataIndex, int16 value) internal pure returns (bytes32 data) {\\n    if (uint(customDataIndex) != (uint(customDataIndex) >> 16) << 16) revert IncompatibleInputString();\\n    data = bytes32(uint(customDataIndex));\\n    data |= bytes32(uint(uint16(value)));\\n  }\\n\\n  function unpackCustomDataChange(bytes32 data) internal pure returns (bytes32 customDataIndex, int16 value) {\\n    customDataIndex = bytes32((uint(data) >> 16) << 16);\\n    value = int16(int(uint(uint16(uint(data)))));\\n  }\\n\\n  /// @dev min(uint64) + max(uint64) + isHeroData/isMandatory(uint8)\\n  function packCustomDataRequirements(uint64 min, uint64 max, bool key) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(min));\\n    data |= bytes32(uint(max)) << 64;\\n    data |= bytes32(uint(key ? uint8(1) : uint8(0))) << (64 + 64);\\n  }\\n\\n  function unpackCustomDataRequirements(bytes32 data) internal pure returns (uint64 min, uint64 max, bool key) {\\n    min = uint64(uint(data));\\n    max = uint64(uint(data) >> 64);\\n    key = uint8(uint(data) >> (64 + 64)) == uint8(1);\\n  }\\n\\n  function packStatsChange(\\n    uint32 experience,\\n    int32 heal,\\n    int32 manaRegen,\\n    int32 lifeChancesRecovered,\\n    int32 damage,\\n    int32 manaConsumed\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(experience));\\n    data |= bytes32(uint(uint32(heal))) << 32;\\n    data |= bytes32(uint(uint32(manaRegen))) << (32 + 32);\\n    data |= bytes32(uint(uint32(lifeChancesRecovered))) << (32 + 32 + 32);\\n    data |= bytes32(uint(uint32(damage))) << (32 + 32 + 32 + 32);\\n    data |= bytes32(uint(uint32(manaConsumed))) << (32 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackStatsChange(bytes32 data) internal pure returns (\\n    uint32 experience,\\n    int32 heal,\\n    int32 manaRegen,\\n    int32 lifeChancesRecovered,\\n    int32 damage,\\n    int32 manaConsumed\\n  ) {\\n    experience = uint32(uint(data));\\n    heal = int32(int(uint(data) >> 32));\\n    manaRegen = int32(int(uint(data) >> (32 + 32)));\\n    lifeChancesRecovered = int32(int(uint(data) >> (32 + 32 + 32)));\\n    damage = int32(int(uint(data) >> (32 + 32 + 32 + 32)));\\n    manaConsumed = int32(int(uint(data) >> (32 + 32 + 32 + 32 + 32)));\\n  }\\n  //endregion ------------------------------------ COMMON\\n\\n  //region ------------------------------------ WORLD/BATTLEFIELD MAP\\n\\n  function packMapObject(address objectAddress, uint64 objectId, uint8 objectType) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(bytes20(objectAddress));\\n    packedData |= bytes32(uint(objectId) << 32);\\n    packedData |= bytes32(uint(objectType) << 24);\\n  }\\n\\n  function unpackMapObject(bytes32 packedData) internal pure returns (address objectAddress, uint64 objectId, uint8 objectType) {\\n    objectAddress = address(bytes20(packedData));\\n    objectId = uint64(uint(packedData) >> 32);\\n    objectType = uint8(uint(packedData) >> 24);\\n  }\\n\\n  function packCoordinate(uint128 x, uint128 y) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(uint(x));\\n    packedData |= bytes32(uint(y) << 128);\\n  }\\n\\n  function unpackCoordinate(bytes32 packedData) internal pure returns (uint128 x, uint128 y) {\\n    x = uint128(uint(packedData));\\n    y = uint128(uint(packedData) >> 128);\\n  }\\n\\n  /// @param x Assume x <= max uint64\\n  /// @param y Assume y <= max uint64\\n  function packBattlefieldId(uint8 biomeMapFieldId, uint8 territoryNumber, uint128 x, uint128 y) internal pure returns (bytes32 packedData) {\\n    // 256 => 128 + 128;\\n    // 1) 128 is used for biomeMapFieldId, territoryNumber and probably other fields in the future\\n    // 2) 128 is used to store x, y as uint64, uint64\\n\\n    // we will use uint64 for coordinates assuming it is more than enough for biome map\\n    packedData = bytes32(uint(biomeMapFieldId));\\n    packedData |= bytes32(uint(territoryNumber) << (8));\\n    packedData |= bytes32(uint(uint64(x)) << 128);\\n    packedData |= bytes32(uint(uint64(y)) << (64 + 128));\\n  }\\n\\n  function unpackBattlefieldId(bytes32 packedData) internal pure returns (uint8 biomeMapFieldId, uint8 territoryNumber, uint128 x, uint128 y) {\\n    biomeMapFieldId = uint8(uint(packedData));\\n    territoryNumber = uint8(uint(packedData) >> (8));\\n    x = uint128(uint64(uint(packedData) >> (128)));\\n    y = uint128(uint64(uint(packedData) >> (64 + 128)));\\n  }\\n  //endregion ------------------------------------ WORLD/BATTLEFIELD MAP\\n\\n  //region ------------------------------------ REINFORCEMENT\\n\\n  function packReinforcementHeroInfo(uint8 biome, uint128 score, uint8 fee, uint64 stakeTs) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(uint(biome));\\n    packedData |= bytes32(uint(score) << 8);\\n    packedData |= bytes32(uint(fee) << (8 + 128));\\n    packedData |= bytes32(uint(stakeTs) << (8 + 128 + 8));\\n  }\\n\\n  function unpackReinforcementHeroInfo(bytes32 packedData) internal pure returns (uint8 biome, uint128 score, uint8 fee, uint64 stakeTs) {\\n    biome = uint8(uint(packedData));\\n    score = uint128(uint(packedData) >> 8);\\n    fee = uint8(uint(packedData) >> (8 + 128));\\n    stakeTs = uint64(uint(packedData) >> (8 + 128 + 8));\\n  }\\n  //endregion ------------------------------------ REINFORCEMENT\\n\\n  //region ------------------------------------ DUNGEON\\n\\n  function packDungeonKey(address heroAdr, uint80 heroId, uint16 dungLogicNum) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(dungLogicNum)) << (160 + 80);\\n  }\\n\\n  function unpackDungeonKey(bytes32 data) internal pure returns (address heroAdr, uint80 heroId, uint16 dungLogicNum) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint80(uint(data) >> 160);\\n    dungLogicNum = uint16(uint(data) >> (160 + 80));\\n  }\\n\\n  // --- GAME OBJECTS ---\\n\\n  function packIterationKey(address heroAdr, uint64 heroId, uint32 objId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(objId)) << (160 + 64);\\n  }\\n\\n  function unpackIterationKey(bytes32 data) internal pure returns (address heroAdr, uint64 heroId, uint32 objId) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint64(uint(data) >> 160);\\n    objId = uint32(uint(data) >> (160 + 64));\\n  }\\n\\n  function packMonsterStats(\\n    uint8 level,\\n    uint8 race,\\n    uint32 experience,\\n    uint8 maxDropItems\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(level));\\n    data |= bytes32(uint(race)) << 8;\\n    data |= bytes32(uint(experience)) << (8 + 8);\\n    data |= bytes32(uint(maxDropItems)) << (8 + 8 + 32);\\n  }\\n\\n  function unpackMonsterStats(bytes32 data) internal pure returns (\\n    uint8 level,\\n    uint8 race,\\n    uint32 experience,\\n    uint8 maxDropItems\\n  ) {\\n    level = uint8(uint(data));\\n    race = uint8(uint(data) >> 8);\\n    experience = uint32(uint(data) >> (8 + 8));\\n    maxDropItems = uint8(uint(data) >> (8 + 8 + 32));\\n  }\\n\\n  function packAttackInfo(\\n    address attackToken,\\n    uint64 attackTokenId,\\n    uint8 attackType\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(attackToken)));\\n    data |= bytes32(uint(attackTokenId)) << 160;\\n    data |= bytes32(uint(attackType)) << (160 + 64);\\n  }\\n\\n  function unpackAttackInfo(bytes32 data) internal pure returns (\\n    address attackToken,\\n    uint64 attackTokenId,\\n    uint8 attackType\\n  ) {\\n    attackToken = address(uint160(uint(data)));\\n    attackTokenId = uint64(uint(data) >> 160);\\n    attackType = uint8(uint(data) >> (160 + 64));\\n  }\\n\\n  function packPlayedObjKey(address heroAdr, uint64 heroId, uint8 oType, uint8 biome) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(oType)) << (160 + 64);\\n    data |= bytes32(uint(biome)) << (160 + 64 + 8);\\n  }\\n\\n  function unpackPlayedObjKey(bytes32 data) internal pure returns (address heroAdr, uint64 heroId, uint8 oType, uint8 biome) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint64(uint(data) >> 160);\\n    oType = uint8(uint(data) >> (160 + 64));\\n    biome = uint8(uint(data) >> (160 + 64 + 8));\\n  }\\n\\n  function packGeneratedMonster(bool generated, uint32 amplifier, int32 hp, uint8 turnCounter) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint8(generated ? 1 : 0)));\\n    data |= bytes32(uint(amplifier)) << 8;\\n    data |= bytes32(uint(uint32(hp))) << (8 + 32);\\n    data |= bytes32(uint(turnCounter)) << (8 + 32 + 32);\\n  }\\n\\n  function unpackGeneratedMonster(bytes32 data) internal pure returns (bool generated, uint32 amplifier, int32 hp, uint8 turnCounter) {\\n    generated = uint8(uint(data)) == uint8(1);\\n    amplifier = uint32(uint(data) >> 8);\\n    hp = int32(int(uint(data) >> (8 + 32)));\\n    turnCounter = uint8(uint(data) >> (8 + 32 + 32));\\n  }\\n  //endregion ------------------------------------ DUNGEON\\n\\n  //region ------------------------------------ ITEMS\\n\\n  /// @notice itemMetaType8 + itemLvl8 + itemType8 + baseDurability16 + defaultRarity8 + minAttr8 + maxAttr8 + manaCost32 + req(packed core 128)\\n  /// @param itemType This is ItemType enum\\n  function packItemMeta(\\n    uint8 itemMetaType,\\n    uint8 itemLvl,\\n    uint8 itemType,\\n    uint16 baseDurability,\\n    uint8 defaultRarity,\\n    uint8 minAttr,\\n    uint8 maxAttr,\\n    uint32 manaCost,\\n    IStatController.CoreAttributes memory req\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(itemMetaType));\\n    data |= bytes32(uint(itemLvl)) << 8;\\n    data |= bytes32(uint(itemType)) << (8 + 8);\\n    data |= bytes32(uint(baseDurability)) << (8 + 8 + 8);\\n    data |= bytes32(uint(defaultRarity)) << (8 + 8 + 8 + 16);\\n    data |= bytes32(uint(minAttr)) << (8 + 8 + 8 + 16 + 8);\\n    data |= bytes32(uint(maxAttr)) << (8 + 8 + 8 + 16 + 8 + 8);\\n    data |= bytes32(uint(manaCost)) << (8 + 8 + 8 + 16 + 8 + 8 + 8);\\n    data |= bytes32(uint(int(req.strength))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32);\\n    data |= bytes32(uint(int(req.dexterity))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32);\\n    data |= bytes32(uint(int(req.vitality))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(req.energy))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackItemMeta(bytes32 data) internal pure returns (IItemController.ItemMeta memory) {\\n    IItemController.ItemMeta memory result;\\n\\n    result.itemMetaType = uint8(uint(data));\\n    result.itemLevel = uint8(uint(data) >> 8);\\n    result.itemType = IItemController.ItemType(uint8(uint(data) >> (8 + 8)));\\n    result.baseDurability = uint16(uint(data) >> (8 + 8 + 8));\\n    result.defaultRarity = uint8(uint(data) >> (8 + 8 + 8 + 16));\\n    result.minRandomAttributes = uint8(uint(data) >> (8 + 8 + 8 + 16 + 8));\\n    result.maxRandomAttributes = uint8(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8));\\n    result.manaCost = uint32(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8));\\n    result.requirements.strength = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32)));\\n    result.requirements.dexterity = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32)));\\n    result.requirements.vitality = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32)));\\n    result.requirements.energy = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32 + 32)));\\n\\n    return result;\\n  }\\n\\n  function packItemGenerateInfo(uint8 id, int32 min, int32 max, uint32 chance) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(id));\\n    data |= bytes32(uint(uint32(min))) << 8;\\n    data |= bytes32(uint(uint32(max))) << (8 + 32);\\n    data |= bytes32(uint(chance)) << (8 + 32 + 32);\\n  }\\n\\n  function unpackItemGenerateInfo(bytes32 data) internal pure returns (uint8 id, int32 min, int32 max, uint32 chance) {\\n    id = uint8(uint(data));\\n    min = int32(int(uint(data) >> 8));\\n    max = int32(int(uint(data) >> (8 + 32)));\\n    chance = uint32(uint(data) >> (8 + 32 + 32));\\n  }\\n\\n  function packItemAttackInfo(\\n    uint8 attackType,\\n    int32 min,\\n    int32 max,\\n    int32 factorStr,\\n    int32 factorDex,\\n    int32 factorVit,\\n    int32 factorEng\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(attackType));\\n    data |= bytes32(uint(uint32(min))) << 8;\\n    data |= bytes32(uint(uint32(max))) << (8 + 32);\\n    data |= bytes32(uint(int(factorStr))) << (8 + 32 + 32);\\n    data |= bytes32(uint(int(factorDex))) << (8 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(factorVit))) << (8 + 32 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(factorEng))) << (8 + 32 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackItemAttackInfo(bytes32 data) internal pure returns (\\n    uint8 attackType,\\n    int32 min,\\n    int32 max,\\n    int32 factorStr,\\n    int32 factorDex,\\n    int32 factorVit,\\n    int32 factorEng\\n  ) {\\n    attackType = uint8(uint(data));\\n    min = int32(int(uint(data) >> 8));\\n    max = int32(int(uint(data) >> (8 + 32)));\\n    factorStr = int32(int(uint(data) >> (8 + 32 + 32)));\\n    factorDex = int32(int(uint(data) >> (8 + 32 + 32 + 32)));\\n    factorVit = int32(int(uint(data) >> (8 + 32 + 32 + 32 + 32)));\\n    factorEng = int32(int(uint(data) >> (8 + 32 + 32 + 32 + 32 + 32)));\\n  }\\n\\n  function packItemInfo(uint8 rarity, uint8 augmentationLevel, uint16 durability) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(rarity));\\n    data |= bytes32(uint(augmentationLevel)) << 8;\\n    data |= bytes32(uint(durability)) << (8 + 8);\\n  }\\n\\n  function unpackItemInfo(bytes32 data) internal pure returns (uint8 rarity, uint8 augmentationLevel, uint16 durability) {\\n    rarity = uint8(uint(data));\\n    augmentationLevel = uint8(uint(data) >> 8);\\n    durability = uint16(uint(data) >> (8 + 8));\\n  }\\n  //endregion ------------------------------------ ITEMS\\n\\n  //region ------------------------------------ STORIES\\n\\n  function packStoryPageId(uint16 storyId, uint16 pageId, uint8 heroClass) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n  }\\n\\n  function unpackStoryPageId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n  }\\n\\n  function packStoryAnswerId(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n  }\\n\\n  function unpackStoryAnswerId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n  }\\n\\n  function packStoryNextPagesId(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 resultId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n    data |= bytes32(uint(resultId)) << (16 + 16 + 8 + 16);\\n  }\\n\\n  function unpackStoryNextPagesId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 resultId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n    resultId = uint8(uint(data) >> (16 + 16 + 8 + 16));\\n  }\\n\\n  function packStoryAttributeRequirement(uint8 attributeIndex, int32 value, bool isCore) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(attributeIndex));\\n    data |= bytes32(uint(uint32(value))) << 8;\\n    data |= bytes32(uint(isCore ? uint8(1) : uint8(0))) << (8 + 32);\\n  }\\n\\n  function unpackStoryAttributeRequirement(bytes32 data) internal pure returns (uint8 attributeIndex, int32 value, bool isCore) {\\n    attributeIndex = uint8(uint(data));\\n    value = int32(int(uint(data) >> 8));\\n    isCore = uint8(uint(data) >> (8 + 32)) == uint8(1);\\n  }\\n\\n  function packStoryItemRequirement(address item, bool requireItemBurn, bool requireItemEquipped) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(item)));\\n    data |= bytes32(uint(requireItemBurn ? uint8(1) : uint8(0))) << 160;\\n    data |= bytes32(uint(requireItemEquipped ? uint8(1) : uint8(0))) << (160 + 8);\\n  }\\n\\n  function unpackStoryItemRequirement(bytes32 data) internal pure returns (address item, bool requireItemBurn, bool requireItemEquipped) {\\n    item = address(uint160(uint(data)));\\n    requireItemBurn = uint8(uint(data) >> 160) == uint8(1);\\n    requireItemEquipped = uint8(uint(data) >> (160 + 8)) == uint8(1);\\n  }\\n\\n  /// @dev max amount is 309,485,009 for token with 18 decimals\\n  function packStoryTokenRequirement(address token, uint88 amount, bool requireTransfer) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(token)));\\n    data |= bytes32(uint(amount)) << 160;\\n    data |= bytes32(uint(requireTransfer ? uint8(1) : uint8(0))) << (160 + 88);\\n  }\\n\\n  function unpackStoryTokenRequirement(bytes32 data) internal pure returns (address token, uint88 amount, bool requireTransfer) {\\n    token = address(uint160(uint(data)));\\n    amount = uint88(uint(data) >> 160);\\n    requireTransfer = uint8(uint(data) >> (160 + 88)) == uint8(1);\\n  }\\n\\n  function packStoryCustomDataResult(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 customDataResultId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n    data |= bytes32(uint(customDataResultId)) << (16 + 16 + 8 + 16);\\n  }\\n\\n  function unpackStoryCustomDataResult(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 customDataResultId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n    customDataResultId = uint8(uint(data) >> (16 + 16 + 8 + 16));\\n  }\\n\\n  function packStoryHeroState(uint16 pageId, uint40 heroLastActionTS) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(pageId));\\n    data |= bytes32(uint(heroLastActionTS)) << 16;\\n  }\\n\\n  function unpackStoryHeroState(bytes32 data) internal pure returns (uint16 pageId, uint40 heroLastActionTS) {\\n    pageId = uint16(uint(data));\\n    heroLastActionTS = uint40(uint(data) >> 16);\\n  }\\n\\n  function packStoryHeroStateId(address heroAdr, uint80 heroId, uint16 storyId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(storyId)) << (160 + 80);\\n  }\\n\\n  function unpackStoryHeroStateId(bytes32 data) internal pure returns (address heroAdr, uint80 heroId, uint16 storyId) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint80(uint(data) >> 160);\\n    storyId = uint16(uint(data) >> (160 + 80));\\n  }\\n\\n  function packStorySimpleRequirement(uint32 randomRequirement, uint32 delayRequirement, bool isFinalAnswer) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(randomRequirement));\\n    data |= bytes32(uint(delayRequirement)) << 32;\\n    data |= bytes32(uint(isFinalAnswer ? uint8(1) : uint8(0))) << (32 + 32);\\n  }\\n\\n  function unpackStorySimpleRequirement(bytes32 data) internal pure returns (uint32 randomRequirement, uint32 delayRequirement, bool isFinalAnswer) {\\n    randomRequirement = uint32(uint(data));\\n    delayRequirement = uint32(uint(data) >> 32);\\n    isFinalAnswer = uint8(uint(data) >> (32 + 32)) == uint8(1);\\n  }\\n\\n  function packBurnInfo(uint8 slot, uint64 chance, bool stopIfBurned) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(slot));\\n    data |= bytes32(uint(chance)) << 8;\\n    data |= bytes32(uint(stopIfBurned ? uint8(1) : uint8(0))) << (8 + 64);\\n  }\\n\\n  function unpackBurnInfo(bytes32 data) internal pure returns (uint8 slot, uint64 chance, bool stopIfBurned) {\\n    slot = uint8(uint(data));\\n    chance = uint64(uint(data) >> 8);\\n    stopIfBurned = uint8(uint(data) >> (8 + 64)) == uint8(1);\\n  }\\n  //endregion ------------------------------------ STORIES\\n\\n  ////////////////////////////////////////////////////////////////////////////////////\\n  // ---- ARRAYS LOGIC ----\\n  ////////////////////////////////////////////////////////////////////////////////////\\n\\n  //region ------------------------------------ SIMPLE ARRAYS\\n\\n\\n  function packUint8Array(uint8[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 32) revert OutOfBounds(len, 32);\\n    bytes32 result;\\n    for (uint i = 0; i < len; i++) {\\n      result |= bytes32(uint(data[i])) << (i * 8);\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Simple faster version of {packUint8Array} for small number of items\\n  ///         It allows to exclude dynamic array creation.\\n  function packUint8Array3(uint8 a, uint8 b, uint8 c) internal pure returns (bytes32) {\\n    bytes32 result = bytes32(uint(a));\\n    result |= bytes32(uint(b)) << (1 * 8);\\n    result |= bytes32(uint(c)) << (2 * 8);\\n    return result;\\n  }\\n\\n\\n  function unpackUint8Array(bytes32 data) internal pure returns (uint8[] memory) {\\n    uint8[] memory result = new uint8[](32);\\n    for (uint i = 0; i < 32; i++) {\\n      result[i] = uint8(uint(data) >> (i * 8));\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Simple faster version of {unpackUint8Array} for small number of items\\n  ///         It allows to exclude only first 3 values\\n  function unpackUint8Array3(bytes32 data) internal pure returns (uint8 a, uint8 b, uint8 c) {\\n    a = uint8(uint(data));\\n    b = uint8(uint(data) >> (1 * 8));\\n    c = uint8(uint(data) >> (2 * 8));\\n  }\\n\\n  function changeUnit8ArrayWithCheck(bytes32 data, uint index, uint8 value, uint8 expectedPrevValue) internal pure returns (bytes32 newData) {\\n    uint8[] memory arr = unpackUint8Array(data);\\n    if (arr[index] != expectedPrevValue) revert UnexpectedValue(uint(expectedPrevValue), uint(arr[index]));\\n    arr[index] = value;\\n    return packUint8Array(arr);\\n  }\\n\\n  function packInt32Array(int32[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 8) revert OutOfBounds(len, 8);\\n    bytes32 result;\\n    for (uint i; i < len; i++) {\\n      result |= bytes32(uint(uint32(data[i]))) << (i * 32);\\n    }\\n    return result;\\n  }\\n\\n  function unpackInt32Array(bytes32 data) internal pure returns (int32[] memory) {\\n    int32[] memory result = new int32[](8);\\n    for (uint i = 0; i < 8; i++) {\\n      result[i] = int32(int(uint(data) >> (i * 32)));\\n    }\\n    return result;\\n  }\\n\\n  function packUint32Array(uint32[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 8) revert OutOfBounds(len, 8);\\n    bytes32 result;\\n    for (uint i = 0; i < len; i++) {\\n      result |= bytes32(uint(data[i])) << (i * 32);\\n    }\\n    return result;\\n  }\\n\\n  function unpackUint32Array(bytes32 data) internal pure returns (uint32[] memory) {\\n    uint32[] memory result = new uint32[](8);\\n    for (uint i = 0; i < 8; i++) {\\n      result[i] = uint32(uint(data) >> (i * 32));\\n    }\\n    return result;\\n  }\\n  //endregion ------------------------------------ SIMPLE ARRAYS\\n\\n  //region ------------------------------------ COMPLEX ARRAYS\\n\\n  // We should represent arrays without concrete size.\\n  // For this reason we must not revert on out of bounds but return zero value instead.\\n\\n  // we need it for properly unpack packed arrays with ids\\n//  function getInt32AsInt24(bytes32[] memory arr, uint idx) internal pure returns (int32) {\\n//    if (idx / 8 >= arr.length) {\\n//      return int32(0);\\n//    }\\n//    return int32(int24(int(uint(arr[idx / 8]) >> ((idx % 8) * 32))));\\n//  }\\n\\n  // we need it for properly unpack packed arrays with ids\\n//  function getUnit8From32Step(bytes32[] memory arr, uint idx) internal pure returns (uint8) {\\n//    if (idx / 8 >= arr.length) {\\n//      return uint8(0);\\n//    }\\n//    return uint8(uint(arr[idx / 8]) >> ((idx % 8) * 32 + 24));\\n//  }\\n\\n  function getInt32Memory(bytes32[] memory arr, uint idx) internal pure returns (int32) {\\n    if (idx / 8 >= arr.length) {\\n      return int32(0);\\n    }\\n    return int32(int(uint(arr[idx / 8]) >> ((idx % 8) * 32)));\\n  }\\n\\n  function getInt32(bytes32[] storage arr, uint idx) internal view returns (int32) {\\n    // additional gas usage, but we should not revert on out of bounds\\n    if (idx / 8 >= arr.length) {\\n      return int32(0);\\n    }\\n    return int32(int(uint(arr[idx / 8]) >> ((idx % 8) * 32)));\\n  }\\n\\n  function setInt32(bytes32[] storage arr, uint idx, int32 value) internal {\\n    uint pos = idx / 8;\\n    uint shift = (idx % 8) * 32;\\n\\n    uint curLength = arr.length;\\n    if (pos >= curLength) {\\n      arr.push(0);\\n      for (uint i = curLength; i < pos; ++i) {\\n        arr.push(0);\\n      }\\n    }\\n\\n    arr[pos] = bytes32(uint(arr[pos]) & ~(uint(0xffffffff) << shift) | (uint(uint32(value)) & 0xffffffff) << shift);\\n  }\\n\\n  /// @notice Increment {idx}-th item on {value}\\n  function changeInt32(bytes32[] storage arr, uint idx, int32 value) internal returns (int32 newValue, int32 change) {\\n    int32 cur = int32(int(getInt32(arr, idx)));\\n    int newValueI = int(cur) + int(value);\\n    newValue = int32(newValueI);\\n    change = int32(newValueI - int(cur));\\n\\n    setInt32(arr, idx, newValue);\\n  }\\n\\n  function toInt32Array(bytes32[] memory arr, uint size) internal pure returns (int32[] memory) {\\n    int32[] memory result = new int32[](size);\\n    for (uint i = 0; i < arr.length; i++) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= size) break;\\n        result[idx] = getInt32Memory(arr, idx);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev pack int32 array into bytes32 array\\n  function toBytes32Array(int32[] memory arr) internal pure returns (bytes32[] memory) {\\n    uint size = arr.length / 8 + 1;\\n    bytes32[] memory result = new bytes32[](size);\\n    for (uint i; i < size; ++i) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= arr.length) break;\\n        result[i] |= bytes32(uint(uint32(arr[idx]))) << (j * 32);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev pack int32 array into bytes32 array using last 8bytes for ids\\n  ///      we can not use zero values coz will not able to properly unpack it later\\n  function toBytes32ArrayWithIds(int32[] memory arr, uint8[] memory ids) internal pure returns (bytes32[] memory) {\\n    if (arr.length != ids.length) revert LengthsMismatch();\\n\\n    uint size = arr.length / 8 + 1;\\n    bytes32[] memory result = new bytes32[](size);\\n    for (uint i; i < size; ++i) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= arr.length) break;\\n\\n//        console.log(\\\"toBytes32ArrayWithIds id: %s, value: %s%s\\\", ids[idx], arr[idx] >= 0 ? '' : '-', arr[idx] >= 0 ? uint(int(arr[idx])) : uint(int(-arr[idx])));\\n\\n        if (arr[idx] > type(int24).max || arr[idx] < type(int24).min) revert IntOutOfRange(int(arr[idx]));\\n        if (arr[idx] == 0) revert ZeroValue();\\n        result[i] |= bytes32(uint(uint24(int24(arr[idx])))) << (j * 32);\\n        result[i] |= bytes32(uint(ids[idx])) << (j * 32 + 24);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev we do not know exact size of array, assume zero values is not acceptable for this array\\n  function toInt32ArrayWithIds(bytes32[] memory arr) internal pure returns (int32[] memory values, uint8[] memory ids) {\\n    uint len = arr.length;\\n    uint size = len * 8;\\n    int32[] memory valuesTmp = new int32[](size);\\n    uint8[] memory idsTmp = new uint8[](size);\\n    uint counter;\\n    for (uint i = 0; i < len; i++) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        // if (idx >= size) break;  // it looks like a useless check\\n        valuesTmp[idx] = int32(int24(int(uint(arr[i]) >> (j * 32)))); // getInt32AsInt24(arr, idx);\\n        idsTmp[idx] = uint8(uint(arr[i]) >> (j * 32 + 24)); // getUnit8From32Step(arr, idx);\\n        if (valuesTmp[idx] == 0) {\\n          break;\\n        }\\n        counter++;\\n      }\\n    }\\n\\n    values = new int32[](counter);\\n    ids = new uint8[](counter);\\n    for (uint i; i < counter; ++i) {\\n      values[i] = valuesTmp[i];\\n      ids[i] = idsTmp[i];\\n    }\\n  }\\n  //endregion ------------------------------------ COMPLEX ARRAYS\\n\\n}\\n\",\"keccak256\":\"0x169dec334b08b119f2b91eeb4650ab285440f7f698ad96584bf78c982d9e66ee\",\"license\":\"BUSL-1.1\"},\"contracts/lib/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x52ede981a6bb509c0dce07a0373e3c073c24fd16ca4ca7fbaa24f6c8b747b45b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/StatLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IHeroController.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./PackingLib.sol\\\";\\n\\nlibrary StatLib {\\n  using PackingLib for bytes32[];\\n  using PackingLib for bytes32;\\n  using PackingLib for uint32[];\\n  using PackingLib for int32[];\\n  using CalcLib for int32;\\n\\n  //region --------------------------- Constants\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant STAT_LIB_VERSION = \\\"1.0.0\\\";\\n  uint32 public constant MAX_LEVEL = 99;\\n\\n  uint public constant BASE_EXPERIENCE = 100_000;\\n  uint public constant BIOME_LEVEL_STEP = 5;\\n  uint internal constant _MAX_AMPLIFIER = 1e18;\\n  uint private constant _PRECISION = 1e18;\\n\\n  /// @dev Assume MAX_BIOME * BIOME_LEVEL_STEP < MAX_LEVEL + 1, see dungeonTreasuryReward\\n  uint public constant MAX_POSSIBLE_BIOME = 19;\\n  //endregion --------------------------- Constants\\n\\n  //region --------------------------- Data types\\n\\n  struct BaseMultiplier {\\n    uint minDamage;\\n    uint maxDamage;\\n    uint attackRating;\\n    uint defense;\\n    uint blockRating;\\n    uint life;\\n    uint mana;\\n  }\\n\\n  struct LevelUp {\\n    uint life;\\n    uint mana;\\n  }\\n\\n  struct InitialHero {\\n    IStatController.CoreAttributes core;\\n    BaseMultiplier multiplier;\\n    LevelUp levelUp;\\n    int32 baseLifeChances;\\n  }\\n\\n  enum HeroClasses {\\n    UNKNOWN,\\n    THRALL,\\n    SAVAGE,\\n    MAGE,\\n    ASSASSIN,\\n    GHOST,\\n    HAMMERGINA,\\n    END_SLOT\\n  }\\n  //endregion --------------------------- Data types\\n\\n  //region --------------------------- BASE\\n\\n  // --- HERO 1 (Slave) ---\\n\\n  function initialHero1() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 15,\\n      dexterity: 15,\\n      vitality: 30,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 2e18,\\n      defense: 2e18,\\n      blockRating: 0.1e18,\\n      life: 1.5e18,\\n      mana: 0.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 2e18,\\n      mana: 1e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 2 (Spata) ---\\n\\n  function initialHero2() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 30,\\n      dexterity: 5,\\n      vitality: 25,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.15e18,\\n      maxDamage: 0.25e18,\\n      attackRating: 2e18,\\n      defense: 1e18,\\n      blockRating: 0.08e18,\\n      life: 1.3e18,\\n      mana: 0.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.8e18,\\n      mana: 1e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 3 (Decidia) ---\\n\\n  function initialHero3() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 10,\\n      dexterity: 15,\\n      vitality: 20,\\n      energy: 25\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 2e18,\\n      defense: 1e18,\\n      blockRating: 0.1e18,\\n      life: 1e18,\\n      mana: 2e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.3e18,\\n      mana: 2e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 4 (Innatus) ---\\n\\n  function initialHero4() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 15,\\n      dexterity: 25,\\n      vitality: 15,\\n      energy: 15\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 4e18,\\n      defense: 3e18,\\n      blockRating: 0.2e18,\\n      life: 1.2e18,\\n      mana: 1e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.7e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 5 (F2P) ---\\n\\n  function initialHero5() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 20,\\n      dexterity: 20,\\n      vitality: 20,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.15e18,\\n      maxDamage: 0.25e18,\\n      attackRating: 3e18,\\n      defense: 2.5e18,\\n      blockRating: 0.15e18,\\n      life: 1.5e18,\\n      mana: 1.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.5e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 1\\n    });\\n  }\\n\\n  // --- HERO 6 (F2P) HAMMERGINA ---\\n\\n  function initialHero6() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 50,\\n      dexterity: 30,\\n      vitality: 50,\\n      energy: 15\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.2e18,\\n      maxDamage: 0.3e18,\\n      attackRating: 5e18,\\n      defense: 3e18,\\n      blockRating: 0.15e18,\\n      life: 2e18,\\n      mana: 2e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.7e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 1\\n    });\\n  }\\n\\n  // ------\\n\\n  function initialHero(uint heroClass) internal pure returns (InitialHero memory) {\\n    if (heroClass == 1) {\\n      return initialHero1();\\n    } else if (heroClass == 2) {\\n      return initialHero2();\\n    } else if (heroClass == 3) {\\n      return initialHero3();\\n    } else if (heroClass == 4) {\\n      return initialHero4();\\n    } else if (heroClass == 5) {\\n      return initialHero5();\\n    } else if (heroClass == 6) {\\n      return initialHero6();\\n    } else {\\n      revert IAppErrors.UnknownHeroClass(heroClass);\\n    }\\n  }\\n  //endregion --------------------------- BASE\\n\\n  //region --------------------------- CALCULATIONS\\n\\n  function minDamage(int32 strength, uint heroClass) internal pure returns (int32) {\\n    return int32(int(strength.toUint() * initialHero(heroClass).multiplier.minDamage / _PRECISION));\\n  }\\n\\n  function maxDamage(int32 strength, uint heroClass) internal pure returns (int32){\\n    return int32(int(strength.toUint() * initialHero(heroClass).multiplier.maxDamage / _PRECISION));\\n  }\\n\\n  function attackRating(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(dexterity.toUint() * initialHero(heroClass).multiplier.attackRating / _PRECISION));\\n  }\\n\\n  function defense(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(dexterity.toUint() * initialHero(heroClass).multiplier.defense / _PRECISION));\\n  }\\n\\n  function blockRating(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(Math.min((dexterity.toUint() * initialHero(heroClass).multiplier.blockRating / _PRECISION), 75)));\\n  }\\n\\n  function life(int32 vitality, uint heroClass, uint32 level) internal pure returns (int32){\\n    return int32(int(\\n      (vitality.toUint() * initialHero(heroClass).multiplier.life / _PRECISION)\\n      + (uint(level) * initialHero(heroClass).levelUp.life / _PRECISION)\\n    ));\\n  }\\n\\n  function mana(int32 energy, uint heroClass, uint32 level) internal pure returns (int32){\\n    return int32(int(\\n      (energy.toUint() * initialHero(heroClass).multiplier.mana / _PRECISION)\\n      + (uint(level) * initialHero(heroClass).levelUp.mana / _PRECISION)\\n    ));\\n  }\\n\\n  function lifeChances(uint heroClass, uint32 /*level*/) internal pure returns (int32){\\n    return initialHero(heroClass).baseLifeChances;\\n  }\\n\\n  function levelExperience(uint32 level) internal pure returns (uint32) {\\n    if (level == 0 || level >= MAX_LEVEL) {\\n      return 0;\\n    }\\n    return uint32(uint(level) * BASE_EXPERIENCE * (67e17 - CalcLib.log2((uint(MAX_LEVEL - level + 2)) * 1e18)) / 1e18);\\n  }\\n\\n  function chanceToHit(\\n    uint attackersAttackRating,\\n    uint defendersDefenceRating,\\n    uint attackersLevel,\\n    uint defendersLevel,\\n    uint arFactor\\n  ) internal pure returns (uint) {\\n    attackersAttackRating += attackersAttackRating * arFactor / 100;\\n    uint x = Math.max(attackersAttackRating, 1);\\n    uint y = Math.max(attackersAttackRating + defendersDefenceRating, 1);\\n    uint z = attackersLevel;\\n    uint k = defendersLevel / 2;\\n    uint xy = x * 1e18 / y;\\n    uint zk = z * 1e18 / (attackersLevel + k);\\n    uint base = 2 * xy * zk / 1e18;\\n    return Math.max(Math.min(base, 0.95e18), 0.2e18);\\n  }\\n\\n  function experienceToLvl(uint experience, uint startFromLevel) internal pure returns (uint level) {\\n    level = startFromLevel;\\n    for (; level < MAX_LEVEL;) {\\n      if (levelExperience(uint32(level)) >= experience) {\\n        break;\\n      }\\n      unchecked{++level;}\\n    }\\n  }\\n\\n  function expPerMonster(uint32 monsterExp, uint monsterRarity, uint32 heroExp, uint32 heroCurrentLvl, uint monsterBiome) internal pure returns (uint32) {\\n    uint heroLvl = experienceToLvl(uint(heroExp), uint(heroCurrentLvl));\\n    uint heroBiome = heroLvl / StatLib.BIOME_LEVEL_STEP + 1;\\n    uint base = uint(monsterExp) + uint(monsterExp) * monsterRarity / _MAX_AMPLIFIER;\\n\\n    // reduce exp if hero not in his biome\\n    if (heroBiome > monsterBiome) {\\n      base = base / (2 ** (heroBiome - monsterBiome));\\n    }\\n    return uint32(base);\\n  }\\n\\n  /// @notice Allow to calculate delta param for {mintDropChance}\\n  function mintDropChanceDelta(uint experience, uint startFromLevel, uint monsterBiome) internal pure returns (uint) {\\n    uint heroBiome = StatLib.experienceToLvl(experience, startFromLevel) / StatLib.BIOME_LEVEL_STEP + 1;\\n    return heroBiome > monsterBiome ? 2**(heroBiome - monsterBiome) : 0;\\n  }\\n\\n  /// @param delta 2 ** (heroBiome - monsterBiome) or zero if heroBiome < monsterBiome, see {mintDropChanceDelta}\\n  function mintDropChance(uint baseChance, uint monsterRarity, uint delta) internal pure returns (uint) {\\n    uint chance = baseChance + baseChance * monsterRarity / _MAX_AMPLIFIER;\\n\\n    // reduce chance if hero not in his biome\\n    return delta == 0\\n      ? chance\\n      : chance / delta;\\n  }\\n\\n  function initAttributes(\\n    bytes32[] storage attributes,\\n    uint heroClass,\\n    uint32 level,\\n    IStatController.CoreAttributes memory base\\n  ) internal returns (uint32[] memory result) {\\n\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.STRENGTH), base.strength);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DEXTERITY), base.dexterity);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.VITALITY), base.vitality);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.ENERGY), base.energy);\\n\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN), minDamage(base.strength, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX), maxDamage(base.strength, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING), attackRating(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DEFENSE), defense(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING), blockRating(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE), life(base.vitality, heroClass, level));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.MANA), mana(base.energy, heroClass, level));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE_CHANCES), lifeChances(heroClass, level));\\n\\n    result = new uint32[](3);\\n    result[0] = uint32(life(base.vitality, heroClass, level).toUint());\\n    result[1] = uint32(mana(base.energy, heroClass, level).toUint());\\n    result[2] = uint32(lifeChances(heroClass, uint32(level)).toUint());\\n  }\\n\\n  function updateCoreDependAttributesInMemory(\\n    int32[] memory attributes,\\n    int32[] memory bonus,\\n    uint heroClass,\\n    uint32 level\\n  ) internal pure returns (int32[] memory) {\\n    int32 strength = attributes[uint(IStatController.ATTRIBUTES.STRENGTH)];\\n    int32 dexterity = attributes[uint(IStatController.ATTRIBUTES.DEXTERITY)];\\n    int32 vitality = attributes[uint(IStatController.ATTRIBUTES.VITALITY)];\\n    int32 energy = attributes[uint(IStatController.ATTRIBUTES.ENERGY)];\\n\\n    attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)] = minDamage(strength, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)];\\n    attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)] = maxDamage(strength, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)];\\n    attributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] = attackRating(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.ATTACK_RATING)];\\n    attributes[uint(IStatController.ATTRIBUTES.DEFENSE)] = defense(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DEFENSE)];\\n    attributes[uint(IStatController.ATTRIBUTES.BLOCK_RATING)] = blockRating(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.BLOCK_RATING)];\\n    attributes[uint(IStatController.ATTRIBUTES.LIFE)] = life(vitality, heroClass, level) + bonus[uint(IStatController.ATTRIBUTES.LIFE)];\\n    attributes[uint(IStatController.ATTRIBUTES.MANA)] = mana(energy, heroClass, level) + bonus[uint(IStatController.ATTRIBUTES.MANA)];\\n    return attributes;\\n  }\\n\\n  function updateCoreDependAttributes(\\n    IController controller,\\n    bytes32[] storage attributes,\\n    bytes32[] storage bonusMain,\\n    bytes32[] storage bonusExtra,\\n    IStatController.ChangeableStats memory _heroStats,\\n    uint index,\\n    address heroToken,\\n    int32 base\\n  ) internal {\\n    uint heroClass = IHeroController(controller.heroController()).heroClass(heroToken);\\n    if (index == uint(IStatController.ATTRIBUTES.STRENGTH)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN),\\n        StatLib.minDamage(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN))\\n      );\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX),\\n        StatLib.maxDamage(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.DEXTERITY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING),\\n        StatLib.attackRating(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING))\\n      );\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DEFENSE),\\n        StatLib.defense(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DEFENSE))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DEFENSE))\\n      );\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING),\\n        StatLib.blockRating(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.VITALITY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE),\\n        StatLib.life(base, heroClass, _heroStats.level)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.LIFE))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.LIFE))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.ENERGY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.MANA),\\n        StatLib.mana(base, heroClass, _heroStats.level)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.MANA))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.MANA))\\n      );\\n    }\\n  }\\n\\n  function attributesAdd(int32[] memory base, int32[] memory add) internal pure returns (int32[] memory) {\\n    unchecked{\\n      for (uint i; i < base.length; ++i) {\\n        base[i] += add[i];\\n      }\\n    }\\n    return base;\\n  }\\n\\n// Currently this function is not used\\n//  function attributesRemove(int32[] memory base, int32[] memory remove) internal pure returns (int32[] memory) {\\n//    unchecked{\\n//      for (uint i; i < base.length; ++i) {\\n//        base[i] = CalcLib.minusWithMinFloorI32(base[i], remove[i]);\\n//      }\\n//    }\\n//    return base;\\n//  }\\n\\n  function packChangeableStats(IStatController.ChangeableStats memory stats) internal pure returns (bytes32) {\\n    uint32[] memory cData = new uint32[](5);\\n    cData[0] = stats.level;\\n    cData[1] = stats.experience;\\n    cData[2] = stats.life;\\n    cData[3] = stats.mana;\\n    cData[4] = stats.lifeChances;\\n\\n    return cData.packUint32Array();\\n  }\\n\\n  function unpackChangeableStats(bytes32 data) internal pure returns (IStatController.ChangeableStats memory result) {\\n    uint32[] memory cData = data.unpackUint32Array();\\n    return IStatController.ChangeableStats({\\n      level: cData[0],\\n      experience: cData[1],\\n      life: cData[2],\\n      mana: cData[3],\\n      lifeChances: cData[4]\\n    });\\n  }\\n\\n  function bytesToFullAttributesArray(bytes32[] memory attributes) internal pure returns (int32[] memory result) {\\n    (int32[] memory values, uint8[] memory ids) = attributes.toInt32ArrayWithIds();\\n    return valuesToFullAttributesArray(values, ids);\\n  }\\n\\n  function valuesToFullAttributesArray(int32[] memory values, uint8[] memory ids) internal pure returns (int32[] memory result) {\\n    result = new int32[](uint(IStatController.ATTRIBUTES.END_SLOT));\\n    for (uint i; i < values.length; ++i) {\\n      int32 value = values[i];\\n      if (value != 0) {\\n        result[ids[i]] = value;\\n      }\\n    }\\n  }\\n  //endregion --------------------------- CALCULATIONS\\n\\n}\\n\",\"keccak256\":\"0x7c620e54a4e0a50ebc566ef993d709d6badd2a7e366950513a7641d4414aabd6\",\"license\":\"BUSL-1.1\"},\"contracts/lib/StoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IStoryController.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../lib/CalcLib.sol\\\";\\nimport \\\"../lib/PackingLib.sol\\\";\\nimport \\\"../lib/ItemLib.sol\\\";\\nimport \\\"../lib/StringLib.sol\\\";\\n\\nlibrary StoryLib {\\n  using CalcLib for uint;\\n  using PackingLib for address;\\n  using PackingLib for uint16;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n\\n  //region ------------------------ Story logic\\n\\n  /// @notice Make action, increment STORY_XXX hero custom data if the dungeon is completed / hero is killed\\n  function action(IGOC.ActionContext memory ctx, uint16 storyId) internal returns (IGOC.ActionResult memory result) {\\n    if (storyId == 0) revert IAppErrors.ZeroStoryIdAction();\\n\\n    result = IStoryController(ctx.controller.storyController()).storyAction(\\n      ctx.sender,\\n      ctx.dungeonId,\\n      ctx.objectId,\\n      ctx.stageId,\\n      ctx.heroToken,\\n      ctx.heroTokenId,\\n      ctx.biome,\\n      ctx.iteration,\\n      ctx.data\\n    );\\n\\n    if (result.completed || result.kill) {\\n      IStatController statController = IStatController(ctx.controller.statController());\\n      bytes32 index = _getStoryIndex(storyId);\\n      uint curValue = statController.heroCustomData(ctx.heroToken, ctx.heroTokenId, index);\\n      statController.setHeroCustomData(ctx.heroToken, ctx.heroTokenId, index, curValue + 1);\\n    }\\n  }\\n\\n  /// @notice Check if the story is available for the hero\\n  /// The story is available if hero level fits to requirements\\n  /// and if the hero/global custom data requirements are met (current value is inside of [min, max])\\n  function isStoryAvailableForHero(\\n    IStoryController.MainState storage s,\\n    uint16 storyId,\\n    address heroToken,\\n    uint heroTokenId,\\n    address statController\\n  ) internal view returns (bool) {\\n    uint reqLvl = s.storyRequiredLevel[storyId];\\n    if (reqLvl != 0 && IStatController(statController).heroStats(heroToken, heroTokenId).level < reqLvl) {\\n      return false;\\n    }\\n\\n    IStoryController.CustomDataRequirementRangePacked[] storage allData = s.storyRequiredHeroData[storyId];\\n    uint len = allData.length;\\n    for (uint i; i < len; ++i) {\\n      IStoryController.CustomDataRequirementRangePacked memory data = allData[i];\\n\\n      if (data.index == bytes32(0)) continue;\\n\\n      (uint64 min, uint64 max, bool isHeroData) = data.data.unpackCustomDataRequirements();\\n\\n      uint value = isHeroData\\n        ? IStatController(statController).heroCustomData(heroToken, heroTokenId, data.index)\\n        : IStatController(statController).globalCustomData(data.index);\\n\\n      if (value < uint(min) || value > uint(max)) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Update bonus attributes, refresh hero states, initialize and return results\\n  /// @param mintItemsData Source for _mintRandomItems, random item (max 1, probably 0) is selected and put to results\\n  /// @param mintItems_ Function _mintRandomItems is passed here. Parameter is required to make unit tests.\\n  function handleResult(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32[] memory attributesChanges,\\n    bytes32 statsChanges,\\n    bytes32[] memory mintItemsData,\\n    function (IStoryController.StoryActionContext memory, bytes32[] memory) internal returns (address[] memory) mintItems_\\n  ) internal returns (IGOC.ActionResult memory result) {\\n    result.heroToken = context.heroToken;\\n    result.heroTokenId = context.heroTokenId;\\n    result.objectId = context.objectId;\\n\\n    int32[] memory attributes = _generateAttributes(attributesChanges);\\n\\n    if (attributes.length != 0) {\\n      context.statController.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: context.heroToken,\\n        heroTokenId: context.heroTokenId,\\n        changeAttributes: attributes,\\n        add: true,\\n        temporally: true\\n      }));\\n      // changeBonusAttributes can change life and mana, so we need to refresh hero stats. It's safer to do it always\\n      context.heroStats = context.statController.heroStats(context.heroToken, context.heroTokenId);\\n      emit IApplicationEvents.StoryChangeAttributes(\\n        context.objectId,\\n        context.heroToken,\\n        context.heroTokenId,\\n        context.dungeonId,\\n        context.storyId,\\n        context.stageId,\\n        context.iteration,\\n        attributes\\n      );\\n    }\\n\\n    IStoryController.StatsChange memory statsToChange = _generateStats(statsChanges);\\n\\n    if (statsToChange.heal != 0) {\\n      int32 max = context.statController.heroAttribute(context.heroToken, context.heroTokenId, uint(IStatController.ATTRIBUTES.LIFE));\\n      result.heal = max * statsToChange.heal / 100;\\n    }\\n\\n    if (statsToChange.manaRegen != 0) {\\n      int32 max = context.statController.heroAttribute(context.heroToken, context.heroTokenId, uint(IStatController.ATTRIBUTES.MANA));\\n      result.manaRegen = max * statsToChange.manaRegen / 100;\\n    }\\n\\n    if (statsToChange.damage != 0) {\\n      int32 max = context.statController.heroAttribute(context.heroToken, context.heroTokenId, uint(IStatController.ATTRIBUTES.LIFE));\\n      result.damage = max * statsToChange.damage / 100;\\n\\n      if (int32(context.heroStats.life) <= result.damage) {\\n        result.kill = true;\\n      }\\n    }\\n\\n    if (statsToChange.manaConsumed != 0) {\\n      int32 max = context.statController.heroAttribute(context.heroToken, context.heroTokenId, uint(IStatController.ATTRIBUTES.MANA));\\n      result.manaConsumed = CalcLib.minI32(max * statsToChange.manaConsumed / 100, int32(context.heroStats.mana));\\n    }\\n\\n    result.experience = statsToChange.experience;\\n    result.lifeChancesRecovered = statsToChange.lifeChancesRecovered;\\n\\n    if (mintItemsData.length != 0) {\\n      result.mintItems = mintItems_(context, mintItemsData);\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Put data from {heroCustomDatas} and {globalCustomDatas} to {statController}\\n  function handleCustomDataResult(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32[] memory heroCustomDatas,\\n    bytes32[] memory globalCustomDatas\\n  ) internal {\\n    uint len = heroCustomDatas.length;\\n    for (uint i; i < len; ++i) {\\n\\n      (bytes32 customDataIndex, int16 value) = heroCustomDatas[i].unpackCustomDataChange();\\n\\n      if (customDataIndex != 0) {\\n        uint curValue = context.statController.heroCustomData(context.heroToken, context.heroTokenId, customDataIndex);\\n        context.statController.setHeroCustomData(\\n          context.heroToken,\\n          context.heroTokenId,\\n          customDataIndex,\\n          value == 0\\n            ? 0\\n            : value > 0\\n              ? curValue + uint(int(value))\\n              : curValue.minusWithZeroFloor(uint(int(- value)))\\n        );\\n      }\\n    }\\n\\n    len = globalCustomDatas.length;\\n    for (uint i; i < len; ++i) {\\n\\n      (bytes32 customDataIndex, int16 value) = globalCustomDatas[i].unpackCustomDataChange();\\n\\n      if (customDataIndex != 0) {\\n        uint curValue = context.statController.globalCustomData(customDataIndex);\\n        context.statController.setGlobalCustomData(\\n          customDataIndex,\\n          value == 0\\n            ? 0\\n            : value > 0\\n              ? curValue + uint(int(value))\\n              : curValue.minusWithZeroFloor(uint(int(- value)))\\n        );\\n      }\\n    }\\n  }\\n\\n  /// @notice Randomly select one or several burnItems and burn them\\n  function burn(IStoryController.StoryActionContext memory context, IStoryController.MainState storage s) internal {\\n\\n    bytes32[] storage burnInfos = s.burnItem[context.answerIdHash];\\n    uint length = burnInfos.length;\\n\\n    for (uint i; i < length; ++i) {\\n      (uint8 slot, uint64 chance, bool stopIfBurned) = burnInfos[i].unpackBurnInfo();\\n\\n      if (chance != 0 && context.oracle.getRandomNumberInRange(0, 100, 0) <= uint(chance)) {\\n        uint8[] memory busySlots = context.statController.heroItemSlots(context.heroToken, context.heroTokenId);\\n\\n        uint lenBusySlots = busySlots.length;\\n        if (lenBusySlots != 0) {\\n          uint busySlotIndex;\\n          bool itemExist;\\n          if (slot == 0) {\\n            busySlotIndex = context.oracle.getRandomNumberInRange(0, lenBusySlots - 1, 0);\\n            itemExist = true;\\n          } else {\\n            for (uint j; j < lenBusySlots; ++j) {\\n              if (busySlots[j] == slot) {\\n                busySlotIndex = j;\\n                itemExist = true;\\n                break;\\n              }\\n            }\\n          }\\n\\n          if (itemExist) {\\n            _burnItemInHeroSlot(context, busySlots[busySlotIndex]);\\n            if (stopIfBurned) {\\n              break;\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Update internal hero state, generate {result}\\n  /// @param context We update some fields in place, so memory, not calldata here\\n  function handleAnswer(\\n    IStoryController.AnswerResultId answerResultId,\\n    IStoryController.MainState storage s,\\n    IStoryController.StoryActionContext memory context\\n  ) external returns (\\n    IGOC.ActionResult memory result,\\n    uint16 nextPage,\\n    uint16[] memory nextPages\\n  ) {\\n    result.objectId = context.objectId;\\n    result.heroTokenId = context.heroTokenId;\\n    result.heroToken = context.heroToken;\\n\\n    nextPages = s.nextPageIds[context.storyId.packStoryNextPagesId(\\n      context.pageId,\\n      context.heroClassFromAnswerHash,\\n      context.answerNumber,\\n      uint8(answerResultId)\\n    )];\\n    nextPage = _getNextPage(context.oracle, nextPages);\\n\\n    if (answerResultId == IStoryController.AnswerResultId.SUCCESS) {\\n      result = handleResult(\\n        context,\\n        s.successInfoAttributes[context.answerIdHash],\\n        s.successInfoStats[context.answerIdHash],\\n        s.successInfoMintItems[context.answerIdHash],\\n        _mintRandomItems\\n      );\\n\\n      handleCustomDataResult(\\n        context,\\n        s.customDataResult[context.storyId.packStoryCustomDataResult(\\n          context.pageId,\\n          context.heroClassFromAnswerHash,\\n          context.answerNumber,\\n          uint8(IStoryController.CustomDataResult.HERO_SUCCESS)\\n        )],\\n        s.customDataResult[context.storyId.packStoryCustomDataResult(\\n          context.pageId,\\n          context.heroClassFromAnswerHash,\\n          context.answerNumber,\\n          uint8(IStoryController.CustomDataResult.GLOBAL_SUCCESS)\\n        )]\\n      );\\n    } else {\\n      result = handleResult(\\n        context,\\n        s.failInfoAttributes[context.answerIdHash],\\n        s.failInfoStats[context.answerIdHash],\\n        s.failInfoMintItems[context.answerIdHash],\\n        _mintRandomItems\\n      );\\n\\n      handleCustomDataResult(\\n        context,\\n        s.customDataResult[context.storyId.packStoryCustomDataResult(\\n          context.pageId,\\n          context.heroClassFromAnswerHash,\\n          context.answerNumber,\\n          uint8(IStoryController.CustomDataResult.HERO_FAIL)\\n        )],\\n        s.customDataResult[context.storyId.packStoryCustomDataResult(\\n          context.pageId,\\n          context.heroClassFromAnswerHash,\\n          context.answerNumber,\\n          uint8(IStoryController.CustomDataResult.GLOBAL_FAIL)\\n        )]\\n      );\\n    }\\n  }\\n\\n  /// @notice Revert if {heroAnswers} doesn't contain {answerIdHash}\\n  function checkAnswerIndexValid(bytes32[] memory heroAnswers, bytes32 answerIdHash) internal pure {\\n    uint len = heroAnswers.length;\\n    for (uint i; i < len; ++i) {\\n      if (heroAnswers[i] == answerIdHash) return;\\n    }\\n    revert IAppErrors.NotAnswer();\\n  }\\n\\n  /// @notice Clear heroState for the give current story\\n  /// @return nextObjs Default nextObjectsRewrite for the current page (values for 0 hero class)\\n  function finishStory(IStoryController.StoryActionContext memory ctx, IStoryController.MainState storage s) internal returns (\\n    uint32[] memory nextObjs\\n  ) {\\n    delete s.heroState[ctx.heroToken.packStoryHeroStateId(ctx.heroTokenId, ctx.storyId)];\\n    return s.nextObjectsRewrite[ctx.storyId.packStoryPageId(ctx.pageId, 0)];\\n  }\\n\\n  //endregion ------------------------ Story logic\\n\\n  //region ------------------------ Internal utils for story logic\\n\\n  /// @dev This function is made separate to simplify unit testing\\n  function _mintRandomItems(IStoryController.StoryActionContext memory context, bytes32[] memory mintItemsData) internal returns (\\n    address[] memory\\n  ) {\\n    uint len = mintItemsData.length;\\n    address[] memory mintItems = new address[](len);\\n    uint32[] memory mintItemsChances = new uint32[](len);\\n    for (uint i; i < len; ++i) {\\n      (mintItems[i], mintItemsChances[i]) = mintItemsData[i].unpackItemMintInfo();\\n    }\\n\\n    return ItemLib.mintRandomItems(ItemLib.MintItemInfo({\\n      mintItems: mintItems,\\n      mintItemsChances: mintItemsChances,\\n      biome: context.biome,\\n      amplifier: 0,\\n      seed: 0,\\n      oracle: context.oracle,\\n      heroExp: context.heroStats.experience,\\n      heroCurrentLvl: uint8(context.heroStats.level),\\n      magicFind: 0,\\n      destroyItems: 0,\\n      maxItems: 1 // MINT ONLY 1 ITEM!\\n    }));\\n  }\\n\\n  /// @param attributesChanges Values+ids packed using toBytes32ArrayWithIds\\n  function _generateAttributes(bytes32[] memory attributesChanges) internal pure returns (int32[] memory attributes) {\\n    if (attributesChanges.length != 0) {\\n      (int32[] memory values, uint8[] memory ids) = attributesChanges.toInt32ArrayWithIds();\\n      uint len = ids.length;\\n      if (len != 0) {\\n        attributes = new int32[](uint(IStatController.ATTRIBUTES.END_SLOT));\\n        for (uint i; i < len; ++i) {\\n          int32 value = values[i];\\n          attributes[ids[i]] = value;\\n        }\\n      }\\n    }\\n\\n    return attributes;\\n  }\\n\\n  function _generateStats(bytes32 statsChanges) internal pure returns (IStoryController.StatsChange memory change) {\\n    (\\n      change.experience,\\n      change.heal,\\n      change.manaRegen,\\n      change.lifeChancesRecovered,\\n      change.damage,\\n      change.manaConsumed\\n    ) = statsChanges.unpackStatsChange();\\n\\n    return change;\\n  }\\n\\n  /// @notice Take off and destroy the item from the given {slot}\\n  function _burnItemInHeroSlot(IStoryController.StoryActionContext memory ctx, uint8 slot) internal {\\n    (address itemAdr, uint itemId) = ctx.statController.heroItemSlot(ctx.heroToken, uint64(ctx.heroTokenId), slot).unpackNftId();\\n\\n    ctx.itemController.takeOffDirectly(itemAdr, itemId, ctx.heroToken, ctx.heroTokenId, slot, address(this), false);\\n\\n    ctx.itemController.destroy(itemAdr, itemId);\\n\\n    emit IApplicationEvents.ItemBurned(\\n      ctx.heroToken,\\n      ctx.heroTokenId,\\n      ctx.dungeonId,\\n      ctx.objectId,\\n      itemAdr,\\n      itemId,\\n      ctx.stageId,\\n      ctx.iteration\\n    );\\n  }\\n\\n  function _getNextPage(IOracle oracle, uint16[] memory pages) internal returns (uint16) {\\n    if (pages.length == 0) {\\n      return 0;\\n    }\\n    if (pages.length == 1) {\\n      return pages[0];\\n    }\\n    return pages[oracle.getRandomNumberInRange(0, pages.length - 1, 0)];\\n  }\\n\\n  function _getStoryIndex(uint16 storyId) internal pure returns (bytes32) {\\n    return bytes32(abi.encodePacked(\\\"STORY_\\\", StringLib._toString(storyId)));\\n  }\\n  //endregion ------------------------ Internal utils for story logic\\n\\n  //region ------------------------ Check answers\\n\\n  function checkAnswer(\\n    IStoryController.StoryActionContext memory context,\\n    IStoryController.MainState storage s\\n  ) external returns (IStoryController.AnswerResultId result) {\\n    result = checkAnswerAttributes(context, context.answerIdHash, s);\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerItems(context, context.answerIdHash, s);\\n    }\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerTokens(context, context.answerIdHash, s);\\n    }\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerDelay(context);\\n    }\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerHeroCustomData(context, context.answerIdHash, s);\\n    }\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerGlobalCustomData(context, context.answerIdHash, s);\\n    }\\n    if (result == IStoryController.AnswerResultId.SUCCESS) {\\n      result = checkAnswerRandom(context);\\n    }\\n  }\\n\\n  /// @notice Check if hero attribute values meet attribute requirements for the given answer\\n  function checkAnswerAttributes(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32 answerIndex,\\n    IStoryController.MainState storage s\\n  ) internal view returns (IStoryController.AnswerResultId) {\\n    bytes32[] storage reqs = s.attributeRequirements[answerIndex];\\n    uint length = reqs.length;\\n\\n    for (uint i; i < length; ++i) {\\n      (uint8 attributeIndex, int32 value, bool isCore) = reqs[i].unpackStoryAttributeRequirement();\\n      if (isCore) {\\n        IStatController.CoreAttributes memory base = context.statController.heroBaseAttributes(context.heroToken, context.heroTokenId);\\n        if (attributeIndex == uint8(IStatController.ATTRIBUTES.STRENGTH) && base.strength < value) {\\n          return IStoryController.AnswerResultId.ATTRIBUTE_FAIL;\\n        }\\n        if (attributeIndex == uint8(IStatController.ATTRIBUTES.DEXTERITY) && base.dexterity < value) {\\n          return IStoryController.AnswerResultId.ATTRIBUTE_FAIL;\\n        }\\n        if (attributeIndex == uint8(IStatController.ATTRIBUTES.VITALITY) && base.vitality < value) {\\n          return IStoryController.AnswerResultId.ATTRIBUTE_FAIL;\\n        }\\n        if (attributeIndex == uint8(IStatController.ATTRIBUTES.ENERGY) && base.energy < value) {\\n          return IStoryController.AnswerResultId.ATTRIBUTE_FAIL;\\n        }\\n      } else {\\n        int32 attr = context.statController.heroAttribute(context.heroToken, context.heroTokenId, attributeIndex);\\n        if (attr < value) {\\n          return IStoryController.AnswerResultId.ATTRIBUTE_FAIL;\\n        }\\n      }\\n    }\\n\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  /// @notice Check item requirements for the given answer, check following issues:\\n  /// 1) For equipped item: check if it is on balance\\n  /// 2) For not equipped item: burn first owned item if requireItemBurn OR check that not equipped item is on balance\\n  function checkAnswerItems(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32 answerIndex,\\n    IStoryController.MainState storage s\\n  ) internal returns (IStoryController.AnswerResultId) {\\n\\n    bytes32[] storage reqs = s.itemRequirements[answerIndex];\\n    uint length = reqs.length;\\n\\n    for (uint i; i < length; ++i) {\\n      (address item, bool requireItemBurn, bool requireItemEquipped) = reqs[i].unpackStoryItemRequirement();\\n\\n      // equipped item is on balance of the heroToken, not on balance of the sender\\n      if (requireItemEquipped && IERC721Enumerable(item).balanceOf(context.heroToken) == 0) {\\n        revert IAppErrors.NotItem1();\\n      }\\n\\n      if (requireItemBurn) {\\n        _burnFirstOwnedItem(context, item);\\n      }\\n\\n      if (!requireItemEquipped && !requireItemBurn) {\\n        if (IERC721Enumerable(item).balanceOf(context.sender) == 0) revert IAppErrors.NotItem2();\\n      }\\n\\n    }\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  /// @notice burn first owned item and generate event\\n  /// @dev Use separate function to workaround stack too deep\\n  function _burnFirstOwnedItem(IStoryController.StoryActionContext memory context, address item) internal {\\n    uint itemId = IERC721Enumerable(item).tokenOfOwnerByIndex(context.sender, 0);\\n    context.itemController.destroy(item, itemId); // destroy reverts if the item is equipped\\n\\n    emit IApplicationEvents.NotEquippedItemBurned(\\n      context.heroToken,\\n      context.heroTokenId,\\n      context.dungeonId,\\n      context.storyId,\\n      item,\\n      itemId,\\n      context.stageId,\\n      context.iteration\\n    );\\n  }\\n\\n  /// @notice Ensure that the sender has enough amounts of the required tokens, send fees to the treasury\\n  function checkAnswerTokens(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32 answerIndex,\\n    IStoryController.MainState storage s\\n  ) internal returns (IStoryController.AnswerResultId) {\\n    bytes32[] memory reqs = s.tokenRequirements[answerIndex];\\n    uint length = reqs.length;\\n    for (uint i; i < length; ++i) {\\n      (address token, uint88 amount, bool requireTransfer) = reqs[i].unpackStoryTokenRequirement();\\n\\n      if (amount != 0) {\\n        uint balance = IERC20(token).balanceOf(context.sender);\\n        if (balance < uint(amount)) revert IAppErrors.NotEnoughAmount(balance, uint(amount));\\n\\n        if (requireTransfer) {\\n          address treasury = context.controller.treasury();\\n          IERC20(token).transferFrom(context.sender, address(this), uint(amount));\\n          IERC20(token).approve(treasury, type(uint).max);\\n          ITreasury(treasury).sendFee(token, uint(amount), IItemController.FeeType.STORY);\\n        }\\n      }\\n    }\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  /// @notice Generate error randomly\\n  function checkAnswerRandom(IStoryController.StoryActionContext memory context) internal returns (IStoryController.AnswerResultId) {\\n    (uint32 random,,) = context.answerAttributes.unpackStorySimpleRequirement();\\n\\n    if (random != 0 && random < 100) {\\n      if (context.oracle.getRandomNumber(100, 0) > uint(random)) {\\n        return IStoryController.AnswerResultId.RANDOM_FAIL;\\n      }\\n    } else if (random > 100) {\\n      revert IAppErrors.NotRandom(random);\\n    }\\n\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  /// @notice Ensure that the answer was given fast enough\\n  function checkAnswerDelay(IStoryController.StoryActionContext memory context) internal view returns (IStoryController.AnswerResultId) {\\n\\n    (,uint32 delay,) = context.answerAttributes.unpackStorySimpleRequirement();\\n\\n    if (delay != 0) {\\n      uint lastCall = uint(context.heroLastActionTS);\\n      if (lastCall != 0 && lastCall < block.timestamp && block.timestamp - lastCall > uint(delay)) {\\n        return IStoryController.AnswerResultId.DELAY_FAIL;\\n      }\\n    }\\n\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  function checkAnswerHeroCustomData(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32 answerIndex,\\n    IStoryController.MainState storage s\\n  ) internal view returns (IStoryController.AnswerResultId) {\\n    return _checkAnswerCustomData(context, s.heroCustomDataRequirement[answerIndex], true);\\n  }\\n\\n  function checkAnswerGlobalCustomData(\\n    IStoryController.StoryActionContext memory context,\\n    bytes32 answerIndex,\\n    IStoryController.MainState storage s\\n  ) internal view returns (IStoryController.AnswerResultId) {\\n    return _checkAnswerCustomData(context, s.globalCustomDataRequirement[answerIndex], false);\\n  }\\n\\n  function _checkAnswerCustomData(\\n    IStoryController.StoryActionContext memory context,\\n    IStoryController.CustomDataRequirementPacked[] memory datas,\\n    bool heroCustomData\\n  ) internal view returns (IStoryController.AnswerResultId) {\\n    uint len = datas.length;\\n    for (uint i; i < len; ++i) {\\n      IStoryController.CustomDataRequirementPacked memory data = datas[i];\\n\\n      if (data.index != 0) {\\n        (uint valueMin, uint valueMax, bool mandatory) = data.data.unpackCustomDataRequirements();\\n        uint heroValue = heroCustomData\\n          ? context.statController.heroCustomData(context.heroToken, context.heroTokenId, data.index)\\n          : context.statController.globalCustomData(data.index);\\n\\n        if (heroValue < valueMin || heroValue > valueMax) {\\n          if (mandatory) {\\n            if (heroCustomData) {\\n              revert IAppErrors.NotHeroData();\\n            } else {\\n              revert IAppErrors.NotGlobalData();\\n            }\\n          } else {\\n            return heroCustomData\\n              ? IStoryController.AnswerResultId.HERO_CUSTOM_DATA_FAIL\\n              : IStoryController.AnswerResultId.GLOBAL_CUSTOM_DATA_FAIL;\\n          }\\n        }\\n      }\\n    }\\n\\n    return IStoryController.AnswerResultId.SUCCESS;\\n  }\\n\\n  //endregion ------------------------ Check answers\\n}\\n\",\"keccak256\":\"0xd6a3be4bdec5b22eda3e108661f3950a9c88246a621d3a5211aa98b33cf0fa33\",\"license\":\"BUSL-1.1\"},\"contracts/lib/StringLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n\\nlibrary StringLib {\\n\\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n  function toString(uint value) external pure returns (string memory) {\\n    return _toString(value);\\n  }\\n\\n  function _toString(uint value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint temp = value;\\n    uint digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toAsciiString(address x) external pure returns (string memory) {\\n    return _toAsciiString(x);\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) external pure returns (bytes1 c) {\\n    return _char(b);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  function concat(string memory a, string memory b) internal pure returns (string memory) {\\n    return string(abi.encodePacked(a, b));\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa101d62c068dae579dda1ffa392cbf2acd2fc29a99c2efbdf53349a587b084d6\",\"license\":\"BUSL-1.1\"},\"contracts/openzeppelin/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // To implement this library for multiple types with as little code repetition as possible, we write it in\\n  // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n  // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n  /**\\n   * @dev Query for a nonexistent map key.\\n     */\\n  error EnumerableMapNonexistentKey(bytes32 key);\\n\\n  struct Bytes32ToBytes32Map {\\n    // Storage of keys\\n    EnumerableSet.Bytes32Set _keys;\\n    mapping(bytes32 key => bytes32) _values;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n    map._values[key] = value;\\n    return map._keys.add(key);\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n    delete map._values[key];\\n    return map._keys.remove(key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n    return map._keys.contains(key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n  function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n    return map._keys.length();\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n    bytes32 key = map._keys.at(index);\\n    return (key, map._values[key]);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == bytes32(0)) {\\n      return (contains(map, key), bytes32(0));\\n    } else {\\n      return (true, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == 0 && !contains(map, key)) {\\n      revert EnumerableMapNonexistentKey(key);\\n    }\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n    return map._keys.values();\\n  }\\n\\n  // UintToUintMap\\n\\n  struct UintToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(UintToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(key)));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintToAddressMap\\n\\n  struct UintToAddressMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressToUintMap\\n\\n  struct AddressToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n    return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n    return remove(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(AddressToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (address(uint160(uint256(key))), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // Bytes32ToUintMap\\n\\n  struct Bytes32ToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n    return set(map._inner, key, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n    return remove(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n    return contains(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (key, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, key);\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, key));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x5052395b3d57e4347a977f96eba69188b4a952594afae411910995ecab5c1d05\",\"license\":\"MIT\"},\"contracts/openzeppelin/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position is the index of the value in the `values` array plus 1.\\n    // Position 0 is used to mean a value is not in the set.\\n    mapping(bytes32 value => uint256) _positions;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._positions[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We cache the value's position to prevent multiple reads from the same storage slot\\n    uint256 position = set._positions[value];\\n\\n    if (position != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 valueIndex = position - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (valueIndex != lastIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the lastValue to the index where the value to delete is\\n        set._values[valueIndex] = lastValue;\\n        // Update the tracked position of the lastValue (that was just moved)\\n        set._positions[lastValue] = position;\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the tracked position for the deleted slot\\n      delete set._positions[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._positions[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n     */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xd5483249a7bac53a40791ade8d640831cdec526eea6b42a4db68f2ce13c008fa\",\"license\":\"MIT\"},\"contracts/openzeppelin/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n  struct InitializableStorage {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n         */\\n    uint64 _initialized;\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n    bool _initializing;\\n  }\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n  /**\\n   * @dev The contract is already initialized.\\n     */\\n  error InvalidInitialization();\\n\\n  /**\\n   * @dev The contract is not initializing.\\n     */\\n  error NotInitializing();\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n  event Initialized(uint64 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier initializer() {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    // Cache values to avoid duplicated sloads\\n    bool isTopLevelCall = !$._initializing;\\n    uint64 initialized = $._initialized;\\n\\n    // Allowed calls:\\n    // - initialSetup: the contract is not in the initializing state and no previous version was\\n    //                 initialized\\n    // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n    //                 current contract is just being deployed\\n    bool initialSetup = initialized == 0 && isTopLevelCall;\\n    bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n    if (!initialSetup && !construction) {\\n      revert InvalidInitialization();\\n    }\\n    $._initialized = 1;\\n    if (isTopLevelCall) {\\n      $._initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      $._initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier reinitializer(uint64 version) {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    if ($._initializing || $._initialized >= version) {\\n      revert InvalidInitialization();\\n    }\\n    $._initialized = version;\\n    $._initializing = true;\\n    _;\\n    $._initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n  modifier onlyInitializing() {\\n    _checkInitializing();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n  function _checkInitializing() internal view virtual {\\n    if (!_isInitializing()) {\\n      revert NotInitializing();\\n    }\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n  function _disableInitializers() internal virtual {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    if ($._initializing) {\\n      revert InvalidInitialization();\\n    }\\n    if ($._initialized != type(uint64).max) {\\n      $._initialized = type(uint64).max;\\n      emit Initialized(type(uint64).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n  function _getInitializedVersion() internal view returns (uint64) {\\n    return _getInitializableStorage()._initialized;\\n  }\\n\\n  /**\\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n  function _isInitializing() internal view returns (bool) {\\n    return _getInitializableStorage()._initializing;\\n  }\\n\\n  /**\\n   * @dev Returns a pointer to the storage namespace.\\n     */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n    assembly {\\n      $.slot := INITIALIZABLE_STORAGE\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x80aa3fc0fc9afdf84bd1a51716150cd13041f42d920a9afa8020ea41cf673809\",\"license\":\"MIT\"},\"contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n\\n  /**\\n    * @dev Muldiv operation overflow.\\n   */\\n  error MathOverflowedMulDiv();\\n\\n  enum Rounding {\\n    Floor, // Toward negative infinity\\n    Ceil, // Toward positive infinity\\n    Trunc, // Toward zero\\n    Expand // Away from zero\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      // Guarantee the same behavior as in a regular Solidity division.\\n      return a / b;\\n    }\\n\\n    // The following calculation ensures accurate ceiling division without overflow.\\n    // Since a is non-zero, (a - 1) / b will not overflow.\\n    // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n    // but the largest value we can obtain is type(uint256).max - 1, which happens\\n    // when a = type(uint256).max and b = 1.\\n    unchecked {\\n      return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n    unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n      uint256 prod0 = x * y; // Least significant 256 bits of the product\\n      uint256 prod1; // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(x, y, not(0))\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n      if (prod1 == 0) {\\n        // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n        // The surrounding unchecked block does not change this fact.\\n        // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n        return prod0 / denominator;\\n      }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n      if (denominator <= prod1) {\\n        revert MathOverflowedMulDiv();\\n      }\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n      uint256 remainder;\\n      assembly {\\n      // Compute remainder using mulmod.\\n        remainder := mulmod(x, y, denominator)\\n\\n      // Subtract 256 bit number from 512 bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n    // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n      uint256 twos = denominator & (0 - denominator);\\n      assembly {\\n      // Divide denominator by twos.\\n        denominator := div(denominator, twos)\\n\\n      // Divide [prod1 prod0] by twos.\\n        prod0 := div(prod0, twos)\\n\\n      // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n\\n    // Shift in bits from prod1 into prod0.\\n      prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n      uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n    // works in modular arithmetic, doubling the correct bits in each step.\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n      result = prod0 * inverse;\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n    unchecked {\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      return min(result, a / result);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = sqrt(a);\\n      return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 128;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 64;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 32;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 16;\\n      }\\n      if (value >> 8 > 0) {\\n        value >>= 8;\\n        result += 8;\\n      }\\n      if (value >> 4 > 0) {\\n        value >>= 4;\\n        result += 4;\\n      }\\n      if (value >> 2 > 0) {\\n        value >>= 2;\\n        result += 2;\\n      }\\n      if (value >> 1 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log2(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >= 10 ** 64) {\\n        value /= 10 ** 64;\\n        result += 64;\\n      }\\n      if (value >= 10 ** 32) {\\n        value /= 10 ** 32;\\n        result += 32;\\n      }\\n      if (value >= 10 ** 16) {\\n        value /= 10 ** 16;\\n        result += 16;\\n      }\\n      if (value >= 10 ** 8) {\\n        value /= 10 ** 8;\\n        result += 8;\\n      }\\n      if (value >= 10 ** 4) {\\n        value /= 10 ** 4;\\n        result += 4;\\n      }\\n      if (value >= 10 ** 2) {\\n        value /= 10 ** 2;\\n        result += 2;\\n      }\\n      if (value >= 10 ** 1) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log10(value);\\n      return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 16;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 8;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 4;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 2;\\n      }\\n      if (value >> 8 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log256(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n    return uint8(rounding) % 2 == 1;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4d972e3e1d79f693b6cb42007d23c27256cb6f087392edea24b93585a822572c\",\"license\":\"MIT\"},\"contracts/proxy/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract Controllable is Initializable, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"1.0.0\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  // init implementation contract\\n  constructor() initializer {}\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    _init(controller_);\\n  }\\n\\n  function _init(address controller_) private {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address value_) public override view returns (bool) {\\n    return value_ == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address value_) public override view returns (bool) {\\n    return IController(controller()).governance() == value_;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view override returns (uint) {\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view override returns (address) {\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1edc53f0d11834bebf4485746d04112ed10db9d4cb19b4945362c593ebf97daf\",\"license\":\"BUSL-1.1\"},\"contracts/solady/LibPRNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for generating pseudorandom numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\\n/// @author LazyShuffler based on NextShuffler by aschlosberg (divergencearran)\\n/// (https://github.com/divergencetech/ethier/blob/main/contracts/random/NextShuffler.sol)\\nlibrary LibPRNG {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The initial length must be greater than zero and less than `2**32 - 1`.\\n    error InvalidInitialLazyShufflerLength();\\n\\n    /// @dev The new length must not be less than the current length.\\n    error InvalidNewLazyShufflerLength();\\n\\n    /// @dev The lazy shuffler has not been initialized.\\n    error LazyShufflerNotInitialized();\\n\\n    /// @dev Cannot double initialize the lazy shuffler.\\n    error LazyShufflerAlreadyInitialized();\\n\\n    /// @dev The lazy shuffle has finished.\\n    error LazyShuffleFinished();\\n\\n    /// @dev The queried index is out of bounds.\\n    error LazyShufflerGetOutOfBounds();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev A pseudorandom number state in memory.\\n    struct PRNG {\\n        uint256 state;\\n    }\\n\\n    /// @dev A lazy Fisher-Yates shuffler for a range `[0..n)` in storage.\\n    struct LazyShuffler {\\n        // Bits Layout:\\n        // - [0..31]    `numShuffled`\\n        // - [32..223]  `permutationSlot`\\n        // - [224..255] `length`\\n        uint256 _state;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         OPERATIONS                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Seeds the `prng` with `state`.\\n    function seed(PRNG memory prng, uint256 state) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(prng, state)\\n        }\\n    }\\n\\n    /// @dev Returns the next pseudorandom uint256.\\n    /// All bits of the returned uint256 pass the NIST Statistical Test Suite.\\n    function next(PRNG memory prng) internal pure returns (uint256 result) {\\n        // We simply use `keccak256` for a great balance between\\n        // runtime gas costs, bytecode size, and statistical properties.\\n        //\\n        // A high-quality LCG with a 32-byte state\\n        // is only about 30% more gas efficient during runtime,\\n        // but requires a 32-byte multiplier, which can cause bytecode bloat\\n        // when this function is inlined.\\n        //\\n        // Using this method is about 2x more efficient than\\n        // `nextRandomness = uint256(keccak256(abi.encode(randomness)))`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := keccak256(prng, 0x20)\\n            mstore(prng, result)\\n        }\\n    }\\n\\n    /// @dev Returns a pseudorandom uint256, uniformly distributed\\n    /// between 0 (inclusive) and `upper` (exclusive).\\n    /// If your modulus is big, this method is recommended\\n    /// for uniform sampling to avoid modulo bias.\\n    /// For uniform sampling across all uint256 values,\\n    /// or for small enough moduli such that the bias is neligible,\\n    /// use {next} instead.\\n    function uniform(PRNG memory prng, uint256 upper) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := keccak256(prng, 0x20)\\n                mstore(prng, result)\\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\\n            }\\n            result := mod(result, upper)\\n        }\\n    }\\n\\n    /// @dev Shuffles the array in-place with Fisher-Yates shuffle.\\n    function shuffle(PRNG memory prng, uint256[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a)\\n            let w := not(0)\\n            let mask := shr(128, w)\\n            if n {\\n                for { a := add(a, 0x20) } 1 {} {\\n                    // We can just directly use `keccak256`, cuz\\n                    // the other approaches don't save much.\\n                    let r := keccak256(prng, 0x20)\\n                    mstore(prng, r)\\n\\n                    // Note that there will be a very tiny modulo bias\\n                    // if the length of the array is not a power of 2.\\n                    // For all practical purposes, it is negligible\\n                    // and will not be a fairness or security concern.\\n                    {\\n                        let j := add(a, shl(5, mod(shr(128, r), n)))\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let i := add(a, shl(5, n))\\n                        let t := mload(i)\\n                        mstore(i, mload(j))\\n                        mstore(j, t)\\n                    }\\n\\n                    {\\n                        let j := add(a, shl(5, mod(and(r, mask), n)))\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let i := add(a, shl(5, n))\\n                        let t := mload(i)\\n                        mstore(i, mload(j))\\n                        mstore(j, t)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Shuffles the bytes in-place with Fisher-Yates shuffle.\\n    function shuffle(PRNG memory prng, bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a)\\n            let w := not(0)\\n            let mask := shr(128, w)\\n            if n {\\n                let b := add(a, 0x01)\\n                for { a := add(a, 0x20) } 1 {} {\\n                    // We can just directly use `keccak256`, cuz\\n                    // the other approaches don't save much.\\n                    let r := keccak256(prng, 0x20)\\n                    mstore(prng, r)\\n\\n                    // Note that there will be a very tiny modulo bias\\n                    // if the length of the array is not a power of 2.\\n                    // For all practical purposes, it is negligible\\n                    // and will not be a fairness or security concern.\\n                    {\\n                        let o := mod(shr(128, r), n)\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let t := mload(add(b, n))\\n                        mstore8(add(a, n), mload(add(b, o)))\\n                        mstore8(add(a, o), t)\\n                    }\\n\\n                    {\\n                        let o := mod(and(r, mask), n)\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let t := mload(add(b, n))\\n                        mstore8(add(a, n), mload(add(b, o)))\\n                        mstore8(add(a, o), t)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a sample from the standard normal distribution denominated in `WAD`.\\n    function standardNormalWad(PRNG memory prng) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Technically, this is the Irwin-Hall distribution with 20 samples.\\n            // The chance of drawing a sample outside 10 \\u03c3 from the standard normal distribution\\n            // is \\u2248 0.000000000000000000000015, which is insignificant for most practical purposes.\\n            // Passes the Kolmogorov-Smirnov test for 200k samples. Uses about 322 gas.\\n            result := keccak256(prng, 0x20)\\n            mstore(prng, result)\\n            let n := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43 // Prime.\\n            let a := 0x100000000000000000000000000000051 // Prime and a primitive root of `n`.\\n            let m := 0x1fffffffffffffff1fffffffffffffff1fffffffffffffff1fffffffffffffff\\n            let s := 0x1000000000000000100000000000000010000000000000001\\n            let r1 := mulmod(result, a, n)\\n            let r2 := mulmod(r1, a, n)\\n            let r3 := mulmod(r2, a, n)\\n            // forgefmt: disable-next-item\\n            result := sub(sar(96, mul(26614938895861601847173011183,\\n                add(add(shr(192, mul(s, add(and(m, result), and(m, r1)))),\\n                shr(192, mul(s, add(and(m, r2), and(m, r3))))),\\n                shr(192, mul(s, and(m, mulmod(r3, a, n))))))), 7745966692414833770)\\n        }\\n    }\\n\\n    /// @dev Returns a sample from the unit exponential distribution denominated in `WAD`.\\n    function exponentialWad(PRNG memory prng) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Passes the Kolmogorov-Smirnov test for 200k samples.\\n            // Gas usage varies, starting from about 172+ gas.\\n            let r := keccak256(prng, 0x20)\\n            mstore(prng, r)\\n            let p := shl(129, r)\\n            let w := shl(1, r)\\n            if iszero(gt(w, p)) {\\n                let n := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43 // Prime.\\n                let a := 0x100000000000000000000000000000051 // Prime and a primitive root of `n`.\\n                for {} 1 {} {\\n                    r := mulmod(r, a, n)\\n                    if iszero(lt(shl(129, r), w)) {\\n                        r := mulmod(r, a, n)\\n                        result := add(1000000000000000000, result)\\n                        w := shl(1, r)\\n                        p := shl(129, r)\\n                        if iszero(lt(w, p)) { break }\\n                        continue\\n                    }\\n                    w := shl(1, r)\\n                    if iszero(lt(w, shl(129, r))) { break }\\n                }\\n            }\\n            result := add(div(p, shl(129, 170141183460469231732)), result)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*       STORAGE-BASED RANGE LAZY SHUFFLING OPERATIONS        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the state for lazy-shuffling the range `[0..n)`.\\n    /// Reverts if `n == 0 || n >= 2**32 - 1`.\\n    /// Reverts if `$` has already been initialized.\\n    /// If you need to reduce the length after initialization, just use a fresh new `$`.\\n    function initialize(LazyShuffler storage $, uint256 n) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(sub(n, 1), 0xfffffffe)) {\\n                mstore(0x00, 0x83b53941) // `InvalidInitialLazyShufflerLength()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if sload($.slot) {\\n                mstore(0x00, 0x0c9f11f2) // `LazyShufflerAlreadyInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, $.slot)\\n            sstore($.slot, or(shl(224, n), shl(32, shr(64, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Increases the length of `$`.\\n    /// Reverts if `$` has not been initialized.\\n    function grow(LazyShuffler storage $, uint256 n) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            // If the new length is smaller than the old length, revert.\\n            if lt(n, shr(224, state)) {\\n                mstore(0x00, 0xbed37c6e) // `InvalidNewLazyShufflerLength()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            sstore($.slot, or(shl(224, n), shr(32, shl(32, state))))\\n        }\\n    }\\n\\n    /// @dev Restarts the shuffler by setting `numShuffled` to zero,\\n    /// such that all elements can be drawn again.\\n    /// Restarting does NOT clear the internal permutation, nor changes the length.\\n    /// Even with the same sequence of randomness, reshuffling can yield different results.\\n    function restart(LazyShuffler storage $) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot)\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            sstore($.slot, shl(32, shr(32, state)))\\n        }\\n    }\\n\\n    /// @dev Returns the number of elements that have been shuffled.\\n    function numShuffled(LazyShuffler storage $) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := and(0xffffffff, sload($.slot))\\n        }\\n    }\\n\\n    /// @dev Returns the length of `$`.\\n    /// Returns zero if `$` is not initialized, else a non-zero value less than `2**32 - 1`.\\n    function length(LazyShuffler storage $) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := shr(224, sload($.slot))\\n        }\\n    }\\n\\n    /// @dev Returns if `$` has been initialized.\\n    function initialized(LazyShuffler storage $) internal view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := iszero(iszero(sload($.slot)))\\n        }\\n    }\\n\\n    /// @dev Returns if there are any more elements left to shuffle.\\n    /// Reverts if `$` is not initialized.\\n    function finished(LazyShuffler storage $) internal view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := eq(shr(224, state), and(0xffffffff, state))\\n        }\\n    }\\n\\n    /// @dev Returns the current value stored at `index`, accounting for all historical shuffling.\\n    /// Reverts if `index` is greater than or equal to the `length` of `$`.\\n    function get(LazyShuffler storage $, uint256 index) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            let n := shr(224, state) // Length of `$`.\\n            if iszero(lt(index, n)) {\\n                mstore(0x00, 0x61367cc4) // `LazyShufflerGetOutOfBounds()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let u32 := gt(n, 0xfffe)\\n            let s := add(shr(sub(4, u32), index), shr(64, shl(32, state))) // Bucket slot.\\n            let o := shl(add(4, u32), and(index, shr(u32, 15))) // Bucket slot offset (bits).\\n            let m := sub(shl(shl(u32, 16), 1), 1) // Value mask.\\n            result := and(m, shr(o, sload(s)))\\n            result := xor(index, mul(xor(index, sub(result, 1)), iszero(iszero(result))))\\n        }\\n    }\\n\\n    /// @dev Does a single Fisher-Yates shuffle step, increments the `numShuffled` in `$`,\\n    /// and returns the next value in the shuffled range.\\n    /// `randomness` can be taken from a good-enough source, or a higher quality source like VRF.\\n    /// Reverts if there are no more values to shuffle, which includes the case if `$` is not initialized.\\n    function next(LazyShuffler storage $, uint256 randomness) internal returns (uint256 chosen) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function _get(u32_, state_, i_) -> _value {\\n                let s_ := add(shr(sub(4, u32_), i_), shr(64, shl(32, state_))) // Bucket slot.\\n                let o_ := shl(add(4, u32_), and(i_, shr(u32_, 15))) // Bucket slot offset (bits).\\n                let m_ := sub(shl(shl(u32_, 16), 1), 1) // Value mask.\\n                _value := and(m_, shr(o_, sload(s_)))\\n                _value := xor(i_, mul(xor(i_, sub(_value, 1)), iszero(iszero(_value))))\\n            }\\n            function _set(u32_, state_, i_, value_) {\\n                let s_ := add(shr(sub(4, u32_), i_), shr(64, shl(32, state_))) // Bucket slot.\\n                let o_ := shl(add(4, u32_), and(i_, shr(u32_, 15))) // Bucket slot offset (bits).\\n                let m_ := sub(shl(shl(u32_, 16), 1), 1) // Value mask.\\n                let v_ := sload(s_) // Bucket slot value.\\n                value_ := mul(iszero(eq(i_, value_)), add(value_, 1))\\n                sstore(s_, xor(v_, shl(o_, and(m_, xor(shr(o_, v_), value_)))))\\n            }\\n            let state := sload($.slot) // The packed value at `$`.\\n            let shuffled := and(0xffffffff, state) // Number of elements shuffled.\\n            let n := shr(224, state) // Length of `$`.\\n            let remainder := sub(n, shuffled) // Number of elements left to shuffle.\\n            if iszero(remainder) {\\n                mstore(0x00, 0x51065f79) // `LazyShuffleFinished()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, randomness) // (Re)hash the randomness so that we don't\\n            mstore(0x20, shuffled) // need to expect guarantees on its distribution.\\n            let index := add(mod(keccak256(0x00, 0x40), remainder), shuffled)\\n            chosen := _get(gt(n, 0xfffe), state, index)\\n            _set(gt(n, 0xfffe), state, index, _get(gt(n, 0xfffe), state, shuffled))\\n            _set(gt(n, 0xfffe), state, shuffled, chosen)\\n            sstore($.slot, add(1, state)) // Increment the `numShuffled` by 1, and store it.\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdcb71f8dc72bb7384776154ca24d34c23e3c9bcf124bc75f0d2e379f9ebd021d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b03166000811580156200005d5750825b90506000826001600160401b031660011480156200007a5750303b155b90508115801562000089575080155b15620000a85760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000d757845460ff60401b1916680100000000000000001785555b83156200011e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505061568e80620001336000396000f3fe608060405234801561001057600080fd5b506004361061017a5760003560e01c80638154916e116100d45780638154916e146102e5578063909aa53914610305578063936725ec146103255780639d0bcca014610356578063a0e5af851461036b578063a8ca89ff14610386578063b414c55314610399578063b429afeb146103ac578063d447d4df146103bf578063d5e46dcd146103d2578063dee1f0e4146103ff578063f2c6c6fb14610412578063f3deb39114610425578063f77c479114610438578063ffa1ad741461044057600080fd5b806306efb7851461017f5780630e2ecde2146101a55780630e91f15e146101cb578063172ae49a146101eb57806319ab453c146102005780631c10968c14610213578063325a19f11461021b5780634593144c146102235780634675bfff1461022b5780634fac6ccd1461023e5780636742e2d61461025157806369c3d472146102745780636f383c0f1461029557806375a8e7da146102bd5780637cc96380146102dd575b600080fd5b61019261018d366004613d23565b610464565b6040519081526020015b60405180910390f35b6101b86101b3366004613d6c565b610479565b60405161ffff909116815260200161019c565b6101de6101d9366004613db2565b610484565b60405161019c9190613de7565b6101fe6101f9366004613d6c565b610490565b005b6101fe61020e366004613e2b565b6104a4565b61019261059e565b6101926105ad565b6101926105e1565b6101fe61023936600461413f565b610611565b6101fe61024c366004613e2b565b610622565b61026461025f3660046142cc565b610733565b604051901515815260200161019c565b6102876102823660046142cc565b610752565b60405161019c92919061454d565b6102a86102a336600461459c565b610779565b60405163ffffffff909116815260200161019c565b6102d06102cb366004613d6c565b61079c565b60405161019c919061465d565b6101926107ad565b6102f86102f3366004613d6c565b6107cb565b60405161019c91906146df565b610318610313366004614704565b6107d6565b60405161019c919061490a565b610349604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161019c919061496d565b61035e610801565b60405161019c9190614980565b610373610831565b60405160039190910b815260200161019c565b6101fe610394366004614994565b610843565b6101fe6103a73660046149d9565b61085b565b6102646103ba366004613e2b565b61086c565b6102646103cd366004613d6c565b610891565b6103e56103e0366004613d6c565b61089c565b6040805160ff93841681529290911660208301520161019c565b61026461040d366004613e2b565b6108b1565b6101926104203660046142cc565b610936565b6101926104333660046142cc565b61094b565b61035e610958565b61034960405180604001604052806005815260200164312e312e3560d81b81525081565b60006104708383610988565b90505b92915050565b6000610473826109c1565b606061047083836109ee565b6104a161049b610958565b82610a2e565b50565b60006104ae610ae0565b805490915060ff600160401b82041615906001600160401b03166000811580156104d55750825b90506000826001600160401b031660011480156104f15750303b155b9050811580156104ff575080155b1561051d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561054757845460ff60401b1916600160401b1785555b61055086610b04565b831561059657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b60006105a8610b15565b905090565b60006105a86105dd60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614b21565b5490565b60006105a86105dd60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614b21565b6104a161061c610958565b82610b28565b3330146106745760405162461bcd60e51b815260206004820152601b60248201527a24b731b932b0b9b2903932bb34b9b4b7b7103337b93134b23232b760291b60448201526064015b60405180910390fd5b60006106926105dd6001600080516020615639833981519152614b21565b61069d906001614b34565b90506106bf816106bc6001600080516020615639833981519152614b21565b55565b6106ee826106bc60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614b21565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6000610748610740610958565b858585610c1c565b90505b9392505050565b61075a613b49565b610762613bbb565b61076d858585610ca3565b91509150935093915050565b6000610790610786610958565b8787878787610d83565b90505b95945050505050565b6107a4613be2565b61047382610e10565b60006105a86105dd6001600080516020615639833981519152614b21565b600061047382610f63565b6107de613c0f565b6107f56107e9610958565b89898989898989610fb1565b98975050505050505050565b60006105a86105dd60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614b21565b60006105a861083e610958565b61135c565b61085661084e610958565b84848461142d565b505050565b6104a1610866610958565b826114bc565b6000610876610958565b6001600160a01b0316826001600160a01b0316149050919050565b60006104738261159d565b6000806108a8836115e2565b91509150915091565b6000816001600160a01b03166108c5610958565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190614b52565b6001600160a01b03161492915050565b6000610748610943610958565b8585856115f0565b600061074884848461178c565b60006105a86105dd60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614b21565b60006109926117be565b60070160006109aa6001600160a01b038616856117e2565b815260200190815260200160002054905092915050565b60006109cb6117be565b63ffffffff909216600090815260059290920160205250604090205461ffff1690565b60606104706109fb6117be565b6001016000610a1b86866024811115610a1657610a1661430e565b611831565b8152602001908152602001600020611846565b610a3782611853565b6000610a416117be565b63ffffffff8316600090815260209190915260409020549050610a626117be565b63ffffffff831660008181526020929092526040822091909155610aa090610a886117be565b600084815260019190910160205260409020906118df565b5060405163ffffffff831681527f93afafd4d79cc89e4afba48bcd8cac7b8a35b45dfb55afe60cccae721124cd0f906020015b60405180910390a1505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610b0c6118eb565b6104a181611912565b6000610b1f6117be565b60080154905090565b610b3182611853565b610b45816101800151826101a00151611a25565b6000610b5e826000015183604001518460200151611b5e565b9050732b710976fCEd1f3178A84e9F93c9FD8467f5289B6330f53b2c83610b836117be565b63ffffffff85166000908152600491820160205260409081902090516001600160e01b031960e086901b168152610bbb939201614bef565b60006040518083038186803b158015610bd357600080fd5b505af4158015610be7573d6000803e3d6000fd5b505050507f8ee0b45ff34ecba58a4014e0e0a9ebb97960cbfcae1e413072685b6b56b724fe8183604051610ad3929190614d83565b600080610c28836115e2565b915050610c99866001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190614b52565b84838888611bdf565b9695505050505050565b610cab613b49565b610cb3613bbb565b6000610cbd6117be565b6003016000610cd66001600160a01b0389168888611cfe565b8152602001908152602001600020549050610d10610cf26117be565b63ffffffff8616600090815260069190910160205260409020611d31565b9250610d78610d1d6117be565b63ffffffff8087166000908152600692909201602052604082206004019190610d53906001600160a01b038b16908a906117e216565b8152602001908152602001600020600083815260200190815260200160002054611f52565b915050935093915050565b6000610d8e87611fa0565b610e05610d996117be565b886001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190614b52565b8888888888612035565b979650505050505050565b610e18613be2565b610e206117be565b63ffffffff80841660009081526004929092016020908152604092839020835160a081018552815490931683526001810180548551818502810185019096528086529394919385840193830182828015610e9957602002820191906000526020600020905b815481526020019060010190808311610e85575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610ef157602002820191906000526020600020905b815481526020019060010190808311610edd575b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f5357602002820191906000526020600020905b815481526020019060010190808311610f3f575b5050505050815250509050919050565b600080610f91610f716117be565b63ffffffff85166000908152602091909152604090205490600882901c90565b91505061074b8160ff166024811115610fac57610fac61430e565b612168565b610fb9613c0f565b610fc289611fa0565b60408051610180810182526000918101829052606081018290526080810182905260e08101829052610120810182905261014081019190915263ffffffff871660c08201526001600160a01b03898116825286166020820152610100810185905260ff841660a0820152610160810183905261103d876115e2565b60ff90811660808401521660608201526001600160401b03881660e08201526110646117be565b600301600061107488888b61256a565b815260208101919091526040908101600020546101408301526001600160a01b038b16908201526110a3613c0f565b60006110c1836080015160ff166024811115610fac57610fac61430e565b60048111156110d2576110d261430e565b43610120850152905060001960ff82160161118e57732b710976fCEd1f3178A84e9F93c9FD8467f5289B63bd9fe9db8461110a6117be565b63ffffffff8d166000908152600491820160205260409081902090516001600160e01b031960e086901b168152611142939201614fc6565b600060405180830381865af415801561115f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611187919081019061521c565b91506112b2565b60011960ff821601611259576111a48888612580565b7369d45bb1F4237b5A6fFe12Bca3Db0EeE2d06bB2D63307800a2846111c76117be565b60060160008d63ffffffff1663ffffffff1681526020019081526020016000206040518363ffffffff1660e01b8152600401611204929190614fc6565b600060405180830381865af4158015611221573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112499190810190615250565b60ff1661012085015291506112b2565b60021960ff82160161129457611187836112716117be565b63ffffffff8c166000908152600591909101602052604090205461ffff166125fd565b604051634d07af3360e01b815260ff8216600482015260240161066b565b60c083015163ffffffff166101208301526001600160a01b038816604083015261016082018790526101408301516101808301527f67af56937d4d46082b2327381733f95fd39ed3df103ec0f3761eb315b463f5648a8a60ff8416600481111561131e5761131e61430e565b8b8b8b8961014001518c8a8c61012001516040516113459a999897969594939291906152a1565b60405180910390a1509a9950505050505050505050565b600080826001600160a01b031663c3dfdae66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c19190614b52565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114229190615332565b905061074b816128de565b61143684611853565b6000611443838386611b5e565b90508361144e6117be565b63ffffffff831660008181526005929092016020908152604092839020805461ffff191661ffff9586161790558251918252928716928101929092527f9df2729723fcb63a4f46ffc16905a683f7eb0e8dd3ec260515e66b4d4cd8c0ad910160405180910390a15050505050565b6114c582611853565b6114d9816101800151826101a00151611a25565b60006114f2826020015183604001518460000151611b5e565b90506114fc6117be565b63ffffffff8216600090815260069190910160205260408120906115208282613c85565b600182016000905560028201600090556003820160006115409190613c85565b505061156c8261154e6117be565b63ffffffff8416600090815260069190910160205260409020612929565b7fe9039f79f66d71725ba719a022b5729bbfce163887322d74e690772fe247fa4b8183604051610ad392919061534b565b6000806115ab610f716117be565b9150600290506115c98260ff166024811115610fac57610fac61430e565b60048111156115da576115da61430e565b149392505050565b6000806108a8610f716117be565b60006115fb85611fa0565b611606848484612acd565b90506000611613836115e2565b91505060006116308260ff166024811115610fac57610fac61430e565b60048111156116415761164161430e565b905060001960ff821601156117825760011960ff821601611757576117526116676117be565b60060160008663ffffffff1663ffffffff1681526020019081526020016000208787868b6001600160a01b031663c3dfdae66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190614b52565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d9190615332565b612b22565b611782565b60021960ff821601156117825760405163cafe050760e01b815260ff8216600482015260240161066b565b5050949350505050565b60006117966117be565b60030160006117a686868661256a565b81526020019081526020016000205490509392505050565b7ffa9e067a92ca4a9057b7b4465a8f29d633e1758238bd3a4a8ec5d0f904f6b90090565b60006001600160401b0382111561180f57604051633995b34160e01b81526004810183905260240161066b565b50600160a01b600160e01b0360a09190911b166001600160a01b039091161790565b600060ff8316600883901b61ff001617610470565b6060600061074b83612b32565b604051631430d62960e21b81526001600160a01b038216906350c358a49061187f903390600401614980565b602060405180830381865afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c0919061536a565b6104a1573360405163451cea1760e11b815260040161066b9190614980565b60006104708383612b8e565b6118f3612c88565b61191057604051631afcd79f60e31b815260040160405180910390fd5b565b6001600160a01b03811661195a5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b604482015260640161066b565b611989816106bc60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614b21565b6119b8426106bc60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614b21565b6119e7436106bc60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614b21565b7f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe236713426814243604051611a1a93929190615385565b60405180910390a150565b815181518114611a485760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015611b585760006001600160a01b0316848281518110611a7057611a706153a6565b60200260200101516001600160a01b031603611a9f5760405163d92e233d60e01b815260040160405180910390fd5b828181518110611ab157611ab16153a6565b602002602001015163ffffffff16600003611adf5760405163eb79f4eb60e01b815260040160405180910390fd5b633b9aca0063ffffffff16838281518110611afc57611afc6153a6565b602002602001015163ffffffff161115611b5057828181518110611b2257611b226153a6565b60200260200101516040516304470bfd60e21b815260040161066b919063ffffffff91909116815260200190565b600101611a4b565b50505050565b600080611b696117be565b9050611b8785856024811115611b8157611b8161430e565b85612ca2565b91506000611ba186866024811115610a1657610a1661430e565b63ffffffff808516600081815260208681526040808320869055858352600188019091529020929350611bd59291612d9716565b5050509392505050565b600080611bfa8560ff166024811115610fac57610fac61430e565b90506001816004811115611c1057611c1061430e565b03611c1f576001915050610793565b6002816004811115611c3357611c3361430e565b03611c42576001915050610793565b6003816004811115611c5657611c5661430e565b03611ce057604051630152f74f60e41b815263ffffffff871660048201526001600160a01b0385811660248301526044820185905288169063152f74f090606401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061536a565b915050610793565b604051630dad26cb60e31b815260ff8616600482015260240161066b565b6001600160a01b039290921660a09190911b600160a01b600160e01b03161760e09190911b6001600160e01b0319161790565b611d39613b49565b611d41613b49565b611d9c83600001805480602002602001604051908101604052809291908181526020018280548015611d9257602002820191906000526020600020905b815481526020019060010190808311611d7e575b5050505050612da3565b606083015260808201526001830154600881901c601082901c603083901c60ff90811661010086015263ffffffff90911660e085015290811660c08401521660a08201526002830154611df660a082901c9060e083901c90565b60ff166101608401526001600160401b039081166101408401526001600160a01b039091166101208301526003840154908190811115611e3857611e38613e48565b604051908082528060200260200182016040528015611e61578160200160208202803683370190505b50610180830152806001600160401b03811115611e8057611e80613e48565b604051908082528060200260200182016040528015611ea9578160200160208202803683370190505b506101a083015260005b81811015611f4957611ee7856003018281548110611ed357611ed36153a6565b90600052602060002001549060a082901c90565b8461018001518381518110611efe57611efe6153a6565b60200260200101856101a001518481518110611f1c57611f1c6153a6565b63ffffffff909316602093840291909101909201919091526001600160a01b039091169052600101611eb3565b50909392505050565b611f5a613bbb565b506040805160808101825260ff8381166001148252604884901c166020820152602883901c60030b9181019190915263ffffffff60089290921c91909116606082015290565b336001600160a01b0316816001600160a01b031663683fedf76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200c9190614b52565b6001600160a01b0316146104a1573360405163cf219bef60e01b815260040161066b9190614980565b600080612045878761309461312a565b905060008960010160006120598885611831565b81526020019081526020016000209050600061207482613333565b9050806000036120975760405163296a76c760e21b815260040160405180910390fd5b6000816001146120b9576120b46120af600184614b21565b613094565b6120bc565b60005b9050600060028d018160ff60e81b60e88c901b1660ff60e01b60e089901b16600160a01b600160e01b0360a08c901b166001600160a01b038d161717178152602001908152602001600020905061211b8c8486848660008e8e8d61333d565b95508563ffffffff1660000361214457604051639cb04d5d60e01b815260040160405180910390fd5b6121578163ffffffff80891690612d9716565b505050505050979650505050505050565b6000600482602481111561217e5761217e61430e565b148061219b575060058260248111156121995761219961430e565b145b806121b7575060088260248111156121b5576121b561430e565b145b156121c457506001919050565b60018260248111156121d8576121d861430e565b14806121f5575060028260248111156121f3576121f361430e565b145b806122115750600382602481111561220f5761220f61430e565b145b8061222d5750600a82602481111561222b5761222b61430e565b145b80612249575060208260248111156122475761224761430e565b145b80612265575060218260248111156122635761226361430e565b145b806122815750602282602481111561227f5761227f61430e565b145b8061229d5750602382602481111561229b5761229b61430e565b145b156122aa57506002919050565b60068260248111156122be576122be61430e565b14806122db575060078260248111156122d9576122d961430e565b145b806122f75750600b8260248111156122f5576122f561430e565b145b806123135750600c8260248111156123115761231161430e565b145b8061232f5750600d82602481111561232d5761232d61430e565b145b8061234b5750600e8260248111156123495761234961430e565b145b806123675750600f8260248111156123655761236561430e565b145b80612383575060108260248111156123815761238161430e565b145b8061239f5750601182602481111561239d5761239d61430e565b145b806123bb575060128260248111156123b9576123b961430e565b145b806123d7575060138260248111156123d5576123d561430e565b145b806123f3575060148260248111156123f1576123f161430e565b145b8061240f5750601582602481111561240d5761240d61430e565b145b8061242b575060168260248111156124295761242961430e565b145b80612447575060178260248111156124455761244561430e565b145b80612463575060188260248111156124615761246161430e565b145b8061247f5750601982602481111561247d5761247d61430e565b145b8061249b5750601a8260248111156124995761249961430e565b145b806124b75750601b8260248111156124b5576124b561430e565b145b806124d35750601c8260248111156124d1576124d161430e565b145b806124ef5750601d8260248111156124ed576124ed61430e565b145b8061250b5750601e8260248111156125095761250961430e565b145b806125275750601f8260248111156125255761252561430e565b145b1561253457506003919050565b8160248111156125465761254661430e565b6040516302f13cad60e41b815260ff909116600482015260240161066b565b919050565b60006107486001600160a01b0385168484611cfe565b600061258a6117be565b905060006125a16001600160a01b038516846117e2565b6008830154600082815260078501602052604090205491925042916125c69190614b34565b11156125e55760405163051211b760e11b815260040160405180910390fd5b60009081526007909101602052604090204290555050565b612605613c0f565b8161ffff1660000361262a57604051635c5e6bb360e11b815260040160405180910390fd5b82604001516001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126909190614b52565b6001600160a01b0316631c1b0daa84600001518560e001518660c001518760a0015188602001518961010001518a606001518b61014001518c61016001516040518a63ffffffff1660e01b81526004016126f2999897969594939291906153bc565b6000604051808303816000875af1158015612711573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612739919081019061521c565b9050806020015180612749575080515b1561047357600083604001516001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015612791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b59190614b52565b905060006127c28461340c565b6020860151610100870151604051631c2aafe760e01b81529293506000926001600160a01b03861692631c2aafe7926127ff928790600401615385565b602060405180830381865afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190615332565b9050826001600160a01b031663184f614387602001518861010001518585600161286a9190614b34565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b1580156128bd57600080fd5b505af11580156128d1573d6000803e3d6000fd5b5050505050505092915050565b60006128f6600a6a084595161401484a00000061544b565b82101561290557506000919050565b6a084595161401484a00000061291f83633b9aca0061545f565b610473919061544b565b6060820151608083015161293c91613443565b805161294f918391602090910190613ca3565b5060a082015160c083015160e084015161010085015160ff90931660089290921b61ff00169190911760109190911b65ffffffff0000161760309190911b60ff60301b161760018201556101208201516101408301516101608401516001600160a01b0390921660a09190911b600160a01b600160e01b03161760e09190911b60ff60e01b16176002820155610180820151516000816001600160401b038111156129fc576129fc613e48565b604051908082528060200260200182016040528015612a25578160200160208202803683370190505b50905060005b82811015612ab057612a8b856101a001518281518110612a4d57612a4d6153a6565b60200260200101518661018001518381518110612a6c57612a6c6153a6565b60200260200101516001600160a01b03166136a190919063ffffffff16565b828281518110612a9d57612a9d6153a6565b6020908102919091010152600101612a2b565b508051612ac69060038501906020840190613ca3565b5050505050565b600080612ad86117be565b90506000612ae786868661256a565b6000818152600384016020526040902054909150612b06906001614b34565b6000918252600390920160205260409020819055949350505050565b612ac6858585856136bf866136ca565b606081600001805480602002602001604051908101604052809291908181526020018280548015612b8257602002820191906000526020600020905b815481526020019060010190808311612b6e575b50505050509050919050565b60008181526001830160205260408120548015612c77576000612bb2600183614b21565b8554909150600090612bc690600190614b21565b9050808214612c2b576000866000018281548110612be657612be66153a6565b9060005260206000200154905080876000018481548110612c0957612c096153a6565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c3c57612c3c615476565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610473565b6000915050610473565b5092915050565b6000612c92610ae0565b54600160401b900460ff16919050565b600060ff84161580612cb5575060ff8316155b80612cc2575061ffff8216155b15612ce05760405163273e150360e21b815260040160405180910390fd5b60648460ff1610612d09576040516340eff0e560e01b815260ff8516600482015260240161066b565b60648360ff1610612d325760405163017c4c5960e01b815260ff8416600482015260240161066b565b6127108261ffff161115612d5f57604051637dc12d1d60e01b815261ffff8316600482015260240161066b565b61ffff8216612d7360ff851661271061548c565b612d8360ff8716620f424061548c565b612d8d91906154b4565b61074891906154b4565b600061047083836137b3565b805160609081906000612db782600861545f565b90506000816001600160401b03811115612dd357612dd3613e48565b604051908082528060200260200182016040528015612dfc578160200160208202803683370190505b5090506000826001600160401b03811115612e1957612e19613e48565b604051908082528060200260200182016040528015612e42578160200160208202803683370190505b5090506000805b85811015612f6f5760005b6008811015612f6657600081612e6b84600861545f565b612e759190614b34565b9050612e8282602061545f565b8b8481518110612e9457612e946153a6565b602002602001015160001c901c60020b868281518110612eb657612eb66153a6565b60039290920b602092830291909101820152612ed390839061545f565b612ede906018614b34565b8b8481518110612ef057612ef06153a6565b602002602001015160001c901c858281518110612f0f57612f0f6153a6565b602002602001019060ff16908160ff1681525050858181518110612f3557612f356153a6565b602002602001015160030b600003612f4d5750612f66565b83612f57816154d1565b94505050806001019050612e54565b50600101612e49565b50806001600160401b03811115612f8857612f88613e48565b604051908082528060200260200182016040528015612fb1578160200160208202803683370190505b509650806001600160401b03811115612fcc57612fcc613e48565b604051908082528060200260200182016040528015612ff5578160200160208202803683370190505b50955060005b8181101561308957838181518110613015576130156153a6565b602002602001015188828151811061302f5761302f6153a6565b602002602001019060030b908160030b81525050828181518110613055576130556153a6565b602002602001015187828151811061306f5761306f6153a6565b60ff90921660209283029190910190910152600101612ffb565b505050505050915091565b6000816000036130a657506000919050565b6130b1826001614b34565b4340414443423a5a604051602001613107979695949392919096875260609590951b6001600160601b0319166020870152603486019390935260548501919091526074840152609483015260b482015260d40190565b6040516020818303038152906040528051906020012060001c61047391906154ea565b825160009080158061313d575083518114155b1561315b5760405163360ee06360e21b815260040160405180910390fd5b806001036131855784600081518110613176576131766153a6565b60200260200101519150613304565b6000613198633b9aca0063ffffffff8616565b905060006131ab633b9aca0060016154b4565b63ffffffff16905060005b83811015613300578781815181106131d0576131d06153a6565b602002602001015160ff16600003156132f857633b9aca0063ffffffff16878281518110613200576132006153a6565b602002602001015163ffffffff16111561325d57868181518110613226576132266153a6565b6020908102919091010151604051631b4fdad960e11b815263ffffffff9091166004820152633b9aca00602482015260440161066b565b82878281518110613270576132706153a6565b6020026020010151633b9aca0061328791906154fe565b63ffffffff16116132f857818782815181106132a5576132a56153a6565b602002602001015163ffffffff1610156132f8578681815181106132cb576132cb6153a6565b602002602001015163ffffffff1691508781815181106132ed576132ed6153a6565b602002602001015194505b6001016131b6565b5050505b8160ff1660000361332b5760405163b3cea44d60e01b81526000600482015260240161066b565b509392505050565b6000610473825490565b60008861334988613333565b1061335b576001945061335b87613802565b6000805b8a8110156133ce578a881061337357600097505b600061337f8b8a613850565b905061338e8d82878a8a611bdf565b80156133b1575087806133b157506133af8a63ffffffff8084169061385c16565b155b156133c1579250600191506133ce565b506001978801970161335f565b50801580156133db575085155b156133fe576133e988613802565b6133fb8b8b8b8b8b60018b8b8b61333d565b91505b509998505050505050505050565b600061341b8261ffff16613874565b60405160200161342b919061551b565b60405160208183030381529060405261047390615549565b606081518351146134675760405163586cb9e160e01b815260040160405180910390fd5b600060088451613477919061544b565b613482906001614b34565b90506000816001600160401b0381111561349e5761349e613e48565b6040519080825280602002602001820160405280156134c7578160200160208202803683370190505b50905060005b828110156136985760005b600881101561368f576000816134ef84600861545f565b6134f99190614b34565b905087518110613509575061368f565b627fffff60020b888281518110613522576135226153a6565b602002602001015160030b138061355b5750627fffff1960020b88828151811061354e5761354e6153a6565b602002602001015160030b125b1561359957878181518110613572576135726153a6565b602002602001015160030b604051632eb1d06960e01b815260040161066b91815260200190565b8781815181106135ab576135ab6153a6565b602002602001015160030b6000036135d657604051637c946ed760e01b815260040160405180910390fd5b6135e182602061545f565b8882815181106135f3576135f36153a6565b602002602001015162ffffff1660001b901b848481518110613617576136176153a6565b602002602001018181511791508181525050816020613636919061545f565b613641906018614b34565b878281518110613653576136536153a6565b602002602001015160ff1660001b901b848481518110613675576136756153a6565b6020908102919091010180519091179052506001016134d8565b506001016134cd565b50949350505050565b63ffffffff60a01b60a09190911b166001600160a01b039091161790565b600061047382613094565b6040805160808101825260018152600060208201819052918101829052606081016136fc633b9aca0063ffffffff8716565b63ffffffff1690529050600061371188611d31565b9050600061373a826060015183608001518560600151613730886128de565b8660e0015161397c565b50905080600981518110613750576137506153a6565b602090810291909101015160030b604084015261376c83613a41565b60048a0160006137856001600160a01b038c168b6117e2565b8152602001908152602001600020600088815260200190815260200160002081905550505050505050505050565b60008181526001830160205260408120546137fa57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610473565b506000610473565b600061380d82611846565b905060005b815181101561085657613847828281518110613830576138306153a6565b6020026020010151846118df90919063ffffffff16565b50600101613812565b60006104708383613a5f565b60008181526001830160205260408120541515610470565b60608160000361389b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156138c557806138af816154d1565b91506138be9050600a8361544b565b915061389f565b6000816001600160401b038111156138df576138df613e48565b6040519080825280601f01601f191660200182016040528015613909576020820181803683370190505b5090505b84156139745761391e600183614b21565b915061392b600a866154ea565b613936906030614b34565b60f81b81838151811061394b5761394b6153a6565b60200101906001600160f81b031916908160001a90535061396d600a8661544b565b945061390d565b949350505050565b6060600061398b600486615570565b60408051602b8082526105808201909252919650602082016105608036833701905050915060005b8751811015613a29576139e08782815181106139d1576139d16153a6565b60200260200101518787613a89565b838983815181106139f3576139f36153a6565b602002602001015160ff1681518110613a0e57613a0e6153a6565b60039290920b602092830291909101909101526001016139b3565b50613a35838686613a89565b90509550959350505050565b60006104738260000151836060015184604001518560200151613af5565b6000826000018281548110613a7657613a766153a6565b9060005260206000200154905092915050565b60008360030b600003613a9e5750600061074b565b633b9aca00613ab4600384810b9087900b615593565b613abe91906155c3565b633b9aca00613ad763ffffffff8616600388900b615593565b613ae191906155c3565b613aeb91906155f1565b6107489085615611565b600084613b03576000613b06565b60015b60ff1660001b905060088463ffffffff1660001b901b8117905060288363ffffffff1660001b901b8117905060488260ff1660001b901b81179050949350505050565b604080516101c081018252600080825260208201819052909182019081526060602082018190526040820181905260008183018190526080830181905260a0830181905260c0830181905260e08301819052610100830181905261012083015261014082018190526101609091015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160a081018252600080825260606020830181905292820183905282820152608081019190915290565b604080516101c08101825260008082526020820181905291810182905260608082018190526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082018390526101808201929092526101a081019190915290565b50805460008255906000526020600020908101906104a19190613cee565b828054828255906000526020600020908101928215613cde579160200282015b82811115613cde578251825591602001919060010190613cc3565b50613cea929150613cee565b5090565b5b80821115613cea5760008155600101613cef565b6001600160a01b03811681146104a157600080fd5b803561256581613d03565b60008060408385031215613d3657600080fd5b8235613d4181613d03565b946020939093013593505050565b63ffffffff811681146104a157600080fd5b803561256581613d4f565b600060208284031215613d7e57600080fd5b813561074b81613d4f565b60ff811681146104a157600080fd5b803561256581613d89565b80356025811061256557600080fd5b60008060408385031215613dc557600080fd5b8235613dd081613d89565b9150613dde60208401613da3565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613e1f57835183529284019291840191600101613e03565b50909695505050505050565b600060208284031215613e3d57600080fd5b813561074b81613d03565b634e487b7160e01b600052604160045260246000fd5b6040516101c081016001600160401b0381118282101715613e8157613e81613e48565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613eaf57613eaf613e48565b604052919050565b803561ffff8116811461256557600080fd5b60006001600160401b03821115613ee257613ee2613e48565b5060051b60200190565b600082601f830112613efd57600080fd5b81356020613f12613f0d83613ec9565b613e87565b8083825260208201915060208460051b870101935086841115613f3457600080fd5b602086015b84811015613f59578035613f4c81613d89565b8352918301918301613f39565b509695505050505050565b8060030b81146104a157600080fd5b803561256581613f64565b600082601f830112613f8f57600080fd5b81356020613f9f613f0d83613ec9565b8083825260208201915060208460051b870101935086841115613fc157600080fd5b602086015b84811015613f59578035613fd981613f64565b8352918301918301613fc6565b600060408284031215613ff857600080fd5b604051604081016001600160401b03828210818311171561401b5761401b613e48565b81604052829350843591508082111561403357600080fd5b61403f86838701613eec565b8352602085013591508082111561405557600080fd5b5061406285828601613f7e565b6020830152505092915050565b600082601f83011261408057600080fd5b81356020614090613f0d83613ec9565b8083825260208201915060208460051b8701019350868411156140b257600080fd5b602086015b84811015613f595780356140ca81613d03565b83529183019183016140b7565b600082601f8301126140e857600080fd5b813560206140f8613f0d83613ec9565b8083825260208201915060208460051b87010193508684111561411a57600080fd5b602086015b84811015613f5957803561413281613d4f565b835291830191830161411f565b60006020828403121561415157600080fd5b81356001600160401b038082111561416857600080fd5b908301906101c0828603121561417d57600080fd5b614185613e5e565b61418e83613d98565b815261419c60208401613eb7565b60208201526141ad60408401613da3565b60408201526141be60608401613d61565b60608201526080830135828111156141d557600080fd5b6141e187828601613fe6565b60808301525060a0830135828111156141f957600080fd5b61420587828601613fe6565b60a08301525061421760c08401613d61565b60c082015261422860e08401613f73565b60e082015261010061423b818501613f73565b9082015261012061424d848201613f73565b9082015261014061425f848201613f73565b90820152610160614271848201613f73565b90820152610180838101358381111561428957600080fd5b6142958882870161406f565b8284015250506101a080840135838111156142af57600080fd5b6142bb888287016140d7565b918301919091525095945050505050565b6000806000606084860312156142e157600080fd5b83356142ec81613d03565b925060208401359150604084013561430381613d4f565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b602581106143345761433461430e565b9052565b60008151808452602080850194506020840160005b8381101561436c57815160ff168752958201959082019060010161434d565b509495945050505050565b60008151808452602080850194506020840160005b8381101561436c57815160030b8752958201959082019060010161438c565b6001600160a01b03169052565b60008151808452602080850194506020840160005b8381101561436c5781516001600160a01b0316875295820195908201906001016143cd565b60008151808452602080850194506020840160005b8381101561436c57815163ffffffff1687529582019590820190600101614407565b805161ffff16825260006101c0602083015161444a602086018260ff169052565b50604083015161445d6040860182614324565b50606083015181606086015261447582860182614338565b9150506080830151848203608086015261448f8282614377565b91505060a08301516144a660a086018260ff169052565b5060c08301516144bb60c086018260ff169052565b5060e08301516144d360e086018263ffffffff169052565b506101008381015160ff1690850152610120808401516144f5828701826143ab565b5050610140838101516001600160401b0316908501526101608084015160ff1690850152610180808401518583038287015261453183826143b8565b925050506101a08084015185830382870152610c9983826143f2565b60a08152600061456060a0830185614429565b905082511515602083015260ff6020840151166040830152604083015160030b606083015263ffffffff60608401511660808301529392505050565b600080600080600060a086880312156145b457600080fd5b85356001600160401b03808211156145cb57600080fd5b6145d789838a01613eec565b965060208801359150808211156145ed57600080fd5b506145fa888289016140d7565b945050604086013561460b81613d89565b9250606086013561461b81613d03565b949793965091946080013592915050565b60008151808452602080850194506020840160005b8381101561436c57815187529582019590820190600101614641565b6020815263ffffffff82511660208201526000602083015160a0604084015261468960c084018261462c565b90506040840151601f19808584030160608601526146a7838361462c565b92506060860151608086015260808601519150808584030160a086015250610793828261462c565b600581106143345761433461430e565b6020810161047382846146cf565b80356001600160401b038116811461256557600080fd5b600080600080600080600060e0888a03121561471f57600080fd5b873561472a81613d03565b965060206147398982016146ed565b9650604089013561474981613d4f565b9550606089013561475981613d03565b94506080890135935060a089013561477081613d89565b925060c08901356001600160401b038082111561478c57600080fd5b818b0191508b601f8301126147a057600080fd5b8135818111156147b2576147b2613e48565b6147c4601f8201601f19168501613e87565b91508082528c848285010111156147da57600080fd5b808484018584013760008482840101525080935050505092959891949750929550565b80511515825260006101c0602083015161481b602086018215159052565b50604083015161482e60408601826143ab565b506060830151816060860152614846828601826143b8565b915050608083015161485d608086018260030b9052565b5060a083015161487260a086018260030b9052565b5060c083015161488760c086018260030b9052565b5060e083015161489c60e086018260030b9052565b50610100808401516148b28287018260030b9052565b50506101208381015163ffffffff81168683015250506101408381015163ffffffff8116868301525050610160838101519085015261018080840151908501526101a08084015185830382870152610c9983826143f2565b60208152600061047060208301846147fd565b60005b83811015614938578181015183820152602001614920565b50506000910152565b6000815180845261495981602086016020860161491d565b601f01601f19169290920160200192915050565b6020815260006104706020830184614941565b6001600160a01b0391909116815260200190565b6000806000606084860312156149a957600080fd5b6149b284613eb7565b925060208401356149c281613d89565b91506149d060408501613da3565b90509250925092565b6000602082840312156149eb57600080fd5b81356001600160401b0380821115614a0257600080fd5b908301906101c08286031215614a1757600080fd5b614a1f613e5e565b614a2883613eb7565b8152614a3660208401613d98565b6020820152614a4760408401613da3565b6040820152606083013582811115614a5e57600080fd5b614a6a87828601613eec565b606083015250608083013582811115614a8257600080fd5b614a8e87828601613f7e565b608083015250614aa060a08401613d98565b60a0820152614ab160c08401613d98565b60c0820152614ac260e08401613d61565b60e0820152610100614ad5818501613d98565b90820152610120614ae7848201613d18565b90820152610140614af98482016146ed565b90820152610160614271848201613d98565b634e487b7160e01b600052601160045260246000fd5b8181038181111561047357610473614b0b565b8082018082111561047357610473614b0b565b805161256581613d03565b600060208284031215614b6457600080fd5b815161074b81613d03565b805160408084528151908401819052600091602091908201906060860190845b81811015614bae57835160ff1683529284019291840191600101614b8f565b50508483015186820387850152805180835290840192506000918401905b80831015613f5957835160030b8252928401926001929092019190840190614bcc565b60408152614c0360408201845160ff169052565b60006020840151614c1a606084018261ffff169052565b506040840151614c2d6080840182614324565b50606084015163ffffffff1660a083015260808401516101c060c08401819052614c5b610200850183614b6f565b915060a0860151603f19808685030160e0870152614c798483614b6f565b935060c08801519150610100614c968188018463ffffffff169052565b60e08901519250610120614cae8189018560030b9052565b90890151925061014090614cc68883018560030b9052565b8901519250610160614cdc8882018560030b9052565b90890151925061018090614cf48883018560030b9052565b89015192506101a0614d0a8882018560030b9052565b818a01519350828887030185890152614d2386856143b8565b9550808a01519450505080868503016101e08701525050614d4482826143f2565b925050508260208301529392505050565b6000815160408452614d6a6040850182614338565b9050602083015184820360208601526107938282614377565b63ffffffff8316815260406020820152614da360408201835160ff169052565b60006020830151614dba606084018261ffff169052565b506040830151614dcd6080840182614324565b50606083015163ffffffff1660a083015260808301516101c060c08401819052614dfb610200850183614d55565b915060a0850151603f19808685030160e0870152614e198483614d55565b935060c08701519150610100614e368188018463ffffffff169052565b60e08801519250610120614e4e8189018560030b9052565b90880151925061014090614e668883018560030b9052565b8801519250610160614e7c8882018560030b9052565b90880151925061018090614e948883018560030b9052565b88015192506101a0614eaa8882018560030b9052565b818901519350828887030185890152614ec386856143b8565b9550808901519450505080868503016101e08701525050610c9982826143f2565b6000610180614ef48484516143ab565b6020830151614f0660208601826143ab565b506040830151614f1960408601826143ab565b506060830151614f2e606086018260ff169052565b506080830151614f43608086018260ff169052565b5060a0830151614f5860a086018260ff169052565b5060c0830151614f7060c086018263ffffffff169052565b5060e0830151614f8b60e08601826001600160401b03169052565b5061010083810151908501526101208084015190850152610140808401519085015261016080840151818601839052610c9983870182614941565b604081526000614fd96040830185614ee4565b90508260208301529392505050565b8051801515811461256557600080fd5b600082601f83011261500957600080fd5b81516020615019613f0d83613ec9565b8083825260208201915060208460051b87010193508684111561503b57600080fd5b602086015b84811015613f5957805161505381613d03565b8352918301918301615040565b805161256581613f64565b805161256581613d4f565b600082601f83011261508757600080fd5b81516020615097613f0d83613ec9565b8083825260208201915060208460051b8701019350868411156150b957600080fd5b602086015b84811015613f595780516150d181613d4f565b83529183019183016150be565b60006101c082840312156150f157600080fd5b6150f9613e5e565b905061510482614fe8565b815261511260208301614fe8565b602082015261512360408301614b47565b604082015260608201516001600160401b038082111561514257600080fd5b61514e85838601614ff8565b606084015261515f60808501615060565b608084015261517060a08501615060565b60a084015261518160c08501615060565b60c084015261519260e08501615060565b60e084015261010091506151a7828501615060565b8284015261012091506151bb82850161506b565b8284015261014091506151cf82850161506b565b8284015261016091508184015182840152610180915081840151828401526101a09150818401518181111561520357600080fd5b61520f86828701615076565b8385015250505092915050565b60006020828403121561522e57600080fd5b81516001600160401b0381111561524457600080fd5b613974848285016150de565b6000806040838503121561526357600080fd5b82516001600160401b0381111561527957600080fd5b615285858286016150de565b925050602083015161529681613d89565b809150509250929050565b60006101406001600160401b038d16835263ffffffff8c1660208401526152cb604084018c6146cf565b6001600160a01b038a1660608401526080830189905260ff881660a084015260c0830187905260e0830181905261530481840187614941565b905082810361010084015261531981866147fd565b915050826101208301529b9a5050505050505050505050565b60006020828403121561534457600080fd5b5051919050565b63ffffffff831681526040602082015260006107486040830184614429565b60006020828403121561537c57600080fd5b61047082614fe8565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038a811682526001600160401b038a16602083015263ffffffff8916604083015260ff8881166060840152908716608083015260a08201869052841660c082015260e08101839052610120610100820181905260009061542583820185614941565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261545a5761545a615435565b500490565b808202811582820484141761047357610473614b0b565b634e487b7160e01b600052603160045260246000fd5b63ffffffff8181168382160280821691908281146154ac576154ac614b0b565b505092915050565b63ffffffff818116838216019080821115612c8157612c81614b0b565b6000600182016154e3576154e3614b0b565b5060010190565b6000826154f9576154f9615435565b500690565b63ffffffff828116828216039080821115612c8157612c81614b0b565b6553544f52595f60d01b81526000825161553c81600685016020870161491d565b9190910160060192915050565b8051602080830151919081101561556a576000198160200360031b1b821691505b50919050565b600063ffffffff8084168061558757615587615435565b92169190910492915050565b80820260008212600160ff1b841416156155af576155af614b0b565b818105831482151761047357610473614b0b565b6000826155d2576155d2615435565b600160ff1b8214600019841416156155ec576155ec614b0b565b500590565b80820182811260008312801582168215821617156154ac576154ac614b0b565b600381810b9083900b01637fffffff8113637fffffff198212171561047357610473614b0b56fe22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bda2646970667358221220ed6baff2689d3600f717d13f4f4f0bcadb77980715026884bf574c8be211f94964736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061017a5760003560e01c80638154916e116100d45780638154916e146102e5578063909aa53914610305578063936725ec146103255780639d0bcca014610356578063a0e5af851461036b578063a8ca89ff14610386578063b414c55314610399578063b429afeb146103ac578063d447d4df146103bf578063d5e46dcd146103d2578063dee1f0e4146103ff578063f2c6c6fb14610412578063f3deb39114610425578063f77c479114610438578063ffa1ad741461044057600080fd5b806306efb7851461017f5780630e2ecde2146101a55780630e91f15e146101cb578063172ae49a146101eb57806319ab453c146102005780631c10968c14610213578063325a19f11461021b5780634593144c146102235780634675bfff1461022b5780634fac6ccd1461023e5780636742e2d61461025157806369c3d472146102745780636f383c0f1461029557806375a8e7da146102bd5780637cc96380146102dd575b600080fd5b61019261018d366004613d23565b610464565b6040519081526020015b60405180910390f35b6101b86101b3366004613d6c565b610479565b60405161ffff909116815260200161019c565b6101de6101d9366004613db2565b610484565b60405161019c9190613de7565b6101fe6101f9366004613d6c565b610490565b005b6101fe61020e366004613e2b565b6104a4565b61019261059e565b6101926105ad565b6101926105e1565b6101fe61023936600461413f565b610611565b6101fe61024c366004613e2b565b610622565b61026461025f3660046142cc565b610733565b604051901515815260200161019c565b6102876102823660046142cc565b610752565b60405161019c92919061454d565b6102a86102a336600461459c565b610779565b60405163ffffffff909116815260200161019c565b6102d06102cb366004613d6c565b61079c565b60405161019c919061465d565b6101926107ad565b6102f86102f3366004613d6c565b6107cb565b60405161019c91906146df565b610318610313366004614704565b6107d6565b60405161019c919061490a565b610349604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161019c919061496d565b61035e610801565b60405161019c9190614980565b610373610831565b60405160039190910b815260200161019c565b6101fe610394366004614994565b610843565b6101fe6103a73660046149d9565b61085b565b6102646103ba366004613e2b565b61086c565b6102646103cd366004613d6c565b610891565b6103e56103e0366004613d6c565b61089c565b6040805160ff93841681529290911660208301520161019c565b61026461040d366004613e2b565b6108b1565b6101926104203660046142cc565b610936565b6101926104333660046142cc565b61094b565b61035e610958565b61034960405180604001604052806005815260200164312e312e3560d81b81525081565b60006104708383610988565b90505b92915050565b6000610473826109c1565b606061047083836109ee565b6104a161049b610958565b82610a2e565b50565b60006104ae610ae0565b805490915060ff600160401b82041615906001600160401b03166000811580156104d55750825b90506000826001600160401b031660011480156104f15750303b155b9050811580156104ff575080155b1561051d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561054757845460ff60401b1916600160401b1785555b61055086610b04565b831561059657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b60006105a8610b15565b905090565b60006105a86105dd60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614b21565b5490565b60006105a86105dd60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614b21565b6104a161061c610958565b82610b28565b3330146106745760405162461bcd60e51b815260206004820152601b60248201527a24b731b932b0b9b2903932bb34b9b4b7b7103337b93134b23232b760291b60448201526064015b60405180910390fd5b60006106926105dd6001600080516020615639833981519152614b21565b61069d906001614b34565b90506106bf816106bc6001600080516020615639833981519152614b21565b55565b6106ee826106bc60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614b21565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6000610748610740610958565b858585610c1c565b90505b9392505050565b61075a613b49565b610762613bbb565b61076d858585610ca3565b91509150935093915050565b6000610790610786610958565b8787878787610d83565b90505b95945050505050565b6107a4613be2565b61047382610e10565b60006105a86105dd6001600080516020615639833981519152614b21565b600061047382610f63565b6107de613c0f565b6107f56107e9610958565b89898989898989610fb1565b98975050505050505050565b60006105a86105dd60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614b21565b60006105a861083e610958565b61135c565b61085661084e610958565b84848461142d565b505050565b6104a1610866610958565b826114bc565b6000610876610958565b6001600160a01b0316826001600160a01b0316149050919050565b60006104738261159d565b6000806108a8836115e2565b91509150915091565b6000816001600160a01b03166108c5610958565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190614b52565b6001600160a01b03161492915050565b6000610748610943610958565b8585856115f0565b600061074884848461178c565b60006105a86105dd60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614b21565b60006109926117be565b60070160006109aa6001600160a01b038616856117e2565b815260200190815260200160002054905092915050565b60006109cb6117be565b63ffffffff909216600090815260059290920160205250604090205461ffff1690565b60606104706109fb6117be565b6001016000610a1b86866024811115610a1657610a1661430e565b611831565b8152602001908152602001600020611846565b610a3782611853565b6000610a416117be565b63ffffffff8316600090815260209190915260409020549050610a626117be565b63ffffffff831660008181526020929092526040822091909155610aa090610a886117be565b600084815260019190910160205260409020906118df565b5060405163ffffffff831681527f93afafd4d79cc89e4afba48bcd8cac7b8a35b45dfb55afe60cccae721124cd0f906020015b60405180910390a1505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610b0c6118eb565b6104a181611912565b6000610b1f6117be565b60080154905090565b610b3182611853565b610b45816101800151826101a00151611a25565b6000610b5e826000015183604001518460200151611b5e565b905073__$a0fcfc253474aa5cdb2dbfa020c220d358$__6330f53b2c83610b836117be565b63ffffffff85166000908152600491820160205260409081902090516001600160e01b031960e086901b168152610bbb939201614bef565b60006040518083038186803b158015610bd357600080fd5b505af4158015610be7573d6000803e3d6000fd5b505050507f8ee0b45ff34ecba58a4014e0e0a9ebb97960cbfcae1e413072685b6b56b724fe8183604051610ad3929190614d83565b600080610c28836115e2565b915050610c99866001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190614b52565b84838888611bdf565b9695505050505050565b610cab613b49565b610cb3613bbb565b6000610cbd6117be565b6003016000610cd66001600160a01b0389168888611cfe565b8152602001908152602001600020549050610d10610cf26117be565b63ffffffff8616600090815260069190910160205260409020611d31565b9250610d78610d1d6117be565b63ffffffff8087166000908152600692909201602052604082206004019190610d53906001600160a01b038b16908a906117e216565b8152602001908152602001600020600083815260200190815260200160002054611f52565b915050935093915050565b6000610d8e87611fa0565b610e05610d996117be565b886001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190614b52565b8888888888612035565b979650505050505050565b610e18613be2565b610e206117be565b63ffffffff80841660009081526004929092016020908152604092839020835160a081018552815490931683526001810180548551818502810185019096528086529394919385840193830182828015610e9957602002820191906000526020600020905b815481526020019060010190808311610e85575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610ef157602002820191906000526020600020905b815481526020019060010190808311610edd575b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f5357602002820191906000526020600020905b815481526020019060010190808311610f3f575b5050505050815250509050919050565b600080610f91610f716117be565b63ffffffff85166000908152602091909152604090205490600882901c90565b91505061074b8160ff166024811115610fac57610fac61430e565b612168565b610fb9613c0f565b610fc289611fa0565b60408051610180810182526000918101829052606081018290526080810182905260e08101829052610120810182905261014081019190915263ffffffff871660c08201526001600160a01b03898116825286166020820152610100810185905260ff841660a0820152610160810183905261103d876115e2565b60ff90811660808401521660608201526001600160401b03881660e08201526110646117be565b600301600061107488888b61256a565b815260208101919091526040908101600020546101408301526001600160a01b038b16908201526110a3613c0f565b60006110c1836080015160ff166024811115610fac57610fac61430e565b60048111156110d2576110d261430e565b43610120850152905060001960ff82160161118e5773__$a0fcfc253474aa5cdb2dbfa020c220d358$__63bd9fe9db8461110a6117be565b63ffffffff8d166000908152600491820160205260409081902090516001600160e01b031960e086901b168152611142939201614fc6565b600060405180830381865af415801561115f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611187919081019061521c565b91506112b2565b60011960ff821601611259576111a48888612580565b73__$201d0d5baf5bd2c94d39dac94ac4e46c3c$__63307800a2846111c76117be565b60060160008d63ffffffff1663ffffffff1681526020019081526020016000206040518363ffffffff1660e01b8152600401611204929190614fc6565b600060405180830381865af4158015611221573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112499190810190615250565b60ff1661012085015291506112b2565b60021960ff82160161129457611187836112716117be565b63ffffffff8c166000908152600591909101602052604090205461ffff166125fd565b604051634d07af3360e01b815260ff8216600482015260240161066b565b60c083015163ffffffff166101208301526001600160a01b038816604083015261016082018790526101408301516101808301527f67af56937d4d46082b2327381733f95fd39ed3df103ec0f3761eb315b463f5648a8a60ff8416600481111561131e5761131e61430e565b8b8b8b8961014001518c8a8c61012001516040516113459a999897969594939291906152a1565b60405180910390a1509a9950505050505050505050565b600080826001600160a01b031663c3dfdae66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c19190614b52565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114229190615332565b905061074b816128de565b61143684611853565b6000611443838386611b5e565b90508361144e6117be565b63ffffffff831660008181526005929092016020908152604092839020805461ffff191661ffff9586161790558251918252928716928101929092527f9df2729723fcb63a4f46ffc16905a683f7eb0e8dd3ec260515e66b4d4cd8c0ad910160405180910390a15050505050565b6114c582611853565b6114d9816101800151826101a00151611a25565b60006114f2826020015183604001518460000151611b5e565b90506114fc6117be565b63ffffffff8216600090815260069190910160205260408120906115208282613c85565b600182016000905560028201600090556003820160006115409190613c85565b505061156c8261154e6117be565b63ffffffff8416600090815260069190910160205260409020612929565b7fe9039f79f66d71725ba719a022b5729bbfce163887322d74e690772fe247fa4b8183604051610ad392919061534b565b6000806115ab610f716117be565b9150600290506115c98260ff166024811115610fac57610fac61430e565b60048111156115da576115da61430e565b149392505050565b6000806108a8610f716117be565b60006115fb85611fa0565b611606848484612acd565b90506000611613836115e2565b91505060006116308260ff166024811115610fac57610fac61430e565b60048111156116415761164161430e565b905060001960ff821601156117825760011960ff821601611757576117526116676117be565b60060160008663ffffffff1663ffffffff1681526020019081526020016000208787868b6001600160a01b031663c3dfdae66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190614b52565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d9190615332565b612b22565b611782565b60021960ff821601156117825760405163cafe050760e01b815260ff8216600482015260240161066b565b5050949350505050565b60006117966117be565b60030160006117a686868661256a565b81526020019081526020016000205490509392505050565b7ffa9e067a92ca4a9057b7b4465a8f29d633e1758238bd3a4a8ec5d0f904f6b90090565b60006001600160401b0382111561180f57604051633995b34160e01b81526004810183905260240161066b565b50600160a01b600160e01b0360a09190911b166001600160a01b039091161790565b600060ff8316600883901b61ff001617610470565b6060600061074b83612b32565b604051631430d62960e21b81526001600160a01b038216906350c358a49061187f903390600401614980565b602060405180830381865afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c0919061536a565b6104a1573360405163451cea1760e11b815260040161066b9190614980565b60006104708383612b8e565b6118f3612c88565b61191057604051631afcd79f60e31b815260040160405180910390fd5b565b6001600160a01b03811661195a5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b604482015260640161066b565b611989816106bc60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614b21565b6119b8426106bc60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614b21565b6119e7436106bc60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614b21565b7f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe236713426814243604051611a1a93929190615385565b60405180910390a150565b815181518114611a485760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015611b585760006001600160a01b0316848281518110611a7057611a706153a6565b60200260200101516001600160a01b031603611a9f5760405163d92e233d60e01b815260040160405180910390fd5b828181518110611ab157611ab16153a6565b602002602001015163ffffffff16600003611adf5760405163eb79f4eb60e01b815260040160405180910390fd5b633b9aca0063ffffffff16838281518110611afc57611afc6153a6565b602002602001015163ffffffff161115611b5057828181518110611b2257611b226153a6565b60200260200101516040516304470bfd60e21b815260040161066b919063ffffffff91909116815260200190565b600101611a4b565b50505050565b600080611b696117be565b9050611b8785856024811115611b8157611b8161430e565b85612ca2565b91506000611ba186866024811115610a1657610a1661430e565b63ffffffff808516600081815260208681526040808320869055858352600188019091529020929350611bd59291612d9716565b5050509392505050565b600080611bfa8560ff166024811115610fac57610fac61430e565b90506001816004811115611c1057611c1061430e565b03611c1f576001915050610793565b6002816004811115611c3357611c3361430e565b03611c42576001915050610793565b6003816004811115611c5657611c5661430e565b03611ce057604051630152f74f60e41b815263ffffffff871660048201526001600160a01b0385811660248301526044820185905288169063152f74f090606401602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061536a565b915050610793565b604051630dad26cb60e31b815260ff8616600482015260240161066b565b6001600160a01b039290921660a09190911b600160a01b600160e01b03161760e09190911b6001600160e01b0319161790565b611d39613b49565b611d41613b49565b611d9c83600001805480602002602001604051908101604052809291908181526020018280548015611d9257602002820191906000526020600020905b815481526020019060010190808311611d7e575b5050505050612da3565b606083015260808201526001830154600881901c601082901c603083901c60ff90811661010086015263ffffffff90911660e085015290811660c08401521660a08201526002830154611df660a082901c9060e083901c90565b60ff166101608401526001600160401b039081166101408401526001600160a01b039091166101208301526003840154908190811115611e3857611e38613e48565b604051908082528060200260200182016040528015611e61578160200160208202803683370190505b50610180830152806001600160401b03811115611e8057611e80613e48565b604051908082528060200260200182016040528015611ea9578160200160208202803683370190505b506101a083015260005b81811015611f4957611ee7856003018281548110611ed357611ed36153a6565b90600052602060002001549060a082901c90565b8461018001518381518110611efe57611efe6153a6565b60200260200101856101a001518481518110611f1c57611f1c6153a6565b63ffffffff909316602093840291909101909201919091526001600160a01b039091169052600101611eb3565b50909392505050565b611f5a613bbb565b506040805160808101825260ff8381166001148252604884901c166020820152602883901c60030b9181019190915263ffffffff60089290921c91909116606082015290565b336001600160a01b0316816001600160a01b031663683fedf76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200c9190614b52565b6001600160a01b0316146104a1573360405163cf219bef60e01b815260040161066b9190614980565b600080612045878761309461312a565b905060008960010160006120598885611831565b81526020019081526020016000209050600061207482613333565b9050806000036120975760405163296a76c760e21b815260040160405180910390fd5b6000816001146120b9576120b46120af600184614b21565b613094565b6120bc565b60005b9050600060028d018160ff60e81b60e88c901b1660ff60e01b60e089901b16600160a01b600160e01b0360a08c901b166001600160a01b038d161717178152602001908152602001600020905061211b8c8486848660008e8e8d61333d565b95508563ffffffff1660000361214457604051639cb04d5d60e01b815260040160405180910390fd5b6121578163ffffffff80891690612d9716565b505050505050979650505050505050565b6000600482602481111561217e5761217e61430e565b148061219b575060058260248111156121995761219961430e565b145b806121b7575060088260248111156121b5576121b561430e565b145b156121c457506001919050565b60018260248111156121d8576121d861430e565b14806121f5575060028260248111156121f3576121f361430e565b145b806122115750600382602481111561220f5761220f61430e565b145b8061222d5750600a82602481111561222b5761222b61430e565b145b80612249575060208260248111156122475761224761430e565b145b80612265575060218260248111156122635761226361430e565b145b806122815750602282602481111561227f5761227f61430e565b145b8061229d5750602382602481111561229b5761229b61430e565b145b156122aa57506002919050565b60068260248111156122be576122be61430e565b14806122db575060078260248111156122d9576122d961430e565b145b806122f75750600b8260248111156122f5576122f561430e565b145b806123135750600c8260248111156123115761231161430e565b145b8061232f5750600d82602481111561232d5761232d61430e565b145b8061234b5750600e8260248111156123495761234961430e565b145b806123675750600f8260248111156123655761236561430e565b145b80612383575060108260248111156123815761238161430e565b145b8061239f5750601182602481111561239d5761239d61430e565b145b806123bb575060128260248111156123b9576123b961430e565b145b806123d7575060138260248111156123d5576123d561430e565b145b806123f3575060148260248111156123f1576123f161430e565b145b8061240f5750601582602481111561240d5761240d61430e565b145b8061242b575060168260248111156124295761242961430e565b145b80612447575060178260248111156124455761244561430e565b145b80612463575060188260248111156124615761246161430e565b145b8061247f5750601982602481111561247d5761247d61430e565b145b8061249b5750601a8260248111156124995761249961430e565b145b806124b75750601b8260248111156124b5576124b561430e565b145b806124d35750601c8260248111156124d1576124d161430e565b145b806124ef5750601d8260248111156124ed576124ed61430e565b145b8061250b5750601e8260248111156125095761250961430e565b145b806125275750601f8260248111156125255761252561430e565b145b1561253457506003919050565b8160248111156125465761254661430e565b6040516302f13cad60e41b815260ff909116600482015260240161066b565b919050565b60006107486001600160a01b0385168484611cfe565b600061258a6117be565b905060006125a16001600160a01b038516846117e2565b6008830154600082815260078501602052604090205491925042916125c69190614b34565b11156125e55760405163051211b760e11b815260040160405180910390fd5b60009081526007909101602052604090204290555050565b612605613c0f565b8161ffff1660000361262a57604051635c5e6bb360e11b815260040160405180910390fd5b82604001516001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126909190614b52565b6001600160a01b0316631c1b0daa84600001518560e001518660c001518760a0015188602001518961010001518a606001518b61014001518c61016001516040518a63ffffffff1660e01b81526004016126f2999897969594939291906153bc565b6000604051808303816000875af1158015612711573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612739919081019061521c565b9050806020015180612749575080515b1561047357600083604001516001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015612791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b59190614b52565b905060006127c28461340c565b6020860151610100870151604051631c2aafe760e01b81529293506000926001600160a01b03861692631c2aafe7926127ff928790600401615385565b602060405180830381865afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190615332565b9050826001600160a01b031663184f614387602001518861010001518585600161286a9190614b34565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b1580156128bd57600080fd5b505af11580156128d1573d6000803e3d6000fd5b5050505050505092915050565b60006128f6600a6a084595161401484a00000061544b565b82101561290557506000919050565b6a084595161401484a00000061291f83633b9aca0061545f565b610473919061544b565b6060820151608083015161293c91613443565b805161294f918391602090910190613ca3565b5060a082015160c083015160e084015161010085015160ff90931660089290921b61ff00169190911760109190911b65ffffffff0000161760309190911b60ff60301b161760018201556101208201516101408301516101608401516001600160a01b0390921660a09190911b600160a01b600160e01b03161760e09190911b60ff60e01b16176002820155610180820151516000816001600160401b038111156129fc576129fc613e48565b604051908082528060200260200182016040528015612a25578160200160208202803683370190505b50905060005b82811015612ab057612a8b856101a001518281518110612a4d57612a4d6153a6565b60200260200101518661018001518381518110612a6c57612a6c6153a6565b60200260200101516001600160a01b03166136a190919063ffffffff16565b828281518110612a9d57612a9d6153a6565b6020908102919091010152600101612a2b565b508051612ac69060038501906020840190613ca3565b5050505050565b600080612ad86117be565b90506000612ae786868661256a565b6000818152600384016020526040902054909150612b06906001614b34565b6000918252600390920160205260409020819055949350505050565b612ac6858585856136bf866136ca565b606081600001805480602002602001604051908101604052809291908181526020018280548015612b8257602002820191906000526020600020905b815481526020019060010190808311612b6e575b50505050509050919050565b60008181526001830160205260408120548015612c77576000612bb2600183614b21565b8554909150600090612bc690600190614b21565b9050808214612c2b576000866000018281548110612be657612be66153a6565b9060005260206000200154905080876000018481548110612c0957612c096153a6565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c3c57612c3c615476565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610473565b6000915050610473565b5092915050565b6000612c92610ae0565b54600160401b900460ff16919050565b600060ff84161580612cb5575060ff8316155b80612cc2575061ffff8216155b15612ce05760405163273e150360e21b815260040160405180910390fd5b60648460ff1610612d09576040516340eff0e560e01b815260ff8516600482015260240161066b565b60648360ff1610612d325760405163017c4c5960e01b815260ff8416600482015260240161066b565b6127108261ffff161115612d5f57604051637dc12d1d60e01b815261ffff8316600482015260240161066b565b61ffff8216612d7360ff851661271061548c565b612d8360ff8716620f424061548c565b612d8d91906154b4565b61074891906154b4565b600061047083836137b3565b805160609081906000612db782600861545f565b90506000816001600160401b03811115612dd357612dd3613e48565b604051908082528060200260200182016040528015612dfc578160200160208202803683370190505b5090506000826001600160401b03811115612e1957612e19613e48565b604051908082528060200260200182016040528015612e42578160200160208202803683370190505b5090506000805b85811015612f6f5760005b6008811015612f6657600081612e6b84600861545f565b612e759190614b34565b9050612e8282602061545f565b8b8481518110612e9457612e946153a6565b602002602001015160001c901c60020b868281518110612eb657612eb66153a6565b60039290920b602092830291909101820152612ed390839061545f565b612ede906018614b34565b8b8481518110612ef057612ef06153a6565b602002602001015160001c901c858281518110612f0f57612f0f6153a6565b602002602001019060ff16908160ff1681525050858181518110612f3557612f356153a6565b602002602001015160030b600003612f4d5750612f66565b83612f57816154d1565b94505050806001019050612e54565b50600101612e49565b50806001600160401b03811115612f8857612f88613e48565b604051908082528060200260200182016040528015612fb1578160200160208202803683370190505b509650806001600160401b03811115612fcc57612fcc613e48565b604051908082528060200260200182016040528015612ff5578160200160208202803683370190505b50955060005b8181101561308957838181518110613015576130156153a6565b602002602001015188828151811061302f5761302f6153a6565b602002602001019060030b908160030b81525050828181518110613055576130556153a6565b602002602001015187828151811061306f5761306f6153a6565b60ff90921660209283029190910190910152600101612ffb565b505050505050915091565b6000816000036130a657506000919050565b6130b1826001614b34565b4340414443423a5a604051602001613107979695949392919096875260609590951b6001600160601b0319166020870152603486019390935260548501919091526074840152609483015260b482015260d40190565b6040516020818303038152906040528051906020012060001c61047391906154ea565b825160009080158061313d575083518114155b1561315b5760405163360ee06360e21b815260040160405180910390fd5b806001036131855784600081518110613176576131766153a6565b60200260200101519150613304565b6000613198633b9aca0063ffffffff8616565b905060006131ab633b9aca0060016154b4565b63ffffffff16905060005b83811015613300578781815181106131d0576131d06153a6565b602002602001015160ff16600003156132f857633b9aca0063ffffffff16878281518110613200576132006153a6565b602002602001015163ffffffff16111561325d57868181518110613226576132266153a6565b6020908102919091010151604051631b4fdad960e11b815263ffffffff9091166004820152633b9aca00602482015260440161066b565b82878281518110613270576132706153a6565b6020026020010151633b9aca0061328791906154fe565b63ffffffff16116132f857818782815181106132a5576132a56153a6565b602002602001015163ffffffff1610156132f8578681815181106132cb576132cb6153a6565b602002602001015163ffffffff1691508781815181106132ed576132ed6153a6565b602002602001015194505b6001016131b6565b5050505b8160ff1660000361332b5760405163b3cea44d60e01b81526000600482015260240161066b565b509392505050565b6000610473825490565b60008861334988613333565b1061335b576001945061335b87613802565b6000805b8a8110156133ce578a881061337357600097505b600061337f8b8a613850565b905061338e8d82878a8a611bdf565b80156133b1575087806133b157506133af8a63ffffffff8084169061385c16565b155b156133c1579250600191506133ce565b506001978801970161335f565b50801580156133db575085155b156133fe576133e988613802565b6133fb8b8b8b8b8b60018b8b8b61333d565b91505b509998505050505050505050565b600061341b8261ffff16613874565b60405160200161342b919061551b565b60405160208183030381529060405261047390615549565b606081518351146134675760405163586cb9e160e01b815260040160405180910390fd5b600060088451613477919061544b565b613482906001614b34565b90506000816001600160401b0381111561349e5761349e613e48565b6040519080825280602002602001820160405280156134c7578160200160208202803683370190505b50905060005b828110156136985760005b600881101561368f576000816134ef84600861545f565b6134f99190614b34565b905087518110613509575061368f565b627fffff60020b888281518110613522576135226153a6565b602002602001015160030b138061355b5750627fffff1960020b88828151811061354e5761354e6153a6565b602002602001015160030b125b1561359957878181518110613572576135726153a6565b602002602001015160030b604051632eb1d06960e01b815260040161066b91815260200190565b8781815181106135ab576135ab6153a6565b602002602001015160030b6000036135d657604051637c946ed760e01b815260040160405180910390fd5b6135e182602061545f565b8882815181106135f3576135f36153a6565b602002602001015162ffffff1660001b901b848481518110613617576136176153a6565b602002602001018181511791508181525050816020613636919061545f565b613641906018614b34565b878281518110613653576136536153a6565b602002602001015160ff1660001b901b848481518110613675576136756153a6565b6020908102919091010180519091179052506001016134d8565b506001016134cd565b50949350505050565b63ffffffff60a01b60a09190911b166001600160a01b039091161790565b600061047382613094565b6040805160808101825260018152600060208201819052918101829052606081016136fc633b9aca0063ffffffff8716565b63ffffffff1690529050600061371188611d31565b9050600061373a826060015183608001518560600151613730886128de565b8660e0015161397c565b50905080600981518110613750576137506153a6565b602090810291909101015160030b604084015261376c83613a41565b60048a0160006137856001600160a01b038c168b6117e2565b8152602001908152602001600020600088815260200190815260200160002081905550505050505050505050565b60008181526001830160205260408120546137fa57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610473565b506000610473565b600061380d82611846565b905060005b815181101561085657613847828281518110613830576138306153a6565b6020026020010151846118df90919063ffffffff16565b50600101613812565b60006104708383613a5f565b60008181526001830160205260408120541515610470565b60608160000361389b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156138c557806138af816154d1565b91506138be9050600a8361544b565b915061389f565b6000816001600160401b038111156138df576138df613e48565b6040519080825280601f01601f191660200182016040528015613909576020820181803683370190505b5090505b84156139745761391e600183614b21565b915061392b600a866154ea565b613936906030614b34565b60f81b81838151811061394b5761394b6153a6565b60200101906001600160f81b031916908160001a90535061396d600a8661544b565b945061390d565b949350505050565b6060600061398b600486615570565b60408051602b8082526105808201909252919650602082016105608036833701905050915060005b8751811015613a29576139e08782815181106139d1576139d16153a6565b60200260200101518787613a89565b838983815181106139f3576139f36153a6565b602002602001015160ff1681518110613a0e57613a0e6153a6565b60039290920b602092830291909101909101526001016139b3565b50613a35838686613a89565b90509550959350505050565b60006104738260000151836060015184604001518560200151613af5565b6000826000018281548110613a7657613a766153a6565b9060005260206000200154905092915050565b60008360030b600003613a9e5750600061074b565b633b9aca00613ab4600384810b9087900b615593565b613abe91906155c3565b633b9aca00613ad763ffffffff8616600388900b615593565b613ae191906155c3565b613aeb91906155f1565b6107489085615611565b600084613b03576000613b06565b60015b60ff1660001b905060088463ffffffff1660001b901b8117905060288363ffffffff1660001b901b8117905060488260ff1660001b901b81179050949350505050565b604080516101c081018252600080825260208201819052909182019081526060602082018190526040820181905260008183018190526080830181905260a0830181905260c0830181905260e08301819052610100830181905261012083015261014082018190526101609091015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160a081018252600080825260606020830181905292820183905282820152608081019190915290565b604080516101c08101825260008082526020820181905291810182905260608082018190526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082018390526101808201929092526101a081019190915290565b50805460008255906000526020600020908101906104a19190613cee565b828054828255906000526020600020908101928215613cde579160200282015b82811115613cde578251825591602001919060010190613cc3565b50613cea929150613cee565b5090565b5b80821115613cea5760008155600101613cef565b6001600160a01b03811681146104a157600080fd5b803561256581613d03565b60008060408385031215613d3657600080fd5b8235613d4181613d03565b946020939093013593505050565b63ffffffff811681146104a157600080fd5b803561256581613d4f565b600060208284031215613d7e57600080fd5b813561074b81613d4f565b60ff811681146104a157600080fd5b803561256581613d89565b80356025811061256557600080fd5b60008060408385031215613dc557600080fd5b8235613dd081613d89565b9150613dde60208401613da3565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613e1f57835183529284019291840191600101613e03565b50909695505050505050565b600060208284031215613e3d57600080fd5b813561074b81613d03565b634e487b7160e01b600052604160045260246000fd5b6040516101c081016001600160401b0381118282101715613e8157613e81613e48565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613eaf57613eaf613e48565b604052919050565b803561ffff8116811461256557600080fd5b60006001600160401b03821115613ee257613ee2613e48565b5060051b60200190565b600082601f830112613efd57600080fd5b81356020613f12613f0d83613ec9565b613e87565b8083825260208201915060208460051b870101935086841115613f3457600080fd5b602086015b84811015613f59578035613f4c81613d89565b8352918301918301613f39565b509695505050505050565b8060030b81146104a157600080fd5b803561256581613f64565b600082601f830112613f8f57600080fd5b81356020613f9f613f0d83613ec9565b8083825260208201915060208460051b870101935086841115613fc157600080fd5b602086015b84811015613f59578035613fd981613f64565b8352918301918301613fc6565b600060408284031215613ff857600080fd5b604051604081016001600160401b03828210818311171561401b5761401b613e48565b81604052829350843591508082111561403357600080fd5b61403f86838701613eec565b8352602085013591508082111561405557600080fd5b5061406285828601613f7e565b6020830152505092915050565b600082601f83011261408057600080fd5b81356020614090613f0d83613ec9565b8083825260208201915060208460051b8701019350868411156140b257600080fd5b602086015b84811015613f595780356140ca81613d03565b83529183019183016140b7565b600082601f8301126140e857600080fd5b813560206140f8613f0d83613ec9565b8083825260208201915060208460051b87010193508684111561411a57600080fd5b602086015b84811015613f5957803561413281613d4f565b835291830191830161411f565b60006020828403121561415157600080fd5b81356001600160401b038082111561416857600080fd5b908301906101c0828603121561417d57600080fd5b614185613e5e565b61418e83613d98565b815261419c60208401613eb7565b60208201526141ad60408401613da3565b60408201526141be60608401613d61565b60608201526080830135828111156141d557600080fd5b6141e187828601613fe6565b60808301525060a0830135828111156141f957600080fd5b61420587828601613fe6565b60a08301525061421760c08401613d61565b60c082015261422860e08401613f73565b60e082015261010061423b818501613f73565b9082015261012061424d848201613f73565b9082015261014061425f848201613f73565b90820152610160614271848201613f73565b90820152610180838101358381111561428957600080fd5b6142958882870161406f565b8284015250506101a080840135838111156142af57600080fd5b6142bb888287016140d7565b918301919091525095945050505050565b6000806000606084860312156142e157600080fd5b83356142ec81613d03565b925060208401359150604084013561430381613d4f565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b602581106143345761433461430e565b9052565b60008151808452602080850194506020840160005b8381101561436c57815160ff168752958201959082019060010161434d565b509495945050505050565b60008151808452602080850194506020840160005b8381101561436c57815160030b8752958201959082019060010161438c565b6001600160a01b03169052565b60008151808452602080850194506020840160005b8381101561436c5781516001600160a01b0316875295820195908201906001016143cd565b60008151808452602080850194506020840160005b8381101561436c57815163ffffffff1687529582019590820190600101614407565b805161ffff16825260006101c0602083015161444a602086018260ff169052565b50604083015161445d6040860182614324565b50606083015181606086015261447582860182614338565b9150506080830151848203608086015261448f8282614377565b91505060a08301516144a660a086018260ff169052565b5060c08301516144bb60c086018260ff169052565b5060e08301516144d360e086018263ffffffff169052565b506101008381015160ff1690850152610120808401516144f5828701826143ab565b5050610140838101516001600160401b0316908501526101608084015160ff1690850152610180808401518583038287015261453183826143b8565b925050506101a08084015185830382870152610c9983826143f2565b60a08152600061456060a0830185614429565b905082511515602083015260ff6020840151166040830152604083015160030b606083015263ffffffff60608401511660808301529392505050565b600080600080600060a086880312156145b457600080fd5b85356001600160401b03808211156145cb57600080fd5b6145d789838a01613eec565b965060208801359150808211156145ed57600080fd5b506145fa888289016140d7565b945050604086013561460b81613d89565b9250606086013561461b81613d03565b949793965091946080013592915050565b60008151808452602080850194506020840160005b8381101561436c57815187529582019590820190600101614641565b6020815263ffffffff82511660208201526000602083015160a0604084015261468960c084018261462c565b90506040840151601f19808584030160608601526146a7838361462c565b92506060860151608086015260808601519150808584030160a086015250610793828261462c565b600581106143345761433461430e565b6020810161047382846146cf565b80356001600160401b038116811461256557600080fd5b600080600080600080600060e0888a03121561471f57600080fd5b873561472a81613d03565b965060206147398982016146ed565b9650604089013561474981613d4f565b9550606089013561475981613d03565b94506080890135935060a089013561477081613d89565b925060c08901356001600160401b038082111561478c57600080fd5b818b0191508b601f8301126147a057600080fd5b8135818111156147b2576147b2613e48565b6147c4601f8201601f19168501613e87565b91508082528c848285010111156147da57600080fd5b808484018584013760008482840101525080935050505092959891949750929550565b80511515825260006101c0602083015161481b602086018215159052565b50604083015161482e60408601826143ab565b506060830151816060860152614846828601826143b8565b915050608083015161485d608086018260030b9052565b5060a083015161487260a086018260030b9052565b5060c083015161488760c086018260030b9052565b5060e083015161489c60e086018260030b9052565b50610100808401516148b28287018260030b9052565b50506101208381015163ffffffff81168683015250506101408381015163ffffffff8116868301525050610160838101519085015261018080840151908501526101a08084015185830382870152610c9983826143f2565b60208152600061047060208301846147fd565b60005b83811015614938578181015183820152602001614920565b50506000910152565b6000815180845261495981602086016020860161491d565b601f01601f19169290920160200192915050565b6020815260006104706020830184614941565b6001600160a01b0391909116815260200190565b6000806000606084860312156149a957600080fd5b6149b284613eb7565b925060208401356149c281613d89565b91506149d060408501613da3565b90509250925092565b6000602082840312156149eb57600080fd5b81356001600160401b0380821115614a0257600080fd5b908301906101c08286031215614a1757600080fd5b614a1f613e5e565b614a2883613eb7565b8152614a3660208401613d98565b6020820152614a4760408401613da3565b6040820152606083013582811115614a5e57600080fd5b614a6a87828601613eec565b606083015250608083013582811115614a8257600080fd5b614a8e87828601613f7e565b608083015250614aa060a08401613d98565b60a0820152614ab160c08401613d98565b60c0820152614ac260e08401613d61565b60e0820152610100614ad5818501613d98565b90820152610120614ae7848201613d18565b90820152610140614af98482016146ed565b90820152610160614271848201613d98565b634e487b7160e01b600052601160045260246000fd5b8181038181111561047357610473614b0b565b8082018082111561047357610473614b0b565b805161256581613d03565b600060208284031215614b6457600080fd5b815161074b81613d03565b805160408084528151908401819052600091602091908201906060860190845b81811015614bae57835160ff1683529284019291840191600101614b8f565b50508483015186820387850152805180835290840192506000918401905b80831015613f5957835160030b8252928401926001929092019190840190614bcc565b60408152614c0360408201845160ff169052565b60006020840151614c1a606084018261ffff169052565b506040840151614c2d6080840182614324565b50606084015163ffffffff1660a083015260808401516101c060c08401819052614c5b610200850183614b6f565b915060a0860151603f19808685030160e0870152614c798483614b6f565b935060c08801519150610100614c968188018463ffffffff169052565b60e08901519250610120614cae8189018560030b9052565b90890151925061014090614cc68883018560030b9052565b8901519250610160614cdc8882018560030b9052565b90890151925061018090614cf48883018560030b9052565b89015192506101a0614d0a8882018560030b9052565b818a01519350828887030185890152614d2386856143b8565b9550808a01519450505080868503016101e08701525050614d4482826143f2565b925050508260208301529392505050565b6000815160408452614d6a6040850182614338565b9050602083015184820360208601526107938282614377565b63ffffffff8316815260406020820152614da360408201835160ff169052565b60006020830151614dba606084018261ffff169052565b506040830151614dcd6080840182614324565b50606083015163ffffffff1660a083015260808301516101c060c08401819052614dfb610200850183614d55565b915060a0850151603f19808685030160e0870152614e198483614d55565b935060c08701519150610100614e368188018463ffffffff169052565b60e08801519250610120614e4e8189018560030b9052565b90880151925061014090614e668883018560030b9052565b8801519250610160614e7c8882018560030b9052565b90880151925061018090614e948883018560030b9052565b88015192506101a0614eaa8882018560030b9052565b818901519350828887030185890152614ec386856143b8565b9550808901519450505080868503016101e08701525050610c9982826143f2565b6000610180614ef48484516143ab565b6020830151614f0660208601826143ab565b506040830151614f1960408601826143ab565b506060830151614f2e606086018260ff169052565b506080830151614f43608086018260ff169052565b5060a0830151614f5860a086018260ff169052565b5060c0830151614f7060c086018263ffffffff169052565b5060e0830151614f8b60e08601826001600160401b03169052565b5061010083810151908501526101208084015190850152610140808401519085015261016080840151818601839052610c9983870182614941565b604081526000614fd96040830185614ee4565b90508260208301529392505050565b8051801515811461256557600080fd5b600082601f83011261500957600080fd5b81516020615019613f0d83613ec9565b8083825260208201915060208460051b87010193508684111561503b57600080fd5b602086015b84811015613f5957805161505381613d03565b8352918301918301615040565b805161256581613f64565b805161256581613d4f565b600082601f83011261508757600080fd5b81516020615097613f0d83613ec9565b8083825260208201915060208460051b8701019350868411156150b957600080fd5b602086015b84811015613f595780516150d181613d4f565b83529183019183016150be565b60006101c082840312156150f157600080fd5b6150f9613e5e565b905061510482614fe8565b815261511260208301614fe8565b602082015261512360408301614b47565b604082015260608201516001600160401b038082111561514257600080fd5b61514e85838601614ff8565b606084015261515f60808501615060565b608084015261517060a08501615060565b60a084015261518160c08501615060565b60c084015261519260e08501615060565b60e084015261010091506151a7828501615060565b8284015261012091506151bb82850161506b565b8284015261014091506151cf82850161506b565b8284015261016091508184015182840152610180915081840151828401526101a09150818401518181111561520357600080fd5b61520f86828701615076565b8385015250505092915050565b60006020828403121561522e57600080fd5b81516001600160401b0381111561524457600080fd5b613974848285016150de565b6000806040838503121561526357600080fd5b82516001600160401b0381111561527957600080fd5b615285858286016150de565b925050602083015161529681613d89565b809150509250929050565b60006101406001600160401b038d16835263ffffffff8c1660208401526152cb604084018c6146cf565b6001600160a01b038a1660608401526080830189905260ff881660a084015260c0830187905260e0830181905261530481840187614941565b905082810361010084015261531981866147fd565b915050826101208301529b9a5050505050505050505050565b60006020828403121561534457600080fd5b5051919050565b63ffffffff831681526040602082015260006107486040830184614429565b60006020828403121561537c57600080fd5b61047082614fe8565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038a811682526001600160401b038a16602083015263ffffffff8916604083015260ff8881166060840152908716608083015260a08201869052841660c082015260e08101839052610120610100820181905260009061542583820185614941565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261545a5761545a615435565b500490565b808202811582820484141761047357610473614b0b565b634e487b7160e01b600052603160045260246000fd5b63ffffffff8181168382160280821691908281146154ac576154ac614b0b565b505092915050565b63ffffffff818116838216019080821115612c8157612c81614b0b565b6000600182016154e3576154e3614b0b565b5060010190565b6000826154f9576154f9615435565b500690565b63ffffffff828116828216039080821115612c8157612c81614b0b565b6553544f52595f60d01b81526000825161553c81600685016020870161491d565b9190910160060192915050565b8051602080830151919081101561556a576000198160200360031b1b821691505b50919050565b600063ffffffff8084168061558757615587615435565b92169190910492915050565b80820260008212600160ff1b841416156155af576155af614b0b565b818105831482151761047357610473614b0b565b6000826155d2576155d2615435565b600160ff1b8214600019841416156155ec576155ec614b0b565b500590565b80820182811260008312801582168215821617156154ac576154ac614b0b565b600381810b9083900b01637fffffff8113637fffffff198212171561047357610473614b0b56fe22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bda2646970667358221220ed6baff2689d3600f717d13f4f4f0bcadb77980715026884bf574c8be211f94964736f6c63430008170033",
  "libraries": {
    "EventLib": "0x2b710976fCEd1f3178A84e9F93c9FD8467f5289B",
    "StoryLib": "0xf43ed1FcC891782f35d2Ce41ddf01074A0F428cF",
    "MonsterLib": "0x69d45bb1F4237b5A6fFe12Bca3Db0EeE2d06bB2D",
    "GOCLib": "0xFAB0E5C9DFEcE8279a852083E063cace18845A66"
  },
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "getObjectMeta(uint32)": {
        "details": "represent object registration if non zero values"
      },
      "getRandomObject(uint8[],uint32[],uint8,address,uint256)": {
        "details": "Chances in range 0-1e9"
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "revision()": {
        "details": "Contract upgrade counter"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "VERSION()": {
        "notice": "Version of the contract"
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}