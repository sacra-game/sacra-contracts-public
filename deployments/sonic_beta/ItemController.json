{
  "address": "0x2f42A5A13bFBF5BA191B9EdBbde6dd137bb446c4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "Broken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "Consumable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EquipForbiddenInDungeon",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorEquipForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ErrorForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        }
      ],
      "name": "ErrorHeroIsNotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ErrorNotDeployer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "ErrorNotHeroOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorPaused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "min",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "max",
          "type": "int32"
        }
      ],
      "name": "IncorrectMinMaxAttributeRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "IntOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "ItemIsAlreadyEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemMetaTypeChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemTypeChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotEOA",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "NotEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "OutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequirementsToItemAttributes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakeOffForbiddenInDungeon",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TooHighValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "UnknownItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroItemMetaType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroLevel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroLife",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "itemSlot",
          "type": "uint8"
        }
      ],
      "name": "Equipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "itemMetaType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "itemLevel",
                  "type": "uint8"
                },
                {
                  "internalType": "enum IItemController.ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "baseDurability",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "defaultRarity",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "manaCost",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "minRandomAttributes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxRandomAttributes",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "int32",
                      "name": "strength",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "dexterity",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "vitality",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "energy",
                      "type": "int32"
                    }
                  ],
                  "internalType": "struct IStatController.CoreAttributes",
                  "name": "requirements",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IItemController.ItemMeta",
              "name": "itemMeta",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "augmentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "augmentAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "commonAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "consumableAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "level",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "experience",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "life",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "mana",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "lifeChances",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStatController.ChangeableStats",
              "name": "consumableStats",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "casterAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "targetAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IItemController.AttackType",
                  "name": "aType",
                  "type": "uint8"
                },
                {
                  "internalType": "int32",
                  "name": "min",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "max",
                  "type": "int32"
                },
                {
                  "components": [
                    {
                      "internalType": "int32",
                      "name": "strength",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "dexterity",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "vitality",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "energy",
                      "type": "int32"
                    }
                  ],
                  "internalType": "struct IStatController.CoreAttributes",
                  "name": "attributeFactors",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IItemController.AttackInfo",
              "name": "genAttackInfo",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct IItemController.RegisterItemParams",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "ItemRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "ItemRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "itemSlot",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "TakenOff",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "consumedItemId",
          "type": "uint256"
        }
      ],
      "name": "augment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "augmentInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "casterAttributes",
      "outputs": [
        {
          "internalType": "int32[]",
          "name": "values",
          "type": "int32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ids",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "consumableAttributes",
      "outputs": [
        {
          "internalType": "int32[]",
          "name": "values",
          "type": "int32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ids",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "consumableStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "level",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "experience",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "life",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "mana",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lifeChances",
              "type": "uint32"
            }
          ],
          "internalType": "struct IStatController.ChangeableStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "items",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "itemSlots",
          "type": "uint8[]"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "equippedOn",
      "outputs": [
        {
          "internalType": "address",
          "name": "hero",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "genAttackInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IItemController.AttackType",
              "name": "aType",
              "type": "uint8"
            },
            {
              "internalType": "int32",
              "name": "min",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "max",
              "type": "int32"
            },
            {
              "components": [
                {
                  "internalType": "int32",
                  "name": "strength",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "dexterity",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "vitality",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "energy",
                  "type": "int32"
                }
              ],
              "internalType": "struct IStatController.CoreAttributes",
              "name": "attributeFactors",
              "type": "tuple"
            }
          ],
          "internalType": "struct IItemController.AttackInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "genAttributeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "mins",
              "type": "int32[]"
            },
            {
              "internalType": "int32[]",
              "name": "maxs",
              "type": "int32[]"
            },
            {
              "internalType": "uint32[]",
              "name": "chances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IItemController.ItemGenerateInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "genCasterAttributeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "mins",
              "type": "int32[]"
            },
            {
              "internalType": "int32[]",
              "name": "maxs",
              "type": "int32[]"
            },
            {
              "internalType": "uint32[]",
              "name": "chances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IItemController.ItemGenerateInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "genTargetAttributeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "int32[]",
              "name": "mins",
              "type": "int32[]"
            },
            {
              "internalType": "int32[]",
              "name": "maxs",
              "type": "int32[]"
            },
            {
              "internalType": "uint32[]",
              "name": "chances",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct IItemController.ItemGenerateInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "isAllowedToTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value_",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "itemAttackInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IItemController.AttackType",
              "name": "aType",
              "type": "uint8"
            },
            {
              "internalType": "int32",
              "name": "min",
              "type": "int32"
            },
            {
              "internalType": "int32",
              "name": "max",
              "type": "int32"
            },
            {
              "components": [
                {
                  "internalType": "int32",
                  "name": "strength",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "dexterity",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "vitality",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "energy",
                  "type": "int32"
                }
              ],
              "internalType": "struct IStatController.CoreAttributes",
              "name": "attributeFactors",
              "type": "tuple"
            }
          ],
          "internalType": "struct IItemController.AttackInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "itemAttributes",
      "outputs": [
        {
          "internalType": "int32[]",
          "name": "values",
          "type": "int32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ids",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "itemByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "itemInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IItemController.ItemRarity",
              "name": "rarity",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "augmentationLevel",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "durability",
              "type": "uint16"
            }
          ],
          "internalType": "struct IItemController.ItemInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "itemMeta",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "itemMetaType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "itemLevel",
              "type": "uint8"
            },
            {
              "internalType": "enum IItemController.ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "baseDurability",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "defaultRarity",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "manaCost",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "minRandomAttributes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxRandomAttributes",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "int32",
                  "name": "strength",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "dexterity",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "vitality",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "energy",
                  "type": "int32"
                }
              ],
              "internalType": "struct IStatController.CoreAttributes",
              "name": "requirements",
              "type": "tuple"
            }
          ],
          "internalType": "struct IItemController.ItemMeta",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "itemsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hero",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "biome",
          "type": "uint8"
        }
      ],
      "name": "reduceDurability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "itemMetaType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "itemLevel",
                  "type": "uint8"
                },
                {
                  "internalType": "enum IItemController.ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "baseDurability",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "defaultRarity",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "manaCost",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "minRandomAttributes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxRandomAttributes",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "int32",
                      "name": "strength",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "dexterity",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "vitality",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "energy",
                      "type": "int32"
                    }
                  ],
                  "internalType": "struct IStatController.CoreAttributes",
                  "name": "requirements",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IItemController.ItemMeta",
              "name": "itemMeta",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "augmentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "augmentAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "commonAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "values",
                  "type": "int32[]"
                }
              ],
              "internalType": "struct IGOC.AttributeGenerateInfo",
              "name": "consumableAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "level",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "experience",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "life",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "mana",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "lifeChances",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IStatController.ChangeableStats",
              "name": "consumableStats",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "casterAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "mins",
                  "type": "int32[]"
                },
                {
                  "internalType": "int32[]",
                  "name": "maxs",
                  "type": "int32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "chances",
                  "type": "uint32[]"
                }
              ],
              "internalType": "struct IItemController.ItemGenerateInfo",
              "name": "targetAttributes",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IItemController.AttackType",
                  "name": "aType",
                  "type": "uint8"
                },
                {
                  "internalType": "int32",
                  "name": "min",
                  "type": "int32"
                },
                {
                  "internalType": "int32",
                  "name": "max",
                  "type": "int32"
                },
                {
                  "components": [
                    {
                      "internalType": "int32",
                      "name": "strength",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "dexterity",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "vitality",
                      "type": "int32"
                    },
                    {
                      "internalType": "int32",
                      "name": "energy",
                      "type": "int32"
                    }
                  ],
                  "internalType": "struct IStatController.CoreAttributes",
                  "name": "attributeFactors",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IItemController.AttackInfo",
              "name": "genAttackInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct IItemController.RegisterItemParams",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "registerItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        }
      ],
      "name": "removeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "consumedItemId",
          "type": "uint256"
        }
      ],
      "name": "repairDurability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "score",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "items",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "itemSlots",
          "type": "uint8[]"
        }
      ],
      "name": "takeOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hero",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "itemSlot",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "broken",
          "type": "bool"
        }
      ],
      "name": "takeOffDirectly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "targetAttributes",
      "outputs": [
        {
          "internalType": "int32[]",
          "name": "values",
          "type": "int32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "ids",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "item",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "heroToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heroTokenId",
          "type": "uint256"
        }
      ],
      "name": "use",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9938a943fa5f47eeef34006121ffa8d114f16f42082869d216a751307f68b44",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0x2f42A5A13bFBF5BA191B9EdBbde6dd137bb446c4",
    "transactionIndex": 7,
    "gasUsed": "5190318",
    "logsBloom": "0x
    "blockHash": "0x0000559d000002edcef0b28395ada31e5f2c44831f5b86304cafd8a203929d5b",
    "transactionHash": "0xd9938a943fa5f47eeef34006121ffa8d114f16f42082869d216a751307f68b44",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 47271121,
        "transactionHash": "0xd9938a943fa5f47eeef34006121ffa8d114f16f42082869d216a751307f68b44",
        "address": "0x2f42A5A13bFBF5BA191B9EdBbde6dd137bb446c4",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x0000559d000002edcef0b28395ada31e5f2c44831f5b86304cafd8a203929d5b"
      }
    ],
    "blockNumber": 47271121,
    "cumulativeGasUsed": "5353665",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 19,
  "solcInputHash": "ab128610a613a12ee3464e154c92869f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"Broken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"Consumable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquipForbiddenInDungeon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorEquipForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ErrorForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"}],\"name\":\"ErrorHeroIsNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ErrorNotDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"ErrorNotHeroOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"min\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"max\",\"type\":\"int32\"}],\"name\":\"IncorrectMinMaxAttributeRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"IntOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"ItemIsAlreadyEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemMetaTypeChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemTypeChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"NotEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequirementsToItemAttributes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakeOffForbiddenInDungeon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TooHighValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"UnknownItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroItemMetaType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLevel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLife\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"itemSlot\",\"type\":\"uint8\"}],\"name\":\"Equipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"itemMetaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemLevel\",\"type\":\"uint8\"},{\"internalType\":\"enum IItemController.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"baseDurability\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"defaultRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"manaCost\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"minRandomAttributes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxRandomAttributes\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"requirements\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.ItemMeta\",\"name\":\"itemMeta\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"augmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"augmentAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"commonAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"consumableAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"life\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lifeChances\",\"type\":\"uint32\"}],\"internalType\":\"struct IStatController.ChangeableStats\",\"name\":\"consumableStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"casterAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"targetAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IItemController.AttackType\",\"name\":\"aType\",\"type\":\"uint8\"},{\"internalType\":\"int32\",\"name\":\"min\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"max\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"attributeFactors\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.AttackInfo\",\"name\":\"genAttackInfo\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct IItemController.RegisterItemParams\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"ItemRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"ItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"itemSlot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"TakenOff\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumedItemId\",\"type\":\"uint256\"}],\"name\":\"augment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"augmentInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"casterAttributes\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"consumableAttributes\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"consumableStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"life\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lifeChances\",\"type\":\"uint32\"}],\"internalType\":\"struct IStatController.ChangeableStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"items\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"itemSlots\",\"type\":\"uint8[]\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"equippedOn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hero\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"genAttackInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IItemController.AttackType\",\"name\":\"aType\",\"type\":\"uint8\"},{\"internalType\":\"int32\",\"name\":\"min\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"max\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"attributeFactors\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.AttackInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"genAttributeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"genCasterAttributeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"genTargetAttributeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"isAllowedToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value_\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"itemAttackInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IItemController.AttackType\",\"name\":\"aType\",\"type\":\"uint8\"},{\"internalType\":\"int32\",\"name\":\"min\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"max\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"attributeFactors\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.AttackInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"itemAttributes\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"itemByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"itemInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IItemController.ItemRarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"augmentationLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"durability\",\"type\":\"uint16\"}],\"internalType\":\"struct IItemController.ItemInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"itemMeta\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"itemMetaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemLevel\",\"type\":\"uint8\"},{\"internalType\":\"enum IItemController.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"baseDurability\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"defaultRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"manaCost\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"minRandomAttributes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxRandomAttributes\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"requirements\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.ItemMeta\",\"name\":\"meta\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hero\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"biome\",\"type\":\"uint8\"}],\"name\":\"reduceDurability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"itemMetaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemLevel\",\"type\":\"uint8\"},{\"internalType\":\"enum IItemController.ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"baseDurability\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"defaultRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"manaCost\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"minRandomAttributes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxRandomAttributes\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"requirements\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.ItemMeta\",\"name\":\"itemMeta\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"augmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"augmentAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"commonAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"}],\"internalType\":\"struct IGOC.AttributeGenerateInfo\",\"name\":\"consumableAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"life\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lifeChances\",\"type\":\"uint32\"}],\"internalType\":\"struct IStatController.ChangeableStats\",\"name\":\"consumableStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"casterAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"int32[]\",\"name\":\"mins\",\"type\":\"int32[]\"},{\"internalType\":\"int32[]\",\"name\":\"maxs\",\"type\":\"int32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"chances\",\"type\":\"uint32[]\"}],\"internalType\":\"struct IItemController.ItemGenerateInfo\",\"name\":\"targetAttributes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IItemController.AttackType\",\"name\":\"aType\",\"type\":\"uint8\"},{\"internalType\":\"int32\",\"name\":\"min\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"max\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"int32\",\"name\":\"strength\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"dexterity\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"vitality\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"energy\",\"type\":\"int32\"}],\"internalType\":\"struct IStatController.CoreAttributes\",\"name\":\"attributeFactors\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.AttackInfo\",\"name\":\"genAttackInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IItemController.RegisterItemParams\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"registerItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumedItemId\",\"type\":\"uint256\"}],\"name\":\"repairDurability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"score\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"items\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"itemSlots\",\"type\":\"uint8[]\"}],\"name\":\"takeOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hero\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"itemSlot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"broken\",\"type\":\"bool\"}],\"name\":\"takeOffDirectly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"targetAttributes\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"values\",\"type\":\"int32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"heroToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heroTokenId\",\"type\":\"uint256\"}],\"name\":\"use\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"destroy(address,uint256)\":{\"details\":\"Some stories can destroy items\"},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"registerItem(address,((uint8,uint8,uint8,uint16,uint8,uint32,uint8,uint8,(int32,int32,int32,int32)),address,uint256,(uint8[],int32[],int32[],uint32[]),(uint8[],int32[]),(uint32,uint32,uint32,uint32,uint32),(uint8[],int32[],int32[],uint32[]),(uint8[],int32[],int32[],uint32[]),(uint8,int32,int32,(int32,int32,int32,int32))))\":{\"details\":\"It's possible to reduce size of the contract on 1kb by replacing calldata=>memory (+2k gas)\"},\"repairDurability(address,uint256,uint256)\":{\"details\":\"Repair durability.\"},\"revision()\":{\"details\":\"Contract upgrade counter\"},\"takeOffDirectly(address,uint256,address,uint256,uint8,address,bool)\":{\"details\":\"Some stories can manipulate items\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"VERSION()\":{\"notice\":\"Version of the contract\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ItemController.sol\":\"ItemController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/core/ItemController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../proxy/Controllable.sol\\\";\\nimport \\\"../relay/ERC2771Context.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"./../lib/ItemStatsLib.sol\\\";\\nimport \\\"./../lib/ScoreLib.sol\\\";\\nimport \\\"./../lib/StatLib.sol\\\";\\n\\ncontract ItemController is Controllable, ERC2771Context, IItemController {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using PackingLib for address;\\n\\n  //region ------------------------ CONSTANTS\\n\\n  /// @notice Version of the contract\\n  string public constant VERSION = \\\"1.0.1\\\";\\n  //endregion ------------------------ CONSTANTS\\n\\n  //region ------------------------ INITIALIZER\\n\\n  function init(address controller_) external initializer {\\n    __Controllable_init(controller_);\\n  }\\n  //endregion ------------------------ INITIALIZER\\n\\n  //region ------------------------ VIEWS\\n  function itemByIndex(uint idx) external view returns (address) {\\n    return ItemStatsLib.itemByIndex(idx);\\n  }\\n\\n  function itemsLength() external view returns (uint) {\\n    return ItemStatsLib.itemsLength();\\n  }\\n\\n  function itemMeta(address item) external view override returns (ItemMeta memory meta) {\\n    return ItemStatsLib.itemMeta(item);\\n  }\\n\\n  function augmentInfo(address item) external view override returns (address token, uint amount) {\\n    return ItemStatsLib.augmentInfo(item);\\n  }\\n\\n  function genAttributeInfo(address item) external view override returns (ItemGenerateInfo memory info) {\\n    return ItemStatsLib.genAttributeInfo(item);\\n  }\\n\\n  function genCasterAttributeInfo(address item) external view override returns (ItemGenerateInfo memory info) {\\n    return ItemStatsLib.genCasterAttributeInfo(item);\\n  }\\n\\n  function genTargetAttributeInfo(address item) external view override returns (ItemGenerateInfo memory info) {\\n    return ItemStatsLib.genTargetAttributeInfo(item);\\n  }\\n\\n  function genAttackInfo(address item) external view override returns (AttackInfo memory info) {\\n    return ItemStatsLib.genAttackInfo(item);\\n  }\\n\\n  function itemInfo(address item, uint itemId) external view override returns (ItemInfo memory info) {\\n    return ItemStatsLib.itemInfo(item, itemId);\\n  }\\n\\n  function equippedOn(address item, uint itemId) external view override returns (address hero, uint heroId) {\\n    return ItemStatsLib.equippedOn(item, itemId);\\n  }\\n\\n  function itemAttributes(address item, uint itemId) external view override returns (int32[] memory values, uint8[] memory ids) {\\n    return ItemStatsLib.itemAttributes(item, itemId);\\n  }\\n\\n  function consumableAttributes(address item) external view override returns (int32[] memory values, uint8[] memory ids) {\\n    return ItemStatsLib.consumableAttributes(item);\\n  }\\n\\n  function consumableStats(address item) external view override returns (IStatController.ChangeableStats memory stats) {\\n    return ItemStatsLib.consumableStats(item);\\n  }\\n\\n  function casterAttributes(address item, uint itemId) external view override returns (int32[] memory values, uint8[] memory ids) {\\n    return ItemStatsLib.casterAttributes(item, itemId);\\n  }\\n\\n  function targetAttributes(address item, uint itemId) external view override returns (int32[] memory values, uint8[] memory ids) {\\n    return ItemStatsLib.targetAttributes(item, itemId);\\n  }\\n\\n  function itemAttackInfo(address item, uint itemId) external view override returns (AttackInfo memory info) {\\n    return ItemStatsLib.itemAttackInfo(item, itemId);\\n  }\\n\\n  function score(address item, uint itemId) external view override returns (uint) {\\n    return ItemStatsLib.score(item, itemId);\\n  }\\n\\n  function isAllowedToTransfer(address item, uint itemId) external view override returns (bool) {\\n    return ItemStatsLib.isAllowedToTransfer(item, itemId);\\n  }\\n  //endregion ------------------------ VIEWS\\n\\n  //region ------------------------ GOV ACTIONS\\n\\n  /// @dev It's possible to reduce size of the contract on 1kb by replacing calldata=>memory (+2k gas)\\n  function registerItem(address item, RegisterItemParams calldata info) external {\\n    ItemStatsLib.registerItem(IController(controller()), _msgSender(), item, info);\\n  }\\n\\n  function removeItem(address item) external {\\n    ItemStatsLib.removeItem(IController(controller()), _msgSender(), item);\\n  }\\n  //endregion ------------------------ GOV ACTIONS\\n\\n  //region ------------------------ DUNGEON ACTIONS\\n\\n  function mint(address item, address recipient) external override returns (uint itemId) {\\n    return ItemStatsLib.mintNewItem(IController(controller()), msg.sender, item, recipient);\\n  }\\n\\n  function reduceDurability(address hero, uint heroId, uint8 biome) external override {\\n    return ItemStatsLib.reduceEquippedItemsDurability(IController(controller()), _msgSender(), hero, heroId, biome);\\n  }\\n\\n  /// @dev Some stories can destroy items\\n  function destroy(address item, uint itemId) external override {\\n    ItemStatsLib.destroy(IController(controller()), _msgSender(), item, itemId);\\n  }\\n\\n  /// @dev Some stories can manipulate items\\n  function takeOffDirectly(\\n    address item,\\n    uint itemId,\\n    address hero,\\n    uint heroId,\\n    uint8 itemSlot,\\n    address destination,\\n    bool broken\\n  ) external override {\\n    ItemStatsLib.takeOffDirectly(\\n      IController(controller()),\\n      item,\\n      itemId,\\n      hero,\\n      heroId,\\n      itemSlot,\\n      destination,\\n      broken\\n    );\\n  }\\n  //endregion ------------------------ DUNGEON ACTIONS\\n\\n  //region ------------------------ EOA ACTIONS\\n  // an item must not be equipped\\n\\n  function equip(\\n    address heroToken,\\n    uint heroTokenId,\\n    address[] calldata items,\\n    uint[] calldata tokenIds,\\n    uint8[] calldata itemSlots\\n  ) external {\\n    ItemStatsLib.equipMany(\\n      _isNotSmartContract(),\\n      IController(controller()),\\n      _msgSender(),\\n      heroToken,\\n      heroTokenId,\\n      items,\\n      tokenIds,\\n      itemSlots\\n    );\\n  }\\n\\n  function takeOff(\\n    address heroToken,\\n    uint heroTokenId,\\n    address[] calldata items,\\n    uint[] calldata tokenIds,\\n    uint8[] calldata itemSlots\\n  ) external {\\n    ItemStatsLib.takeOffMany(\\n      _isNotSmartContract(),\\n      IController(controller()),\\n      _msgSender(),\\n      heroToken,\\n      heroTokenId,\\n      items,\\n      tokenIds,\\n      itemSlots\\n    );\\n  }\\n\\n  /// @dev Repair durability.\\n  function repairDurability(address item, uint itemId, uint consumedItemId) external {\\n    ItemStatsLib.repairDurability(\\n      _isNotSmartContract(),\\n      IController(controller()),\\n      _msgSender(),\\n      item,\\n      itemId,\\n      consumedItemId\\n    );\\n  }\\n\\n  function augment(address item, uint itemId, uint consumedItemId) external {\\n    ItemStatsLib.augment(\\n      _isNotSmartContract(),\\n      IController(controller()),\\n      _msgSender(),\\n      item,\\n      itemId,\\n      consumedItemId\\n    );\\n  }\\n\\n  function use(address item, uint tokenId, address heroToken, uint heroTokenId) external {\\n    ItemStatsLib.use(\\n      _isNotSmartContract(),\\n      IController(controller()),\\n      _msgSender(),\\n      item,\\n      tokenId,\\n      heroToken,\\n      heroTokenId\\n    );\\n  }\\n  //endregion ------------------------ EOA ACTIONS\\n\\n}\\n\",\"keccak256\":\"0x0e57bbf5f97674841d2ea94f1670b62c83788b9df4d929f02a349ab6336fc1dd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\n/// @notice All errors of the app\\ninterface IAppErrors {\\n  error ZeroAddress();\\n  error ZeroValueNotAllowed();\\n  error LengthsMismatch();\\n  error NotEnoughBalance();\\n\\n  //region Restrictions\\n  error ErrorNotDeployer(address sender);\\n  error ErrorNotGoc();\\n  error NotGovernance(address sender);\\n  error ErrorOnlyEoa();\\n  error NotEOA(address sender);\\n  error ErrorForbidden(address sender);\\n  error ErrorNotItemController(address sender);\\n  error ErrorNotHeroController(address sender);\\n  error ErrorNotDungeonFactory(address sender);\\n  error ErrorNotObjectController(address sender);\\n  //endregion Restrictions\\n\\n  //region Hero\\n  error ErrorHeroIsNotRegistered(address heroToken);\\n  error ErrorHeroIsDead(address heroToken, uint heroTokenId);\\n  error ErrorHeroNotInDungeon();\\n  error HeroInDungeon();\\n  error ErrorNotHeroOwner(address heroToken, address msgSender);\\n  error Staked(address heroToken, uint heroId);\\n  error HeroTokensVaultAlreadySet();\\n  error NameTaken();\\n  error TooBigName();\\n  error WrongSymbolsInTheName();\\n  error NoPayToken(address token, uint payTokenAmount);\\n  error AlreadyHaveReinforcement();\\n  //endregion Hero\\n\\n  //region Dungeon\\n  error ErrorDungeonIsFreeAlready();\\n  error ErrorNoEligibleDungeons();\\n  error ErrorDungeonBusy();\\n  error ErrorNoDungeonsForBiome(uint8 heroBiome);\\n  error ErrorDungeonCompleted();\\n  error ErrorAlreadyInDungeon();\\n  error NotEnoughTokens(uint balance, uint expectedBalance);\\n  error DungeonAlreadySpecific(uint16 dungNum);\\n  error DungeonAlreadySpecific2(uint16 dungNum);\\n  error WrongSpecificDungeon();\\n  //endregion Dungeon\\n\\n  //region Items\\n  error ErrorItemNotEligibleForTheSlot(uint itemType, uint8 itemSlot);\\n  error ErrorItemSlotBusyHand(uint8 slot);\\n  error ErrorItemSlotBusy();\\n  error ErrorItemNotInSlot();\\n  error ErrorConsumableItemIsUsed(address item);\\n  error ErrorCannotRemoveItemFromMap();\\n  error ItemEquipped();\\n  error ZeroItemMetaType();\\n  error ZeroLevel();\\n  error ItemTypeChanged();\\n  error ItemMetaTypeChanged();\\n  error UnknownItem(address item);\\n  error ItemIsAlreadyEquipped(address item);\\n  error ErrorEquipForbidden();\\n  error EquipForbiddenInDungeon();\\n  error TakeOffForbiddenInDungeon();\\n  error Consumable(address item);\\n  error NotConsumable(address item);\\n  error Broken(address item);\\n  error ZeroLife();\\n  error RequirementsToItemAttributes();\\n  error NotEquipped(address item);\\n  error ZeroDurability();\\n  error ZeroAugmentation();\\n  error TooHighAgLevel(uint8 augmentationLevel);\\n  error UseForbiddenZeroPayToken();\\n  error IncorrectMinMaxAttributeRange(int32 min, int32 max);\\n  error SameIdsNotAllowed();\\n  //endregion Items\\n\\n  //region Stages\\n  error ErrorWrongStage(uint stage);\\n  error ErrorNotStages();\\n  //endregion Stages\\n\\n  //region Level\\n  error ErrorWrongLevel(uint heroLevel);\\n  error ErrorLevelTooLow(uint heroLevel);\\n  error ErrorHeroLevelStartFrom1();\\n  error ErrorWrongLevelUpSum();\\n  error ErrorMaxLevel();\\n  //endregion Level\\n\\n  //region Treasure\\n  error ErrorNotValidTreasureToken(address treasureToken);\\n  //endregion Treasure\\n\\n  //region State\\n  error ErrorPaused();\\n  error ErrorNotReady();\\n  error ErrorNotObject1();\\n  error ErrorNotObject2();\\n  error ErrorNotCompleted();\\n  //endregion State\\n\\n  //region Biome\\n  error ErrorNotBiome();\\n  error ErrorIncorrectBiome(uint biome);\\n  error TooHighBiome(uint biome);\\n  //endregion Biome\\n\\n  //region Misc\\n  error ErrorWrongMultiplier(uint multiplier);\\n  error ErrorNotEnoughMana(uint32 mana, uint requiredMana);\\n  error ErrorExperienceMustNotDecrease();\\n  error ErrorNotEnoughExperience();\\n  error ErrorNotChances();\\n  error ErrorNotEligible(address heroToken, uint16 dungNum);\\n  error ErrorZeroKarmaNotAllowed();\\n  //endregion Misc\\n\\n  //region GOC\\n  error GenObjectIdBiomeOverflow(uint8 biome);\\n  error GenObjectIdSubTypeOverflow(uint subType);\\n  error GenObjectIdIdOverflow(uint id);\\n  error UnknownObjectTypeGoc1(uint8 objectType);\\n  error UnknownObjectTypeGoc2(uint8 objectType);\\n  error UnknownObjectTypeGocLib1(uint8 objectType);\\n  error UnknownObjectTypeGocLib2(uint8 objectType);\\n  error UnknownObjectTypeForSubtype(uint8 objectSubType);\\n  error FightDelay();\\n  error ZeroChance();\\n  error TooHighChance(uint32 chance);\\n  error TooHighRandom(uint random);\\n  error EmptyObjects();\\n  error ObjectNotFound();\\n  error WrongGetObjectTypeInput();\\n  error WrongChances(uint32 chances, uint32 maxChances);\\n  //endregion GOC\\n\\n  //region Story\\n  error PageNotRemovedError(uint pageId);\\n  error NotItem1();\\n  error NotItem2();\\n  error NotRandom(uint32 random);\\n  error NotHeroData();\\n  error NotGlobalData();\\n  error ZeroStoryIdRemoveStory();\\n  error ZeroStoryIdStoryAction();\\n  error ZeroStoryIdAction();\\n  error NotEnoughAmount(uint balance, uint requiredAmount);\\n  error NotAnswer();\\n  error AnswerStoryIdMismatch(uint16 storyId, uint16 storyIdFromAnswerHash);\\n  error AnswerPageIdMismatch(uint16 pageId, uint16 pageIdFromAnswerHash);\\n  //endregion Story\\n\\n  //region FightLib\\n  error NotMagic();\\n  error NotAType(uint atype);\\n  //endregion FightLib\\n\\n  //region MonsterLib\\n  error NotYourDebuffItem();\\n  error UnknownAttackType(uint attackType);\\n  error NotYourAttackItem();\\n  error NotYourBuffItem();\\n  //endregion MonsterLib\\n\\n  //region GameToken\\n  error ApproveToZeroAddress();\\n  error MintToZeroAddress();\\n  error TransferToZeroAddress();\\n  error TransferAmountExceedsBalance(uint balance, uint value);\\n  error InsufficientAllowance();\\n  error BurnAmountExceedsBalance();\\n  error NotMinter(address sender);\\n  //endregion GameToken\\n\\n  //region NFT\\n  error TokenTransferNotAllowed();\\n  error IdOverflow(uint id);\\n  error NotExistToken(uint tokenId);\\n  error EquippedItemIsNotAllowedToTransfer(uint tokenId);\\n  //endregion NFT\\n\\n  //region CalcLib\\n  error TooLowX(uint x);\\n  //endregion CalcLib\\n\\n  //region Controller\\n  error NotFutureGovernance(address sender);\\n  //endregion Controller\\n\\n  //region Oracle\\n  error OracleWrongInput();\\n  //region Oracle\\n\\n  //region ReinforcementController\\n  error AlreadyStaked();\\n  error MaxFee(uint8 fee);\\n  error StakeHeroNotStats();\\n  error NotStaked();\\n  error NoStakedHeroes();\\n  //region ReinforcementController\\n\\n  //region SponsoredHero\\n  error InvalidHeroClass();\\n  error ZeroAmount();\\n  error InvalidProof();\\n  error NoHeroesAvailable();\\n  error AlreadyRegistered();\\n  //endregion SponsoredHero\\n\\n  //region SacraRelay\\n  error SacraRelayNotOwner();\\n  error SacraRelayNotDelegator();\\n  error SacraRelayNotOperator();\\n  error SacraRelayInvalidChainId(uint callChainId, uint blockChainId);\\n  error SacraRelayInvalidNonce(uint callNonce, uint txNonce);\\n  error SacraRelayDeadline();\\n  error SacraRelayDelegationExpired();\\n  error SacraRelayNotAllowed();\\n  error SacraRelayInvalidSignature();\\n  /// @notice This error is generated when custom error is caught\\n  /// There is no info about custom error in SacraRelay\\n  /// but you can decode custom error by selector, see tests\\n  error SacraRelayNoErrorSelector(bytes4 selector, string tracingInfo);\\n  /// @notice This error is generated when custom error is caught\\n  /// There is no info about custom error in SacraRelay\\n  /// but you can decode custom error manually from {errorBytes} as following:\\n  /// if (keccak256(abi.encodeWithSignature(\\\"MyError()\\\")) == keccak256(errorBytes)) { ... }\\n  error SacraRelayUnexpectedReturnData(bytes errorBytes, string tracingInfo);\\n  error SacraRelayCallToNotContract(address notContract, string tracingInfo);\\n  //endregion SacraRelay\\n\\n  //region Misc\\n  error UnknownHeroClass(uint heroClass);\\n  error AbsDiff(int32 a, int32 b);\\n  //region Misc\\n}\\n\",\"keccak256\":\"0xc27d17dbfa76c8ebb21557d83e2ca966cfdf23bff69d6f632c0bf000ec6614b6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IApplicationEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"./IGOC.sol\\\";\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IDungeonFactory.sol\\\";\\nimport \\\"./IStoryController.sol\\\";\\nimport \\\"./IFightCalculator.sol\\\";\\n\\n/// @notice All events of the app\\ninterface IApplicationEvents {\\n\\n  //region ------------------ StatController\\n  event HeroItemSlotChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint itemType,\\n    uint itemSlot,\\n    address itemToken,\\n    uint itemTokenId,\\n    bool equip,\\n    address caller\\n  );\\n  event CurrentStatsChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    IStatController.ChangeableStats change,\\n    bool increase,\\n    address caller\\n  );\\n  event BonusAttributesChanged(\\n    address heroToken,\\n    uint heroTokenId,\\n    bool add,\\n    bool temporally,\\n    address caller\\n  );\\n  event TemporallyAttributesCleared(address heroToken, uint heroTokenId, address caller);\\n  event NewHeroInited(address heroToken, uint heroTokenId, IStatController.ChangeableStats stats);\\n  event LevelUp(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint heroClass,\\n    IStatController.CoreAttributes change\\n  );\\n  event ConsumableUsed(address heroToken, uint heroTokenId, address item);\\n  event RemoveConsumableUsage(address heroToken, uint heroTokenId, address item);\\n  event HeroCustomDataChanged(address token, uint tokenId, bytes32 index, uint value);\\n  event GlobalCustomDataChanged(bytes32 index, uint value);\\n  //endregion ------------------ StatController\\n\\n  //region ------------------ DungeonFactoryController\\n  event DungeonLaunched(\\n    uint16 dungeonLogicNum,\\n    uint64 dungeonId,\\n    address heroToken,\\n    uint heroTokenId,\\n    address treasuryToken,\\n    uint treasuryAmount\\n  );\\n\\n  event BossCompleted(uint32 objectId, uint biome, address hero, uint heroId);\\n  event FreeDungeonAdded(uint8 biome, uint64 dungeonId);\\n\\n  event ObjectOpened(uint64 dungId, address hero, uint id, uint32 objId, uint iteration, uint currentStage);\\n  event Clear(uint64 dungId);\\n\\n  event DungeonLogicRegistered(uint16 dungLogicId, IDungeonFactory.DungeonGenerateInfo info);\\n  event DungeonLogicRemoved(uint16 dungLogicId);\\n  event DungeonSpecificLogicRegistered(uint16 dungLogicId, uint biome, uint heroCls);\\n  event DungeonSpecificLogicRemoved(uint16 dungLogicId, uint heroLvl, uint heroCls);\\n  event DungeonRegistered(uint16 dungLogicId, uint64 dungeonId);\\n  event DungeonRemoved(uint16 dungLogicId, uint64 dungeonId);\\n  event MinLevelForTreasuryChanged(address token, uint level);\\n\\n  event ObjectAction(\\n    uint64 dungId,\\n    IGOC.ActionResult result,\\n    uint currentStage,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint newStage\\n  );\\n  /// @notice On add the item to the dungeon\\n  event AddTreasuryItem(uint64 dungId, address itemAdr, uint itemId);\\n  event AddTreasuryToken(uint64 dungId, address token, uint amount);\\n  event ClaimToken(uint64 dungId, address token, uint amount);\\n  event ClaimItem(uint64 dungId, address token, uint id);\\n\\n  event Entered(uint64 dungId, address hero, uint id);\\n  event DungeonCompleted(uint16 dungLogicNum, uint64 dungId, address hero, uint heroId);\\n  event Exit(uint64 dungId, bool claim);\\n  event FreeDungeonRemoved(uint8 biome, uint64 dungeonId);\\n  event HeroCurrentDungeonChanged(address hero, uint heroId, uint64 dungeonId);\\n  //endregion ------------------ DungeonFactoryController\\n\\n  //region ------------------ GameObjectController\\n  event EventRegistered(uint32 objectId, IGOC.EventRegInfo eventRegInfo);\\n  event StoryRegistered(uint32 objectId, uint16 storyId);\\n  event MonsterRegistered(uint32 objectId, IGOC.MonsterGenInfo monsterGenInfo);\\n  event ObjectRemoved(uint32 objectId);\\n  event ObjectResultEvent(\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    IGOC.ObjectType objectType,\\n    address hero,\\n    uint heroId,\\n    uint8 stageId,\\n    uint iteration,\\n    bytes data,\\n    IGOC.ActionResult result,\\n    uint salt\\n  );\\n  //endregion ------------------ GameObjectController\\n\\n  //region ------------------ StoryController\\n  event SetBurnItemsMeta(uint storyId, IStoryController.AnswerBurnRandomItemMeta meta);\\n  event SetNextObjRewriteMeta(uint storyId, IStoryController.NextObjRewriteMeta meta);\\n  event SetAnswersMeta(uint storyId, uint16[] answerPageIds, uint8[] answerHeroClasses, uint16[] answerIds);\\n  event SetAnswerNextPageMeta(uint storyId, IStoryController.AnswerNextPageMeta meta);\\n  event SetAnswerAttributeRequirements(uint storyId, IStoryController.AnswerAttributeRequirementsMeta meta);\\n  event SetAnswerItemRequirements(uint storyId, IStoryController.AnswerItemRequirementsMeta meta);\\n  event SetAnswerTokenRequirementsMeta(uint storyId, IStoryController.AnswerTokenRequirementsMeta meta);\\n  event SetAnswerAttributes(uint storyId, IStoryController.AnswerAttributesMeta meta);\\n  event SetAnswerHeroCustomDataRequirementMeta(uint storyId, IStoryController.AnswerCustomDataMeta meta);\\n  event SetAnswerGlobalCustomDataRequirementMeta(uint storyId, IStoryController.AnswerCustomDataMeta meta);\\n  event SetSuccessInfo(uint storyId, IStoryController.AnswerResultMeta meta);\\n  event SetFailInfo(uint storyId, IStoryController.AnswerResultMeta meta);\\n  event SetCustomDataResult(uint storyId, IStoryController.AnswerCustomDataResultMeta meta, IStoryController.CustomDataResult _type);\\n  event StoryCustomDataRequirements(uint storyId, bytes32 requiredCustomDataIndex, uint requiredCustomDataMinValue, uint requiredCustomDataMaxValue, bool requiredCustomDataIsHero);\\n  event StoryRequiredLevel(uint storyId, uint requiredLevel);\\n  event StoryFinalized(uint32 objectId, uint storyId);\\n  event StoryRemoved(uint32 objectId, uint storyId);\\n\\n  event ItemBurned(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint objectId,\\n    address nftToken,\\n    uint nftId,\\n    uint stageId,\\n    uint iteration\\n  );\\n\\n  event NotEquippedItemBurned(\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint storyId,\\n    address nftToken,\\n    uint nftId,\\n    uint stageId,\\n    uint iteration\\n  );\\n\\n  event StoryChangeAttributes(\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint64 dungeonId,\\n    uint storyId,\\n    uint stageId,\\n    uint iteration,\\n    int32[] attributes\\n  );\\n  //endregion ------------------ StoryController\\n\\n  //region ------------------------ HeroController\\n  event HeroTokensVaultSet(address value);\\n  event HeroRegistered(address hero, uint8 heroClass, address payToken, uint payAmount);\\n  event HeroCreated(address hero, uint heroId, string name, address owner, string refCode);\\n  event BiomeChanged(address hero, uint heroId, uint8 biome);\\n  event LevelUp(address hero, uint heroId, address owner, IStatController.CoreAttributes change);\\n  event ReinforcementAsked(address hero, uint heroId, address helpHeroToken, uint helpHeroId);\\n  event ReinforcementReleased(address hero, uint heroId, address helperToken, uint helperId);\\n  event Killed(address hero, uint heroId, address killer, bytes32[] dropItems, uint dropTokenAmount);\\n  //endregion ------------------------ HeroController\\n\\n  //region ------------------------ FightLib\\n  event FightResultProcessed(\\n    address sender,\\n    IFightCalculator.FightInfoInternal result,\\n    IFightCalculator.FightCall callData,\\n    uint iteration\\n  );\\n  //endregion ------------------------ FightLib\\n\\n  //region ------------------------ Oracle\\n  event Random(uint number, uint max);\\n  //endregion ------------------------ Oracle\\n\\n  //region ------------------------ Controller\\n  event OfferGovernance(address newGov);\\n  event GovernanceAccepted(address gov);\\n  event StatControllerChanged(address value);\\n  event StoryControllerChanged(address value);\\n  event GameObjectControllerChanged(address value);\\n  event ReinforcementControllerChanged(address value);\\n  event OracleChanged(address value);\\n  event TreasuryChanged(address value);\\n  event ItemControllerChanged(address value);\\n  event HeroControllerChanged(address value);\\n  event GameTokenChanged(address value);\\n  event DungeonFactoryChanged(address value);\\n  event ProxyUpdated(address proxy, address logic);\\n  event Claimed(address token, uint amount);\\n  event TokenStatusChanged(address token, bool status);\\n  //endregion ------------------------ Controller\\n\\n  //region ------------------------ HeroTokensVault\\n  event Process(address token, uint amount, address from, uint toBurn, uint toTreasury, uint toGov);\\n  //endregion ------------------------ HeroTokensVault\\n\\n  //region ------------------------ ReinforcementController\\n  event HeroStaked(address heroToken, uint heroId, uint biome, uint score);\\n  event HeroWithdraw(address heroToken, uint heroId);\\n  event HeroAsk(address heroToken, uint heroId);\\n  event TokenRewardRegistered(address heroToken, uint heroId, address token, uint amountAdded, uint totalAmount);\\n  event NftRewardRegistered(address heroToken, uint heroId, address token, uint id);\\n  event ToHelperRatioChanged(uint value);\\n  event ClaimedToken(address heroToken, uint heroId, address token, uint amount, address recipient);\\n  event ClaimedItem(address heroToken, uint heroId, address item, uint itemId, address recipient);\\n  event MinLevelChanged(uint8 value);\\n  event MinLifeChancesChanged(uint value);\\n  //endregion ------------------------ ReinforcementController\\n\\n  //region ------------------------ Treasury\\n  event AssetsSentToDungeon(address dungeon, address token, uint amount);\\n  //endregion ------------------------ Treasury\\n\\n  //region ------------------------ EventLib\\n  event EventResult(uint64 dungeonId, address heroToken, uint heroTokenId, uint8 stageId, IStatController.ActionInternalInfo gen, uint iteration);\\n  //endregion ------------------------ EventLib\\n\\n  //region ------------------------ ItemStatsLib\\n  event ItemRegistered(address item, IItemController.RegisterItemParams info);\\n  event ItemRemoved(address item);\\n  event NewItemMinted(address item, uint itemId, IItemController.MintInfo info);\\n  event Equipped(address item, uint itemId, address heroToken, uint heroTokenId, uint8 itemSlot);\\n  event TakenOff(address item, uint itemId, address heroToken, uint heroTokenId, uint8 itemSlot, address destination);\\n  event ItemRepaired(address item, uint itemId, uint consumedItemId, uint16 baseDurability);\\n  event Augmented(address item, uint itemId, uint consumedItemId, uint8 augLevel, IItemController.AugmentInfo info);\\n  event NotAugmented(address item, uint itemId, uint consumedItemId, uint8 augLevel);\\n  event ReduceDurability(address item, uint itemId, uint newDurability);\\n  event Used(address item, uint tokenId, address heroToken, uint heroTokenId);\\n  event Destroyed(address item, uint itemId);\\n  //endregion ------------------------ ItemStatsLib\\n\\n  //region ------------------------ NFT and GameToken (only custom events, not ERC20/721 standards)\\n  event ChangePauseStatus(bool value);\\n  event MinterChanged(address value);\\n\\n  event UniqueUriChanged(uint id, string uri);\\n  event BaseUriChanged(string uri);\\n\\n  event HeroMinted(uint heroId);\\n  event HeroBurned(uint heroId);\\n  event HeroUriByStatusChanged(string uri, uint statusLvl);\\n\\n  event ItemMinted(uint tokenId);\\n  event ItemBurned(uint tokenId);\\n  event UriByRarityChanged(string uri, uint rarity);\\n  event SponsoredHeroCreated(address msgSender, address heroAddress, uint heroId, string heroName);\\n  //endregion ------------------------ NFT and GameToken (only custom events, not ERC20/721 standards)\\n}\\n\",\"keccak256\":\"0x59c0edaa6af913073e0555125fcde7caac611a153b6905a101d9373b49d76705\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IControllable {\\n\\n  function VERSION() external pure returns (string memory);\\n\\n  function revision() external view returns (uint);\\n\\n  function previousImplementation() external view returns (address);\\n\\n  function isController(address contract_) external view returns (bool);\\n\\n  function isGovernance(address contract_) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0x296b634c46b5d178b2408523fcf569ed370e20a719b7b3f2183b278631b94f65\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IController {\\n\\n  function governance() external view returns (address);\\n\\n  function statController() external view returns (address);\\n\\n  function storyController() external view returns (address);\\n\\n  function gameObjectController() external view returns (address);\\n\\n  function reinforcementController() external view returns (address);\\n\\n  function oracle() external view returns (address);\\n\\n  function treasury() external view returns (address);\\n\\n  function itemController() external view returns (address);\\n\\n  function heroController() external view returns (address);\\n\\n  function dungeonFactory() external view returns (address);\\n\\n  function gameToken() external view returns (address);\\n\\n  function validTreasuryTokens(address token) external view returns (bool);\\n\\n  function isDeployer(address adr) external view returns (bool);\\n\\n  function onPause() external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x277b18bde00efe407b007268d6a3b6524498d1616bf9ed9521980dd0048637dc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDungeonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"../openzeppelin/EnumerableMap.sol\\\";\\n\\ninterface IDungeonFactory {\\n\\n  /// @custom:storage-location erc7201:dungeon.factory.main\\n  struct MainState {\\n    /// @dev biome => dungeonLaunchedId\\n    mapping(uint => EnumerableSet.UintSet) freeDungeons;\\n    /// @dev hero + heroId + biome (packMapObject) -> completed\\n    mapping(bytes32 => bool) bossCompleted;\\n    /// @dev hero + heroId + dungNum (packDungeonKey) -> completed\\n    mapping(bytes32 => bool) specificDungeonCompleted;\\n    /// @notice Max biome completed by the hero\\n    /// @dev hero + heroId (nftPacked) -> max biome completed\\n    mapping(bytes32 => uint8) maxBiomeCompleted;\\n    /// @notice which dungeon the hero is currently in\\n    /// @dev hero+id => current DungeonId\\n    mapping(bytes32 => uint64) heroCurrentDungeon;\\n\\n    // ---\\n\\n    /// @notice Specific dungeon for the given pair of hero level + hero class\\n    ///         ALl specific dungeons are listed also in allSpecificDungeons\\n    /// @dev packUint8Array(specReqBiome, specReqHeroClass) => dungNum\\n    mapping(bytes32 => uint16) dungeonSpecific;\\n    /// @dev contains all specific dungNum for easy management\\n    EnumerableSet.UintSet allSpecificDungeons;\\n    /// @dev biome => dungNum\\n    mapping(uint8 => EnumerableSet.UintSet) dungeonsLogicByBiome;\\n\\n    // ---\\n\\n    /// @dev max available biome. auto-increment with new dung deploy\\n    uint8 maxBiome;\\n\\n    /// @notice Address of treasure token => min hero level required\\n    /// @dev manual threshold for treasury\\n    mapping(address => uint) minLevelForTreasury;\\n\\n    /// @notice Contains arrays for SKILL_1, SKILL_2, SKILL_3 with 0 or 1\\n    /// i.e. [0, 1, 0] means that durability of SKILL_2 should be reduced\\n    /// @dev hero + heroId => uint8[] array where idx = slotNum\\n    mapping(bytes32 => bytes32) skillSlotsForDurabilityReduction;\\n\\n    /// @notice Counter of dungeons, it's incremented on launch of a new dungeon\\n    uint64 dungeonCounter;\\n\\n    /// @dev dungNum = init attributes\\n    mapping(uint16 => DungeonAttributes) dungeonAttributes;\\n    /// @dev dungeonId => status\\n    mapping(uint64 => DungeonStatus) dungeonStatuses;\\n  }\\n\\n  struct ObjectGenerateInfo {\\n    /// @notice List of chamber types for each unique object\\n    /// @dev uint8 types, packed using PackingLib.packUint8Array\\n    bytes32[] objTypesByStages;\\n    /// @notice List of chances for each chamber type\\n    /// @dev uint64 chances\\n    uint32[][] objChancesByStages;\\n  }\\n\\n  struct DungeonGenerateInfo {\\n    /// @notice List of chamber types for each unique object\\n    uint8[][] objTypesByStages;\\n    /// @notice List of chances for each chamber type\\n    uint32[][] objChancesByStages;\\n\\n    uint32[] uniqObjects;\\n\\n    uint8 minLevel;\\n    uint8 maxLevel;\\n\\n    bytes32[] requiredCustomDataIndex;\\n    uint64[] requiredCustomDataMinValue;\\n    uint64[] requiredCustomDataMaxValue;\\n    bool[] requiredCustomDataIsHero;\\n  }\\n\\n  /// @notice Attributes of the given dungeon logic\\n  struct DungeonAttributes {\\n    /// @notice Total number of stages that should be passed to complete the dungeon\\n    uint8 stages;\\n    uint8 biome;\\n\\n    /// @notice Default list of objects that should be passed in the dungeon\\n    uint32[] uniqObjects;\\n\\n    /// @dev min+max (packUint8Array)\\n    bytes32 minMaxLevel;\\n\\n    bytes32[] requiredCustomDataIndex;\\n    /// @notice Packed DungeonGenerateInfo.requiredCustomData: MinValue, MaxValue, IsHero\\n    /// @dev min+max+isHero(packStoryCustomDataRequirements)\\n    bytes32[] requiredCustomDataValue;\\n\\n    ObjectGenerateInfo info;\\n  }\\n\\n  /// @notice Current status of the given dungeon\\n  struct DungeonStatus {\\n    uint64 dungeonId;\\n    /// @notice Dungeon logic id\\n    uint16 dungNum;\\n\\n    /// @notice True if the dungeon is completed by the hero\\n    bool isCompleted;\\n\\n    /// @notice Hero in the dungeon or 0\\n    address heroToken;\\n    uint heroTokenId;\\n    /// @notice Current object that should be passed by the hero. 0 - new object is not opened\\n    uint32 currentObject;\\n    /// @notice Current stage in the dungeon that should be passed by the hero.\\n    uint8 currentStage;\\n\\n    EnumerableMap.AddressToUintMap treasuryTokens;\\n    /// @notice All items that were minted on result of made actions\\n    bytes32[] treasuryItems;\\n\\n    /// @notice Total number of stages that should be passed to complete the dungeon\\n    /// This value can be bigger than length of uniqObjects\\n    uint8 stages;\\n    /// @notice List of objects to be passed in the stage. The list can be dynamically changed during passing the stages\\n    uint32[] uniqObjects;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////\\n\\n  function launchForNewHero(address heroToken, uint heroTokenId, address owner) external returns (uint64 dungeonId);\\n\\n  function maxBiomeCompleted(address heroToken, uint heroTokenId) external view returns (uint8);\\n\\n  function currentDungeon(address heroToken, uint heroTokenId) external view returns (uint64);\\n\\n  function skillSlotsForDurabilityReduction(address heroToken, uint heroTokenId) external view returns (uint8[] memory result);\\n\\n  function setBossCompleted(uint32 objectId, address heroToken, uint heroTokenId, uint8 heroBiome) external;\\n\\n}\\n\",\"keccak256\":\"0x2f24028d35a06e44dc9bd096d8a1807cfa64518ebd73692a1cc479736814b741\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbca9de297214bb9c30daefda5ecaedd0af2c3e8e0440403ad543fb33528c5ef8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa365c0e17de806f6262765ef6236512674ac8563a6ee3436e81cec7b1d87468e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe7d89e4cdfc41317d90bf469428b6ef17cec6eb6fccab0080bdf0378129d2708\",\"license\":\"MIT\"},\"contracts/interfaces/IFightCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IItemController.sol\\\";\\n\\ninterface IFightCalculator {\\n\\n  enum AttackType {\\n    UNKNOWN, // 0\\n    MELEE, // 1\\n    MAGIC, // 2\\n    SLOT_3,\\n    SLOT_4,\\n    SLOT_5,\\n    SLOT_6,\\n    SLOT_7,\\n    SLOT_8,\\n    SLOT_9,\\n    SLOT_10\\n  }\\n\\n  /// @notice Attacker info: suitable both for hero and monsters\\n  struct AttackInfo {\\n    /// @notice Type of the attack\\n    /// by default, if attack token presents, it's magic attack and not-magic otherwise\\n    /// but this logic can become more complicated after introducing new attack types\\n    AttackType attackType;\\n    /// @notice NFT selected by hero for attack, it should be equip on.\\n    /// If attacker is a monster, this is a special case (stub NFT with zero ID is used)\\n    address attackToken;\\n    uint attackTokenId;\\n    address[] skillTokens;\\n    uint[] skillTokenIds;\\n  }\\n\\n  struct FighterInfo {\\n    int32[] fighterAttributes;\\n    IStatController.ChangeableStats fighterStats;\\n    AttackType attackType;\\n    address attackToken;\\n    uint attackTokenId;\\n    uint race;\\n  }\\n\\n  struct Statuses {\\n    bool stun;\\n    bool burn;\\n    bool freeze;\\n    bool confuse;\\n    bool curse;\\n    bool poison;\\n    bool gotCriticalHit;\\n    bool missed;\\n    bool hitBlocked;\\n  }\\n\\n  struct FightResult {\\n    int32 healthA;\\n    int32 healthB;\\n    int32 manaConsumedA;\\n    int32 manaConsumedB;\\n  }\\n\\n  struct FightCall {\\n    FighterInfo fighterA;\\n    FighterInfo fighterB;\\n    uint64 dungeonId;\\n    uint32 objectId;\\n    address heroAdr;\\n    uint heroId;\\n    uint8 stageId;\\n    uint iteration;\\n    uint8 turn;\\n  }\\n\\n  struct SkillSlots {\\n    bool slot1;\\n    bool slot2;\\n    bool slot3;\\n  }\\n\\n  //region ------------------------ FightLib-internal (FightInfoInternal is required by IApplicationEvents..)\\n  struct FightInfoInternal {\\n    Fighter fighterA;\\n    Fighter fighterB;\\n  }\\n\\n  struct Fighter {\\n    IFightCalculator.FighterInfo info;\\n    IItemController.AttackInfo magicAttack;\\n    int32 health;\\n    int32 manaConsumed;\\n    int32 damage;\\n    int32 damagePoison;\\n    int32 damageReflect;\\n    IFightCalculator.Statuses statuses;\\n  }\\n  //endregion ------------------------ FightLib-internal\\n\\n  function fight(FightCall memory callData) external returns (FightResult memory);\\n}\\n\",\"keccak256\":\"0xdf9ba809ea21a35a24eed12bf80e53452b0d772623d59211a35498b518eb604b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGOC.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\nimport \\\"./IController.sol\\\";\\n\\ninterface IGOC {\\n\\n  enum ObjectType {\\n    UNKNOWN, // 0\\n    EVENT, // 1\\n    MONSTER, // 2\\n    STORY, // 3\\n    END_SLOT\\n  }\\n\\n  enum ObjectSubType {\\n    UNKNOWN_0, // 0\\n    ENEMY_NPC_1, // 1\\n    ENEMY_NPC_SUPER_RARE_2, // 2\\n    BOSS_3, // 3\\n    SHRINE_4, // 4\\n    CHEST_5, // 5\\n    STORY_6, // 6\\n    STORY_UNIQUE_7, // 7\\n    SHRINE_UNIQUE_8, // 8\\n    CHEST_UNIQUE_9, // 9\\n    ENEMY_NPC_UNIQUE_10, // 10\\n    STORY_ON_ROAD_11, // 11\\n    STORY_UNDERGROUND_12, // 12\\n    STORY_NIGHT_CAMP_13, // 13\\n    STORY_MOUNTAIN_14, // 14\\n    STORY_WATER_15, // 15\\n    STORY_CASTLE_16, // 16\\n    STORY_HELL_17, // 17\\n    STORY_SPACE_18, // 18\\n    STORY_WOOD_19, // 19\\n    STORY_CATACOMBS_20, // 20\\n    STORY_BAD_HOUSE_21, // 21\\n    STORY_GOOD_TOWN_22, // 22\\n    STORY_BAD_TOWN_23, // 23\\n    STORY_BANDIT_CAMP_24, // 24\\n    STORY_BEAST_LAIR_25, // 25\\n    STORY_PRISON_26, // 26\\n    STORY_SWAMP_27, // 27\\n    STORY_INSIDE_28, // 28\\n    STORY_OUTSIDE_29, // 29\\n    STORY_INSIDE_RARE_30,\\n    STORY_OUTSIDE_RARE_31,\\n    ENEMY_NPC_INSIDE_32,\\n    ENEMY_NPC_INSIDE_RARE_33,\\n    ENEMY_NPC_OUTSIDE_34,\\n    ENEMY_NPC_OUTSIDE_RARE_35,\\n    END_SLOT\\n  }\\n\\n  /// @custom:storage-location erc7201:game.object.controller.main\\n  struct MainState {\\n\\n    /// @dev objId = biome(00) type(00) id(0000) => biome(uint8) + objType(uint8)\\n    /// Id is id of the event, story or monster.\\n    mapping(uint32 => bytes32) objectMeta;\\n\\n    /// @dev biome(uint8) + objType(uint8) => set of object id\\n    mapping(bytes32 => EnumerableSet.UintSet) objectIds;\\n\\n    /// @dev heroAdr180 + heroId64 + cType8 + biome8 => set of already played objects. Should be cleared periodically\\n    mapping(bytes32 => EnumerableSet.UintSet) playedObjects;\\n\\n    /// @dev HeroAdr(160) + heroId(uint64) + objId(uint32) => iteration count. It needs for properly emit events for every new entrance.\\n    mapping(bytes32 => uint) iterations;\\n\\n    /// @dev objId(uint32) => EventInfo\\n    mapping(uint32 => EventInfo) eventInfos;\\n\\n    /// @dev objId(uint32) => storyId\\n    mapping(uint32 => uint16) storyIds;\\n\\n    /// @dev objId(uint32) => MonsterInfo\\n    mapping(uint32 => MonsterInfo) monsterInfos;\\n\\n    /// @dev hero+id => last fight action timestamp\\n    mapping(bytes32 => uint) lastHeroFightTs;\\n\\n    /// @dev delay for user actions in fight (suppose to prevent bot actions)\\n    uint fightDelay;\\n  }\\n\\n  struct ActionResult {\\n    bool kill;\\n    bool completed;\\n    address heroToken;\\n    address[] mintItems;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n    uint32 objectId;\\n    uint32 experience;\\n    uint heroTokenId;\\n    uint iteration;\\n    uint32[] rewriteNextObject;\\n  }\\n\\n  struct EventInfo {\\n    /// @dev chance to use good or bad attributes/stats\\n    uint32 goodChance;\\n\\n    /// @dev toBytes32ArrayWithIds\\n    bytes32[] goodAttributes;\\n    bytes32[] badAttributes;\\n\\n    /// @dev experience(uint32) + heal(int32) + manaRegen(int32) + lifeChancesRecovered(int32) + damage(int32) + manaConsume(int32) packStatsChange\\n    bytes32 statsChange;\\n\\n    /// @dev item+chance packItemMintInfo\\n    bytes32[] mintItems;\\n  }\\n\\n  struct MonsterInfo {\\n    /// @dev toBytes32ArrayWithIds\\n    bytes32[] attributes;\\n    /// @dev level(uint8) + race(uint8) + experience(uint32) + maxDropItems(uint8) packMonsterStats\\n    bytes32 stats;\\n    /// @dev attackToken(160) + attackTokenId(uint64) + attackType(uint8) packAttackInfo\\n    bytes32 attackInfo;\\n\\n    /// @dev item+chance packItemMintInfo\\n    bytes32[] mintItems;\\n\\n    /// @dev heroAdr(160) + heroId(uint64) => iteration => GeneratedMonster packed\\n    mapping(bytes32 => mapping(uint => bytes32)) _generatedMonsters;\\n  }\\n\\n  struct MultiplierInfo {\\n    uint8 biome;\\n    uint totalSupply;\\n  }\\n\\n  struct GeneratedMonster {\\n    bool generated;\\n    uint8 turnCounter;\\n    int32 hp;\\n    uint32 amplifier;\\n  }\\n\\n  struct MonsterGenInfo {\\n    uint16 monsterId;\\n    uint8 biome;\\n    ObjectSubType subType;\\n\\n    uint8[] attributeIds;\\n    int32[] attributeValues;\\n\\n    uint8 level;\\n    uint8 race;\\n    uint32 experience;\\n    uint8 maxDropItems;\\n\\n    address attackToken;\\n    uint64 attackTokenId;\\n    uint8 attackType;\\n\\n    address[] mintItems;\\n    uint32[] mintItemsChances;\\n  }\\n\\n  struct ActionContext {\\n    address sender;\\n    address heroToken;\\n    IController controller;\\n    uint8 biome;\\n    uint8 objectSubType;\\n    uint8 stageId;\\n    uint32 objectId;\\n    uint64 dungeonId;\\n    uint heroTokenId;\\n    uint salt;\\n    uint iteration;\\n    bytes data;\\n  }\\n\\n  struct EventRegInfo {\\n    uint8 biome;\\n    uint16 eventId;\\n    ObjectSubType subType;\\n\\n    uint32 goodChance;\\n\\n    AttributeGenerateInfo goodAttributes;\\n    AttributeGenerateInfo badAttributes;\\n\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n\\n    address[] mintItems;\\n    uint32[] mintItemsChances;\\n  }\\n\\n  struct AttributeGenerateInfo {\\n    uint8[] ids;\\n    int32[] values;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n  //////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  /// @dev represent object registration if non zero values\\n  function getObjectMeta(uint32 objectId) external view returns (uint8 biome, uint8 objectSubType);\\n\\n  function isBattleObject(uint32 objectId) external view returns (bool);\\n\\n  function getRandomObject(\\n    uint8[] memory cTypes,\\n    uint32[] memory chances,\\n    uint8 biomeLevel,\\n    address heroToken,\\n    uint heroTokenId\\n  ) external returns (uint32 objectId);\\n\\n  function open(address heroToken, uint heroTokenId, uint32 objectId) external returns (uint iteration);\\n\\n  function action(\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 stageId,\\n    bytes memory data\\n  ) external returns (ActionResult memory);\\n\\n}\\n\",\"keccak256\":\"0x6493b091bb99b51586b94064eea3eb60f5fa921c5a6f7e061b3c491a73b89a9e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHeroController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IHeroController {\\n\\n  /// @custom:storage-location erc7201:hero.controller.main\\n  struct MainState {\\n\\n    /// @dev A central place for all hero tokens\\n    address heroTokensVault;\\n\\n    /// @dev heroAdr => packed tokenAdr160+ amount96\\n    mapping(address => bytes32) payToken;\\n\\n    /// @dev heroAdr => heroCls8\\n    mapping(address => uint8) heroClass;\\n\\n    // ---\\n\\n    /// @dev hero+id => individual hero name\\n    mapping(bytes32 => string) heroName;\\n\\n    /// @dev name => hero+id, needs for checking uniq names\\n    mapping(string => bytes32) nameToHero;\\n\\n    // ---\\n\\n    /// @dev hero+id => biome\\n    mapping(bytes32 => uint8) heroBiome;\\n\\n    /// @dev hero+id => rein hero+id\\n    mapping(bytes32 => bytes32) reinforcementHero;\\n\\n    /// @dev hero+id => rein packed attributes\\n    mapping(bytes32 => bytes32[]) reinforcementHeroAttributes;\\n  }\\n\\n  function heroClass(address hero) external view returns (uint8);\\n\\n  function heroBiome(address hero, uint heroId) external view returns (uint8);\\n\\n  function payTokenInfo(address hero) external view returns (address token, uint amount);\\n\\n  function heroReinforcementHelp(address hero, uint heroId) external view returns (address helperHeroToken, uint helperHeroId);\\n\\n  function score(address hero, uint heroId) external view returns (uint);\\n\\n  function isAllowedToTransfer(address hero, uint heroId) external view returns (bool);\\n\\n  function heroTokensVault() external view returns (address);\\n\\n  // ---\\n\\n  function create(address hero, string memory heroName_, bool enter) external returns (uint);\\n\\n  function kill(address hero, uint heroId) external returns (bytes32[] memory dropItems);\\n\\n  function releaseReinforcement(address hero, uint heroId) external returns (address helperToken, uint helperId);\\n\\n}\\n\",\"keccak256\":\"0x670ab48074f47c954a571035fb9abf04b193d524768b779047838e0990d39ef1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IItem.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IItem {\\n\\n  function isItem() external pure returns (bool);\\n\\n  function mintFor(address recipient) external returns (uint tokenId);\\n\\n  function burn(uint tokenId) external;\\n\\n  function controlledTransfer(address from, address to, uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x766165af1a0ef65f8969414e165fdbc38294b5f249d280a3be272cbaa90721a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IItemController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"./IGOC.sol\\\";\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IItemController {\\n\\n  /// @custom:storage-location erc7201:item.controlbler.main\\n  struct MainState {\\n\\n    ////////////////// GENERATE //////////////////\\n\\n    EnumerableSet.AddressSet items;\\n\\n    /// @dev itemAdr => itemMetaType8 + itemLvl8 + itemType8 + baseDurability16 + defaultRarity8 + minAttr8 + maxAttr8 + manaCost32 + req(packed core 128)\\n    mapping(address => bytes32) itemMeta;\\n\\n    /// @dev itemAdr => packed tokenAdr160+ amount96\\n    mapping(address => bytes32) augmentInfo;\\n\\n    // --- common attr ---\\n\\n    /// @dev itemAdr => id8 + min(int32) + max(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoAttributes;\\n\\n    // --- consumable ---\\n\\n    /// @dev itemAdr => ids+values (toBytes32ArrayWithIds)\\n    mapping(address => bytes32[]) _itemConsumableAttributes;\\n\\n    /// @dev itemAdr => IStatController.ChangeableStats packed int32[]\\n    mapping(address => bytes32) itemConsumableStats;\\n\\n    // --- buff ---\\n\\n    /// @dev itemAdr => id8 + min(int32) + max(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoCasterAttributes;\\n\\n    /// @dev itemAdr => id8 + minDmg(int32) + maxDmg(int32) + chance32\\n    mapping(address => bytes32[]) generateInfoTargetAttributes;\\n\\n    // --- attack ---\\n\\n    /// @dev itemAdr => packed AttackInfo: attackType8 + min32 + max32 + factors(packed core 128)\\n    mapping(address => bytes32) generateInfoAttack;\\n\\n    ////////////////// ITEMS INFO //////////////////\\n\\n    /// @dev itemAdr+id => itemRarity8 + augmentationLevel8 + itemDurability16\\n    mapping(bytes32 => bytes32) itemInfo;\\n\\n    /// @dev itemAdr+id => heroAdr+id\\n    mapping(bytes32 => bytes32) equippedOn;\\n\\n    // --- common attr ---\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemAttributes;\\n\\n    // --- consumable ---\\n\\n    // consumable stats unchangeable, get them by address\\n\\n    // --- buff ---\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemCasterAttributes;\\n\\n    /// @dev itemAdr+Id => ids+values (toBytes32ArrayWithIds)\\n    mapping(bytes32 => bytes32[]) _itemTargetAttributes;\\n\\n    // --- attack ---\\n\\n    /// @dev itemAdr+Id => packed AttackInfo: attackType8 + min32 + max32 + factors(packed core 128)\\n    mapping(bytes32 => bytes32) _itemAttackInfo;\\n\\n  }\\n\\n  struct RegisterItemParams {\\n    ItemMeta itemMeta;\\n    address augmentToken;\\n    uint augmentAmount;\\n    ItemGenerateInfo commonAttributes;\\n\\n    IGOC.AttributeGenerateInfo consumableAttributes;\\n    IStatController.ChangeableStats consumableStats;\\n\\n    ItemGenerateInfo casterAttributes;\\n    ItemGenerateInfo targetAttributes;\\n\\n    AttackInfo genAttackInfo;\\n  }\\n\\n  struct ItemGenerateInfo {\\n    /// @notice Attribute ids\\n    uint8[] ids;\\n    /// @notice Min value of the attribute, != 0\\n    int32[] mins;\\n    /// @notice Max value of the attribute, != 0\\n    int32[] maxs;\\n    /// @notice Chance of the selection [0..MAX_CHANCES]\\n    uint32[] chances;\\n  }\\n\\n  struct ItemMeta {\\n    uint8 itemMetaType;\\n    // Level in range 1-99. Reducing durability in low level dungeons. lvl/5+1 = biome\\n    uint8 itemLevel;\\n    IItemController.ItemType itemType;\\n    uint16 baseDurability;\\n    uint8 defaultRarity;\\n    uint32 manaCost;\\n\\n    // it doesn't include positions with 100% chance\\n    uint8 minRandomAttributes;\\n    uint8 maxRandomAttributes;\\n\\n    IStatController.CoreAttributes requirements;\\n  }\\n\\n  enum FeeType {\\n    UNKNOWN,\\n    REPAIR,\\n    AUGMENT,\\n    STORY,\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemRarity {\\n    UNKNOWN, // 0\\n    NORMAL, // 1\\n    MAGIC, // 2\\n    RARE, // 3\\n    SET, // 4\\n    UNIQUE, // 5\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemType {\\n    NO_SLOT, // 0\\n    HEAD, // 1\\n    BODY, // 2\\n    GLOVES, // 3\\n    BELT, // 4\\n    AMULET, // 5\\n    RING, // 6\\n    OFF_HAND, // 7\\n    BOOTS, // 8\\n    ONE_HAND, // 9\\n    TWO_HAND, // 10\\n    SKILL, // 11\\n\\n    END_SLOT\\n  }\\n\\n  enum ItemMetaType {\\n    UNKNOWN, // 0\\n    COMMON, // 1\\n    ATTACK, // 2\\n    BUFF, // 3\\n    CONSUMABLE, // 4\\n\\n    END_SLOT\\n  }\\n\\n  enum AttackType {\\n    UNKNOWN, // 0\\n    FIRE, // 1\\n    COLD, // 2\\n    LIGHTNING, // 3\\n    CHAOS, // 4\\n\\n    END_SLOT\\n  }\\n\\n  struct AttackInfo {\\n    AttackType aType;\\n    int32 min;\\n    int32 max;\\n    // if not zero - activate attribute factor for the attribute\\n    IStatController.CoreAttributes attributeFactors;\\n  }\\n\\n  struct ItemInfo {\\n    ItemRarity rarity;\\n    uint8 augmentationLevel;\\n    uint16 durability;\\n  }\\n\\n  /// @dev The struct is used in events, so it's moved here from the lib\\n  struct MintInfo {\\n    IItemController.ItemMeta meta;\\n    uint8[] attributesIds;\\n    int32[] attributesValues;\\n    IItemController.ItemRarity itemRarity;\\n\\n    IItemController.AttackInfo attackInfo;\\n\\n    uint8[] casterIds;\\n    int32[] casterValues;\\n    uint8[] targetIds;\\n    int32[] targetValues;\\n  }\\n\\n  /// @dev The struct is used in events, so it's moved here from the lib\\n  struct AugmentInfo {\\n    uint8[] attributesIds;\\n    int32[] attributesValues;\\n    IItemController.AttackInfo attackInfo;\\n    uint8[] casterIds;\\n    int32[] casterValues;\\n    uint8[] targetIds;\\n    int32[] targetValues;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  function itemMeta(address item) external view returns (ItemMeta memory meta);\\n\\n  function augmentInfo(address item) external view returns (address token, uint amount);\\n\\n  function genAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genCasterAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genTargetAttributeInfo(address item) external view returns (ItemGenerateInfo memory info);\\n\\n  function genAttackInfo(address item) external view returns (AttackInfo memory info);\\n\\n  function itemInfo(address item, uint itemId) external view returns (ItemInfo memory info);\\n\\n  function equippedOn(address item, uint itemId) external view returns (address hero, uint heroId);\\n\\n  function itemAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function consumableAttributes(address item) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function consumableStats(address item) external view returns (IStatController.ChangeableStats memory stats);\\n\\n  function casterAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function targetAttributes(address item, uint itemId) external view returns (int32[] memory values, uint8[] memory ids);\\n\\n  function itemAttackInfo(address item, uint itemId) external view returns (AttackInfo memory info);\\n\\n  function score(address item, uint tokenId) external view returns (uint);\\n\\n  function isAllowedToTransfer(address item, uint tokenId) external view returns (bool);\\n\\n  // ---\\n\\n  function mint(address item, address recipient) external returns (uint itemId);\\n\\n  function reduceDurability(address hero, uint heroId, uint8 biome) external;\\n\\n  function destroy(address item, uint tokenId) external;\\n\\n  function takeOffDirectly(\\n    address item,\\n    uint itemId,\\n    address hero,\\n    uint heroId,\\n    uint8 itemSlot,\\n    address destination,\\n    bool broken\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36d2a1f44e3f2308ea27ca7579d40f374efd27e8eca1737253c7b1598313d3f7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\ninterface IOracle {\\n\\n  function getRandomNumber(uint max, uint seed) external returns (uint);\\n\\n  function getRandomNumberInRange(uint min, uint max, uint seed) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x75a2bed27cbd9be6c76b6f3e941ee5f6f55380f61cd867254a0c766fc3b71976\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IReinforcementController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IStatController.sol\\\";\\nimport \\\"../openzeppelin/EnumerableMap.sol\\\";\\n\\ninterface IReinforcementController {\\n\\n  /// @custom:storage-location erc7201:reinforcement.controller.main\\n  struct MainState {\\n\\n    /// @dev minLvl8 + minLifeChances8\\n    bytes32 config;\\n\\n    /// @dev hero token + hero id => heroInfo(biome8 + score128 + fee8 + stakeTs64)\\n    mapping(bytes32 => bytes32) _stakedHeroes;\\n    /// @dev biome => helperAdr+id\\n    mapping(uint => EnumerableSet.Bytes32Set) _internalIdsByBiomes;\\n    /// @dev biome => score\\n    mapping(uint => uint) maxScore;\\n    /// @dev heroAdr+id => itemAdr+id\\n    mapping(bytes32 => bytes32[]) _heroNftRewards;\\n    /// @dev heroAdr+id => tokenAdr and amount map\\n    mapping(bytes32 => EnumerableMap.AddressToUintMap) _heroTokenRewards;\\n\\n  }\\n\\n  struct HeroInfo {\\n    uint8 biome;\\n    uint score; // stored in 128 but easy to use 256\\n    /// @notice To helper ratio\\n    uint8 fee;\\n    uint64 stakeTs;\\n  }\\n\\n  function toHelperRatio(address heroToken, uint heroId) external view returns (uint);\\n\\n  function isStaked(address heroToken, uint heroId) external view returns (bool);\\n\\n  function askHero(uint biome) external returns (address heroToken, uint heroId, int32[] memory attributes);\\n\\n  function registerTokenReward(address heroToken, uint heroId, address token, uint amount) external;\\n\\n  function registerNftReward(address heroToken, uint heroId, address token, uint tokenId) external;\\n\\n}\\n\",\"keccak256\":\"0x7725162b20d50299b5dc314d56488ec6d5ffd1246ba5ea098ab4391e552d897f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStatController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IStatController {\\n\\n  /// @custom:storage-location erc7201:stat.controller.main\\n  struct MainState {\\n    mapping(bytes32 => bytes32[]) heroTotalAttributes;\\n    /// @dev heroAdr+heroId => int32 packed strength, dexterity, vitality, energy\\n    mapping(bytes32 => bytes32) _heroCore;\\n    mapping(bytes32 => bytes32[]) heroBonusAttributes;\\n    mapping(bytes32 => bytes32[]) heroTemporallyAttributes;\\n    /// @dev heroAdr+heroId => uint32 packed level, experience, life, mana, lifeChances\\n    mapping(bytes32 => bytes32) heroStats;\\n    /// @dev heroAdr+heroId+itemSlot => itemAdr + itemId\\n    mapping(bytes32 => bytes32) heroSlots;\\n    /// @dev heroAdr+heroId => busy slots uint8[] packed\\n    mapping(bytes32 => bytes32) heroBusySlots;\\n    mapping(bytes32 => EnumerableSet.AddressSet) usedConsumables;\\n    mapping(bytes32 => mapping(bytes32 => uint)) heroCustomData;\\n    mapping(bytes32 => uint) globalCustomData;\\n  }\\n\\n\\n  enum ATTRIBUTES {\\n    // core\\n    STRENGTH, // 0\\n    DEXTERITY, // 1\\n    VITALITY, // 2\\n    ENERGY, // 3\\n    // attributes\\n    DAMAGE_MIN, // 4\\n    DAMAGE_MAX, // 5\\n    ATTACK_RATING, // 6\\n    DEFENSE, // 7\\n    BLOCK_RATING, // 8\\n    LIFE, // 9\\n    MANA, // 10\\n    // resistance\\n    FIRE_RESISTANCE, // 11\\n    COLD_RESISTANCE, // 12\\n    LIGHTNING_RESISTANCE, // 13\\n    // dmg against\\n    DMG_AGAINST_HUMAN, // 14\\n    DMG_AGAINST_UNDEAD, // 15\\n    DMG_AGAINST_DAEMON, // 16\\n    DMG_AGAINST_BEAST, // 17\\n\\n    // defence against\\n    DEF_AGAINST_HUMAN, // 18\\n    DEF_AGAINST_UNDEAD, // 19\\n    DEF_AGAINST_DAEMON, // 20\\n    DEF_AGAINST_BEAST, // 21\\n\\n    // --- unique, not augmentable\\n    // hero will not die until have positive chances\\n    LIFE_CHANCES, // 22\\n    // increase chance to get an item\\n    MAGIC_FIND, // 23\\n    // decrease chance to get an item\\n    DESTROY_ITEMS, // 24\\n    // percent of chance x2 dmg\\n    CRITICAL_HIT, // 25\\n    // dmg factors\\n    MELEE_DMG_FACTOR, // 26\\n    FIRE_DMG_FACTOR, // 27\\n    COLD_DMG_FACTOR, // 28\\n    LIGHTNING_DMG_FACTOR, // 29\\n    // increase attack rating on given percent\\n    AR_FACTOR, // 30\\n    // percent of damage will be converted to HP\\n    LIFE_STOLEN_PER_HIT, // 31\\n    // amount of mana restored after each battle\\n    MANA_AFTER_KILL, // 32\\n    // reduce all damage on percent after all other reductions\\n    DAMAGE_REDUCTION, // 33\\n\\n    // -- statuses\\n    // chance to stun an enemy, stunned enemy skip next hit\\n    STUN, // 34\\n    // chance burn an enemy, burned enemy will loss 50% of defence\\n    BURN, // 35\\n    // chance freeze an enemy, frozen enemy will loss 50% of MELEE damage\\n    FREEZE, // 36\\n    // chance to reduce enemy's attack rating on 50%\\n    CONFUSE, // 37\\n    // chance curse an enemy, cursed enemy will loss 50% of resistance\\n    CURSE, // 38\\n    // percent of dmg return to attacker\\n    REFLECT_DAMAGE_MELEE, // 39\\n    REFLECT_DAMAGE_MAGIC, // 40\\n    // chance to poison enemy, poisoned enemy will loss 10% of the current health\\n    POISON, // 41\\n    // reduce chance get any of uniq statuses\\n    RESIST_TO_STATUSES, // 42\\n\\n    END_SLOT // 46\\n  }\\n\\n  // possible\\n  // HEAL_FACTOR\\n\\n  struct CoreAttributes {\\n    int32 strength;\\n    int32 dexterity;\\n    int32 vitality;\\n    int32 energy;\\n  }\\n\\n  struct ChangeableStats {\\n    uint32 level;\\n    uint32 experience;\\n    uint32 life;\\n    uint32 mana;\\n    uint32 lifeChances;\\n  }\\n\\n  enum ItemSlots {\\n    UNKNOWN, // 0\\n    HEAD, // 1\\n    BODY, // 2\\n    GLOVES, // 3\\n    BELT, // 4\\n    AMULET, // 5\\n    BOOTS, // 6\\n    RIGHT_RING, // 7\\n    LEFT_RING, // 8\\n    RIGHT_HAND, // 9\\n    LEFT_HAND, // 10\\n    TWO_HAND, // 11\\n    SKILL_1, // 12\\n    SKILL_2, // 13\\n    SKILL_3, // 14\\n    END_SLOT // 15\\n  }\\n\\n  struct NftItem {\\n    address token;\\n    uint tokenId;\\n  }\\n\\n  enum Race {\\n    UNKNOWN, // 0\\n    HUMAN, // 1\\n    UNDEAD, // 2\\n    DAEMON, // 3\\n    BEAST, // 4\\n    END_SLOT // 5\\n  }\\n\\n  struct ChangeAttributesInfo {\\n    address heroToken;\\n    uint heroTokenId;\\n    int32[] changeAttributes;\\n    bool add;\\n    bool temporally;\\n  }\\n\\n  struct BuffInfo {\\n    address heroToken;\\n    uint heroTokenId;\\n    uint32 heroLevel;\\n    address[] buffTokens;\\n    uint[] buffTokenIds;\\n  }\\n\\n  /// @dev This struct is used inside event, so it's moved here from lib\\n  struct ActionInternalInfo {\\n    int32[] posAttributes;\\n    int32[] negAttributes;\\n\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n\\n    address[] mintedItems;\\n  }\\n\\n  function initNewHero(address token, uint tokenId, uint heroClass) external;\\n\\n  function heroAttributes(address token, uint tokenId) external view returns (int32[] memory);\\n\\n  function heroAttribute(address token, uint tokenId, uint index) external view returns (int32);\\n\\n  function heroAttributesLength(address token, uint tokenId) external view returns (uint);\\n\\n  function heroBaseAttributes(address token, uint tokenId) external view returns (CoreAttributes memory);\\n\\n  function heroCustomData(address token, uint tokenId, bytes32 index) external view returns (uint);\\n\\n  function globalCustomData(bytes32 index) external view returns (uint);\\n\\n  function heroStats(address token, uint tokenId) external view returns (ChangeableStats memory);\\n\\n  function heroItemSlot(address token, uint64 tokenId, uint8 itemSlot) external view returns (bytes32 nftPacked);\\n\\n  function heroItemSlots(address heroToken, uint heroTokenId) external view returns (uint8[] memory);\\n\\n  function isHeroAlive(address heroToken, uint heroTokenId) external view returns (bool);\\n\\n  function levelUp(address token, uint tokenId, uint heroClass, CoreAttributes memory change) external returns (uint newLvl);\\n\\n  function changeHeroItemSlot(\\n    address heroToken,\\n    uint64 heroTokenId,\\n    uint itemType,\\n    uint8 itemSlot,\\n    address itemToken,\\n    uint itemTokenId,\\n    bool equip\\n  ) external;\\n\\n  function changeCurrentStats(\\n    address token,\\n    uint tokenId,\\n    ChangeableStats memory change,\\n    bool increase\\n  ) external;\\n\\n  function changeBonusAttributes(ChangeAttributesInfo memory info) external;\\n\\n  function registerConsumableUsage(address heroToken, uint heroTokenId, address item) external;\\n\\n  function clearUsedConsumables(address heroToken, uint heroTokenId) external;\\n\\n  function clearTemporallyAttributes(address heroToken, uint heroTokenId) external;\\n\\n  function buffHero(BuffInfo memory info) external view returns (int32[] memory attributes, int32 manaConsumed);\\n\\n  function setHeroCustomData(address token, uint tokenId, bytes32 index, uint value) external;\\n\\n  function setGlobalCustomData(bytes32 index, uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x92bcc6057f867ff0d418fd9ec397578444c5fd6244b979782c2ddd14b607a561\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStoryController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IGOC.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IHeroController.sol\\\";\\nimport \\\"../openzeppelin/EnumerableSet.sol\\\";\\n\\ninterface IStoryController {\\n\\n  enum AnswerResultId {\\n    UNKNOWN, // 0\\n    SUCCESS, // 1\\n    ATTRIBUTE_FAIL, // 2\\n    RANDOM_FAIL, // 3\\n    DELAY_FAIL, // 4\\n    HERO_CUSTOM_DATA_FAIL, // 5\\n    GLOBAL_CUSTOM_DATA_FAIL, // 6\\n\\n    END_SLOT\\n  }\\n\\n  enum CustomDataResult {\\n    UNKNOWN, // 0\\n    HERO_SUCCESS, // 1\\n    HERO_FAIL, // 2\\n    GLOBAL_SUCCESS, // 3\\n    GLOBAL_FAIL, // 4\\n\\n    END_SLOT\\n  }\\n\\n  /// @custom:storage-location erc7201:story.controller.main\\n  struct MainState {\\n\\n    // --- STORY REG INFO ---\\n\\n    /// @dev Uniq story identification.\\n    mapping(uint32 => uint16) storyIds;\\n    /// @dev Revers mapping for stories for using in the next object rewrite logic.\\n    mapping(uint16 => uint32) idToStory;\\n    /// @dev Store used ids for stories.\\n    mapping(uint16 => bool) _usedStoryIds;\\n    /// @dev Prevent register the story twice\\n    mapping(uint32 => bool) registeredStories;\\n\\n    // --- ANSWER MAPPING ---\\n\\n    /// @dev storyId => all story pages. We need to have this mapping for properly remove meta info\\n    mapping(uint16 => EnumerableSet.UintSet) allStoryPages;\\n\\n    /// @dev storyId => all possible answers. We need to have this mapping for properly remove meta info\\n    mapping(uint16 => EnumerableSet.Bytes32Set) allStoryAnswers;\\n\\n    /// @dev storyId + pageId + heroClass (zero is default answers) => storyId + pageId + heroClass (zero is default answers) + answerId\\n    mapping(bytes32 => bytes32[]) answers;\\n    /// @dev answerUnPackedId + answerResultId => nextPageIds (will be chosen randomly from this array)\\n    ///      where answerResultId is:\\n    ///      0 - unknown,\\n    ///      1 - success,\\n    ///      2 - attr fail\\n    ///      3 - random fail\\n    ///      4 - delay fail\\n    ///      5 - hero custom data fail\\n    ///      6 - global custom data fail\\n    ///      see COUNT_ANSWER_RESULT_IDS\\n    mapping(bytes32 => uint16[]) nextPageIds;\\n    /// @dev story + pageId + heroClass (zero is default answers) => random nextObjs (adr + id, like packed nft id)\\n    mapping(bytes32 => uint32[]) nextObjectsRewrite;\\n\\n    /// @dev answerPackedId => packed array of uint32[]\\n    ///      0 - random requirement(uint32, 1 - 99% success of this action, zero means no check)\\n    ///      1 - delay requirement(uint32, if time since the last call more than this value the check is fail, zero means no check)\\n    ///      2 - isFinalAnswer(uint8)\\n    mapping(bytes32 => bytes32) answerAttributes;\\n\\n    // --- ANSWER REQUIREMENTS ---\\n\\n    /// @dev answerPackedId => array of AttributeRequirementsPacked\\n    mapping(bytes32 => bytes32[]) attributeRequirements;\\n    /// @dev answerPackedId=> array of ItemRequirementsPacked\\n    mapping(bytes32 => bytes32[]) itemRequirements;\\n    /// @dev answerPackedId => array of TokenRequirementsPacked\\n    mapping(bytes32 => bytes32[]) tokenRequirements;\\n    /// @dev answerPackedId => custom data for hero\\n    mapping(bytes32 => CustomDataRequirementPacked[]) heroCustomDataRequirement;\\n    /// @dev answerPackedId => global custom data\\n    mapping(bytes32 => CustomDataRequirementPacked[]) globalCustomDataRequirement;\\n\\n    // --- ANSWER RESULTS ---\\n\\n    /// @dev answerPackedId => change attributes\\n    mapping(bytes32 => bytes32[]) successInfoAttributes;\\n    /// @dev answerPackedId => change stats\\n    mapping(bytes32 => bytes32) successInfoStats;\\n    /// @dev answerPackedId => mint items\\n    mapping(bytes32 => bytes32[]) successInfoMintItems;\\n\\n    /// @dev answerPackedId => change attributes\\n    mapping(bytes32 => bytes32[]) failInfoAttributes;\\n    /// @dev answerPackedId => change stats\\n    mapping(bytes32 => bytes32) failInfoStats;\\n    /// @dev answerPackedId => mint items\\n    mapping(bytes32 => bytes32[]) failInfoMintItems;\\n\\n    /// @dev answerUnPackedId + CustomDataResult => custom data array change\\n    ///      where CustomDataResult is\\n    ///      1 - hero success\\n    ///      2 - hero fail\\n    ///      3 - global success\\n    ///      4 - global fail\\n    ///      see COUNT_CUSTOM_DATA_RESULT_IDS\\n    mapping(bytes32 => bytes32[]) customDataResult;\\n    /// @dev answerPackedId => slot+chance+stopIfBurnt\\n    mapping(bytes32 => bytes32[]) burnItem;\\n\\n    // --- GENERAL STORY REQUIREMENTS ---\\n\\n    /// @dev story => Custom hero data requirements for a story. If exist and hero is not eligible should be not chose in a dungeon.\\n    mapping(uint => CustomDataRequirementRangePacked[]) storyRequiredHeroData;\\n    /// @dev story => Minimal level for the history. 0 means no requirements.\\n    mapping(uint => uint) storyRequiredLevel;\\n\\n    // --- HERO STATES ---\\n\\n    /// @dev hero + heroId + storyId => pageId + heroLastActionTS\\n    mapping(bytes32 => bytes32) heroState;\\n\\n    // --- OTHER ---\\n\\n    /// @dev storyId => build hash for the last update\\n    mapping(uint16 => uint) storyBuildHash;\\n  }\\n\\n  /// @dev We need to have flat structure coz Solidity can not handle arrays of structs properly\\n  struct StoryMetaInfo {\\n    uint16 storyId;\\n\\n    // --- story reqs\\n\\n    bytes32[] requiredCustomDataIndex;\\n    uint64[] requiredCustomDataMinValue;\\n    uint64[] requiredCustomDataMaxValue;\\n    bool[] requiredCustomDataIsHero;\\n    uint minLevel;\\n\\n    // --- answer reqs\\n\\n    AnswersMeta answersMeta;\\n    AnswerNextPageMeta answerNextPage;\\n    AnswerAttributeRequirementsMeta answerAttributeRequirements;\\n    AnswerItemRequirementsMeta answerItemRequirements;\\n    AnswerTokenRequirementsMeta answerTokenRequirements;\\n    AnswerAttributesMeta answerAttributes;\\n    AnswerCustomDataMeta answerHeroCustomDataRequirement;\\n    AnswerCustomDataMeta answerGlobalCustomDataRequirement;\\n\\n    // --- answer results\\n\\n    AnswerBurnRandomItemMeta answerBurnRandomItemMeta;\\n    NextObjRewriteMeta nextObjRewriteMeta;\\n\\n    // --- story results\\n\\n    AnswerResultMeta successInfo;\\n    AnswerResultMeta failInfo;\\n\\n    AnswerCustomDataResultMeta successHeroCustomData;\\n    AnswerCustomDataResultMeta failHeroCustomData;\\n    AnswerCustomDataResultMeta successGlobalCustomData;\\n    AnswerCustomDataResultMeta failGlobalCustomData;\\n  }\\n\\n  struct NextObjRewriteMeta {\\n    uint16[] nextObjPageIds;\\n    uint8[] nextObjHeroClasses;\\n    uint32[][] nextObjIds;\\n  }\\n\\n  struct AnswersMeta {\\n    uint16[] answerPageIds;\\n    uint8[] answerHeroClasses;\\n    uint16[] answerIds;\\n  }\\n\\n  struct AnswerNextPageMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    uint8[] answerResultIds;\\n    uint16[][] answerNextPageIds;\\n  }\\n\\n  struct AnswerAttributeRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    bool[][] cores;\\n    uint8[][] ids;\\n    int32[][] values;\\n  }\\n\\n  struct AnswerItemRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    address[][] requireItems;\\n    bool[][] requireItemBurn;\\n    bool[][] requireItemEquipped;\\n  }\\n\\n  struct AnswerTokenRequirementsMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    address[][] requireToken;\\n    uint88[][] requireAmount;\\n    bool[][] requireTransfer;\\n  }\\n\\n  struct AnswerAttributesMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n    uint32[] randomRequirements;\\n    uint32[] delayRequirements;\\n    bool[] isFinalAnswer;\\n  }\\n\\n  struct AnswerCustomDataMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    bytes32[][] dataIndexes;\\n    bool[][] mandatory;\\n    uint64[][] dataValuesMin;\\n    uint64[][] dataValuesMax;\\n  }\\n\\n  struct AnswerResultMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    uint8[][] attributeIds;\\n    /// @dev Max value is limitied by int24, see toBytes32ArrayWithIds impl\\n    int32[][] attributeValues;\\n\\n    uint32[] experience;\\n    int32[] heal;\\n    int32[] manaRegen;\\n    int32[] lifeChancesRecovered;\\n    int32[] damage;\\n    int32[] manaConsumed;\\n\\n    address[][] mintItems;\\n    uint32[][] mintItemsChances;\\n  }\\n\\n  struct AnswerCustomDataResultMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    bytes32[][] dataIndexes;\\n    int16[][] dataValues;\\n  }\\n\\n  struct AnswerBurnRandomItemMeta {\\n    uint16[] pageId;\\n    uint8[] heroClass;\\n    uint16[] answerId;\\n\\n    /// @notice 0 - random slot\\n    uint8[][] slots;\\n    /// @notice typical chances are [0..100] (no decimals here)\\n    uint64[][] chances;\\n    bool[][] isStopIfBurnt;\\n  }\\n\\n  struct CustomDataRequirementPacked {\\n    bytes32 index;\\n    /// @dev min(uint64) + max(uint64) + mandatory(uint8)\\n    bytes32 data;\\n  }\\n\\n  struct CustomDataRequirementRangePacked {\\n    bytes32 index;\\n    /// @dev min(uint64) + max(uint64) + isHeroData(uint8)\\n    bytes32 data;\\n  }\\n\\n  struct StatsChange {\\n    uint32 experience;\\n    int32 heal;\\n    int32 manaRegen;\\n    int32 lifeChancesRecovered;\\n    int32 damage;\\n    int32 manaConsumed;\\n  }\\n\\n  struct StoryActionContext {\\n    uint stageId;\\n    uint iteration;\\n    bytes32 answerIdHash;\\n    bytes32 answerAttributes;\\n    address sender;\\n    address heroToken;\\n    IController controller;\\n    IStatController statController;\\n    IHeroController heroController;\\n    IOracle oracle;\\n    IItemController itemController;\\n    uint8 heroClass;\\n    uint8 heroClassFromAnswerHash;\\n    uint8 biome;\\n    uint16 storyId;\\n    uint16 storyIdFromAnswerHash;\\n    uint16 pageIdFromAnswerHash;\\n    uint16 answerNumber;\\n    uint16 pageId;\\n    uint32 objectId;\\n    uint64 dungeonId;\\n    uint40 heroLastActionTS;\\n    uint80 heroTokenId;\\n    IStatController.ChangeableStats heroStats;\\n  }\\n\\n  // --- WRITE ---\\n\\n  function storyAction(\\n    address sender,\\n    uint64 dungeonId,\\n    uint32 objectId,\\n    uint stageId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 biome,\\n    uint iteration,\\n    bytes memory data\\n  ) external returns (IGOC.ActionResult memory);\\n\\n  // --- READ ---\\n\\n  function isStoryAvailableForHero(uint32 objectId, address heroToken, uint heroTokenId) external view returns (bool);\\n\\n  function idToStory(uint16 id) external view returns (uint32 objectId);\\n\\n  function heroPage(address hero, uint80 heroId, uint16 storyId) external view returns (uint16 pageId);\\n\\n  function storyIds(uint32 objectId) external view returns (uint16);\\n\\n  function registeredStories(uint32 objectId) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x6bc71b74f885c82d9949c582a49280738feed3af3704e7400d4acc1ba545f32e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"./IItemController.sol\\\";\\n\\ninterface ITreasury {\\n\\n  function balanceOfToken(address token) external view returns (uint);\\n\\n  function sendToDungeon(address dungeon, address token, uint amount) external;\\n\\n  function sendFee(address token, uint amount, IItemController.FeeType feeType) external;\\n\\n}\\n\",\"keccak256\":\"0x82d202ce82b2cd5e795d76acdb95248e1816771d4c22e9cee9148ac566566c9d\",\"license\":\"BUSL-1.1\"},\"contracts/lib/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).approve(spender, type(uint).max);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4367558e9fd60778a8fc24fa1db0a47beb5105a09beb53e69873dfd21e942bac\",\"license\":\"BUSL-1.1\"},\"contracts/lib/CalcLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../solady/LibPRNG.sol\\\";\\n\\nlibrary CalcLib {\\n\\n  uint32 public constant MAX_CHANCE = 1e9;\\n\\n  function minI32(int32 a, int32 b) internal pure returns (int32) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max32(int32 a, int32 b) internal pure returns (int32) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function absDiff(int32 a, int32 b) internal pure returns (uint32) {\\n    if (!((a >= 0 && b >= 0) || (a <= 0 && b <= 0))) revert IAppErrors.AbsDiff(a, b);\\n    if (a < 0) {\\n      a = - a;\\n    }\\n    if (b < 0) {\\n      b = - b;\\n    }\\n    return uint32(uint(int(a >= b ? a - b : b - a)));\\n  }\\n\\n  function toUint(int32 n) internal pure returns (uint) {\\n    if (n < 0) {\\n      return 0;\\n    }\\n    if (n <= 0) {\\n      return 0;\\n    }\\n    return uint(int(n));\\n  }\\n\\n  function toInt32(uint a) internal pure returns (int32){\\n    if (a >= uint(int(type(int32).max))) {\\n      return type(int32).max;\\n    }\\n    return int32(int(a));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality\\n  function pseudoRandom(uint maxValue) internal view returns (uint) {\\n    if (maxValue == 0) {\\n      return 0;\\n    }\\n    // pseudo random number\\n    return (uint(keccak256(abi.encodePacked(blockhash(block.number), block.coinbase, block.difficulty, block.number, block.timestamp, tx.gasprice, gasleft()))) % (maxValue + 1));\\n  }\\n\\n  function pseudoRandomUint32(uint32 maxValue) internal view returns (uint32) {\\n    return uint32(pseudoRandom(uint(maxValue)));\\n  }\\n\\n  /// @notice Generate pseudo-random uint in the range [0..maxValue) using Solady pseudo-random function\\n  function nextPrng(LibPRNG.PRNG memory prng, uint maxValue) internal pure returns (uint) {\\n    return LibPRNG.next(prng) % maxValue;\\n  }\\n\\n  /// @notice pseudoRandomUint32 with customizable pseudoRandom()\\n  function pseudoRandomUint32Flex(\\n    uint32 maxValue,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint32) {\\n    return uint32(random_(uint(maxValue)));\\n  }\\n\\n  function pseudoRandomInt32(int32 maxValue) internal view returns (int32) {\\n    bool neg;\\n    if (maxValue < 0) {\\n      neg = true;\\n      maxValue = - maxValue;\\n    }\\n    uint32 v = uint32(pseudoRandom(uint(int(maxValue))));\\n    return neg\\n      ? - int32(int(uint(v)))\\n      : int32(int(uint(v)));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality\\n  function pseudoRandomWithSeed(uint maxValue, uint seed) internal view returns (uint) {\\n    if (maxValue == 0) {\\n      return 0;\\n    }\\n    // pseudo random number\\n    return (uint(keccak256(abi.encodePacked(blockhash(block.number), block.coinbase, block.difficulty, block.number, block.timestamp, tx.gasprice, gasleft(), seed))) % (maxValue + 1));\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality, in range\\n  function pseudoRandomInRange(uint min, uint max) internal view returns (uint) {\\n    if (min >= max) {\\n      return max;\\n    }\\n    uint r = pseudoRandom(max - min);\\n    return min + r;\\n  }\\n\\n  /// @dev Simplified pseudo-random for minor functionality, in range\\n  ///      Equal to pseudoRandomInRange(min, max, pseudoRandom)\\n  function pseudoRandomInRangeFlex(\\n    uint min,\\n    uint max,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint) {\\n    return min >= max ? max : min + random_(max - min);\\n  }\\n\\n  function minusWithZeroFloor(uint a, uint b) internal pure returns (uint){\\n    if (a <= b) {\\n      return 0;\\n    }\\n    return a - b;\\n  }\\n\\n  function minusWithMinFloorI32(int32 a, int32 b) internal pure returns (int32){\\n    if (int(a) - int(b) < type(int32).min) {\\n      return type(int32).min;\\n    }\\n    return a - b;\\n  }\\n\\n  function plusWithMaxFloor32(int32 a, int32 b) internal pure returns (int32){\\n    if (int(a) + int(b) >= type(int32).max) {\\n      return type(int32).max;\\n    }\\n    return a + b;\\n  }\\n\\n  function sqrt(uint x) internal pure returns (uint z) {\\n    assembly {\\n    // Start off with z at 1.\\n      z := 1\\n\\n    // Used below to help find a nearby power of 2.\\n      let y := x\\n\\n    // Find the lowest power of 2 that is at least sqrt(x).\\n      if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n        y := shr(128, y) // Like dividing by 2 ** 128.\\n        z := shl(64, z) // Like multiplying by 2 ** 64.\\n      }\\n      if iszero(lt(y, 0x10000000000000000)) {\\n        y := shr(64, y) // Like dividing by 2 ** 64.\\n        z := shl(32, z) // Like multiplying by 2 ** 32.\\n      }\\n      if iszero(lt(y, 0x100000000)) {\\n        y := shr(32, y) // Like dividing by 2 ** 32.\\n        z := shl(16, z) // Like multiplying by 2 ** 16.\\n      }\\n      if iszero(lt(y, 0x10000)) {\\n        y := shr(16, y) // Like dividing by 2 ** 16.\\n        z := shl(8, z) // Like multiplying by 2 ** 8.\\n      }\\n      if iszero(lt(y, 0x100)) {\\n        y := shr(8, y) // Like dividing by 2 ** 8.\\n        z := shl(4, z) // Like multiplying by 2 ** 4.\\n      }\\n      if iszero(lt(y, 0x10)) {\\n        y := shr(4, y) // Like dividing by 2 ** 4.\\n        z := shl(2, z) // Like multiplying by 2 ** 2.\\n      }\\n      if iszero(lt(y, 0x8)) {\\n      // Equivalent to 2 ** z.\\n        z := shl(1, z)\\n      }\\n\\n    // Shifting right by 1 is like dividing by 2.\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n      z := shr(1, add(z, div(x, z)))\\n\\n    // Compute a rounded down version of z.\\n      let zRoundDown := div(x, z)\\n\\n    // If zRoundDown is smaller, use it.\\n      if lt(zRoundDown, z) {\\n        z := zRoundDown\\n      }\\n    }\\n  }\\n\\n  /*********************************************\\n *              PRB-MATH                      *\\n *   https://github.com/hifi-finance/prb-math *\\n **********************************************/\\n  /// @notice Calculates the binary logarithm of x.\\n  ///\\n  /// @dev Based on the iterative approximation algorithm.\\n  /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n  ///\\n  /// Requirements:\\n  /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n  ///\\n  /// Caveats:\\n  /// - The results are nor perfectly accurate to the last decimal,\\n  ///   due to the lossy precision of the iterative approximation.\\n  ///\\n  /// @param x The unsigned 60.18-decimal fixed-point number for which\\n  ///           to calculate the binary logarithm.\\n  /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n  function log2(uint256 x) internal pure returns (uint256 result) {\\n    if (x < 1e18) revert IAppErrors.TooLowX(x);\\n\\n    // Calculate the integer part of the logarithm\\n    // and add it to the result and finally calculate y = x * 2^(-n).\\n    uint256 n = mostSignificantBit(x / 1e18);\\n\\n    // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number.\\n    // The operation can't overflow because n is maximum 255 and SCALE is 1e18.\\n    uint256 rValue = n * 1e18;\\n\\n    // This is y = x * 2^(-n).\\n    uint256 y = x >> n;\\n\\n    // If y = 1, the fractional part is zero.\\n    if (y == 1e18) {\\n      return rValue;\\n    }\\n\\n    // Calculate the fractional part via the iterative approximation.\\n    // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n    for (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n      y = (y * y) / 1e18;\\n\\n      // Is y^2 > 2 and so in the range [2,4)?\\n      if (y >= 2 * 1e18) {\\n        // Add the 2^(-m) factor to the logarithm.\\n        rValue += delta;\\n\\n        // Corresponds to z/2 on Wikipedia.\\n        y >>= 1;\\n      }\\n    }\\n    return rValue;\\n  }\\n\\n  /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n  /// @dev See the note on msb in the \\\"Find First Set\\\"\\n  ///      Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n  /// @param x The uint256 number for which to find the index of the most significant bit.\\n  /// @return msb The index of the most significant bit as an uint256.\\n  //noinspection NoReturn\\n  function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n    if (x >= 2 ** 128) {\\n      x >>= 128;\\n      msb += 128;\\n    }\\n    if (x >= 2 ** 64) {\\n      x >>= 64;\\n      msb += 64;\\n    }\\n    if (x >= 2 ** 32) {\\n      x >>= 32;\\n      msb += 32;\\n    }\\n    if (x >= 2 ** 16) {\\n      x >>= 16;\\n      msb += 16;\\n    }\\n    if (x >= 2 ** 8) {\\n      x >>= 8;\\n      msb += 8;\\n    }\\n    if (x >= 2 ** 4) {\\n      x >>= 4;\\n      msb += 4;\\n    }\\n    if (x >= 2 ** 2) {\\n      x >>= 2;\\n      msb += 2;\\n    }\\n    if (x >= 2 ** 1) {\\n      // No need to shift x any more.\\n      msb += 1;\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd5178ce117e26987cd3cb3496e13bd2c6e7d220557ec25f771444dd2f4d2db5b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/ItemLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./StatLib.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IItem.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../solady/LibPRNG.sol\\\";\\n\\nlibrary ItemLib {\\n  using CalcLib for int32;\\n  using PackingLib for address;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n  using PackingLib for uint32[];\\n  using PackingLib for int32[];\\n\\n  //region ------------------------ Data types\\n  struct GenerateAttributesContext {\\n    /// @notice True if max allowed amount of random attributes were reached inside {_prepareAttributes}\\n    bool stopGenerateRandom;\\n    /// @notice Flag - attribute was generated. The array matches to info.ids\\n    bool[] usedIndexes;\\n    /// @notice Ids of the generated attributes\\n    uint8[] ids;\\n    /// @notice Randomly selected values of the generated attributes\\n    int32[] values;\\n    /// @notice Counter of the stored values into {ids} and {values}\\n    uint counter;\\n    /// @notice Total number of random attributes that were generated inside {_prepareAttributes}\\n    uint randomAttrCounter;\\n    /// @notice Total sum of all {random} values for random attributes generated in {_prepareAttributes}\\n    uint randomSum;\\n    /// @notice Total sum of all chances of the random attributes generated in {_prepareAttributes}\\n    uint chancesSum;\\n    /// @notice Total number of random attributes that can be generated\\n    uint totalRandomAttrsPossible;\\n  }\\n\\n  struct MintItemInfo {\\n    uint8 biome;\\n    uint8 heroCurrentLvl;\\n    uint8 maxItems;\\n    IOracle oracle;\\n    address[] mintItems;\\n    int32 magicFind;\\n    int32 destroyItems;\\n    uint32[] mintItemsChances;\\n    uint32 heroExp;\\n    uint amplifier;\\n    uint seed;\\n  }\\n  //endregion ------------------------ Data types\\n\\n  //region ------------------------ Main logic\\n\\n  /// @notice Mint new item, setup attributes, make extra setup if necessary (setup attack item, buff item)\\n  /// @param sender Dungeon Factory only is allowed\\n  /// @param item Item to be minted\\n  /// @param recipient The item is minted for the given recipient\\n  /// @return itemId Id of the newly minted item\\n  function mintNewItem(\\n    IItemController.MainState storage s,\\n    IController controller,\\n    address sender,\\n    address item,\\n    address recipient\\n  ) external returns (uint itemId) {\\n    if (controller.dungeonFactory() != sender) revert IAppErrors.ErrorNotDungeonFactory(sender);\\n\\n    itemId = IItem(item).mintFor(recipient);\\n\\n    IItemController.MintInfo memory info;\\n\\n    (\\n      info.meta,\\n      info.attributesIds,\\n      info.attributesValues,\\n      info.itemRarity\\n    ) = _setupNewAttributes(s, item, itemId, CalcLib.pseudoRandom);\\n\\n    // setup extra info\\n\\n    if (info.meta.itemMetaType == uint8(IItemController.ItemMetaType.ATTACK)) {\\n      info.attackInfo = unpackItemAttackInfo(_setupNewAttackItem(s, item, itemId));\\n    } else if (info.meta.itemMetaType == uint8(IItemController.ItemMetaType.BUFF)) {\\n      (\\n        info.casterIds,\\n        info.casterValues,\\n        info.targetIds,\\n        info.targetValues\\n      ) = _setupNewBuffItem(s, item, itemId, CalcLib.pseudoRandom);\\n    }\\n    // consumable stats unchangeable, get them by address\\n\\n    emit IApplicationEvents.NewItemMinted(item, itemId, info);\\n  }\\n\\n  /// @notice Mint random items, not more than {info.maxItems}\\n  function mintRandomItems(MintItemInfo memory info) internal returns (address[] memory) {\\n    return _mintRandomItems(info, CalcLib.nextPrng);\\n  }\\n\\n  //endregion ------------------------ Main logic\\n\\n  //region ------------------------ Internal logic\\n  /// @param nextPrng_ CalcLib.nextPrng, param is required by unit tests\\n  function _mintRandomItems(\\n    MintItemInfo memory info,\\n    function (LibPRNG.PRNG memory, uint) internal view returns (uint) nextPrng_\\n  ) internal returns (address[] memory) {\\n    unchecked {\\n      uint len = info.mintItems.length;\\n\\n    // Fisher\\u2013Yates shuffle\\n      LibPRNG.PRNG memory prng = LibPRNG.PRNG(info.oracle.getRandomNumber(CalcLib.MAX_CHANCE, info.seed));\\n      uint[] memory indices = new uint[](len);\\n      for (uint i = 1; i < len; ++i) {\\n        indices[i] = i;\\n      }\\n      LibPRNG.shuffle(prng, indices);\\n\\n      address[] memory minted = new address[](len);\\n      uint mintedLength;\\n      uint delta = StatLib.mintDropChanceDelta(info.heroExp, info.heroCurrentLvl, info.biome);\\n      uint di = Math.min(uint(int(info.destroyItems)), 100);\\n\\n      for (uint i; i < len; ++i) {\\n        if (info.mintItemsChances[indices[i]] > CalcLib.MAX_CHANCE) {\\n          revert IAppErrors.TooHighChance(info.mintItemsChances[indices[i]]);\\n        }\\n        uint chance = StatLib.mintDropChance(info.mintItemsChances[indices[i]], info.amplifier, delta);\\n        chance += chance * uint(int(info.magicFind)) / 100;\\n        chance -= chance * di / 100;\\n\\n        // need to call random in each loop coz each minted item should have dedicated chance\\n        uint rnd = nextPrng_(prng, CalcLib.MAX_CHANCE); // randomWithSeed_(CalcLib.MAX_CHANCE, rndSeed);\\n\\n        if (chance != 0 && (chance >= CalcLib.MAX_CHANCE || rnd < chance)) {\\n          // There is no break here: the cycle is continued even if the number of the minted items reaches the max.\\n          // The reason: gas consumption of success operation must be great of equal of the gas consumption of fail op.\\n          if (mintedLength < info.maxItems) {\\n            minted[i] = info.mintItems[indices[i]];\\n            ++mintedLength;\\n          }\\n        }\\n      }\\n\\n      address[] memory mintedAdjusted = new address[](mintedLength);\\n      uint j;\\n      for (uint i; i < len; ++i) {\\n        if (minted[i] != address(0)) {\\n          mintedAdjusted[j] = minted[i];\\n          ++j;\\n        }\\n      }\\n\\n      return mintedAdjusted;\\n    }\\n  }\\n\\n  function _setupNewAttributes(\\n    IItemController.MainState storage s,\\n    address item,\\n    uint itemId,\\n    function (uint) internal view returns (uint) random_\\n  ) internal returns (\\n    IItemController.ItemMeta memory meta,\\n    uint8[] memory ids,\\n    int32[] memory values,\\n    IItemController.ItemRarity itemRarity\\n  ){\\n    meta = unpackedItemMeta(s.itemMeta[item]);\\n    (ids, values, itemRarity) = _generateAttributes(unpackItemGenerateInfo(s.generateInfoAttributes[item]), meta, random_);\\n\\n    bytes32 packedItemId = item.packNftId(itemId);\\n    if (ids.length != 0) {\\n      s._itemAttributes[packedItemId] = values.toBytes32ArrayWithIds(ids);\\n    }\\n\\n    s.itemInfo[packedItemId] = PackingLib.packItemInfo(uint8(itemRarity), 0, meta.baseDurability);\\n  }\\n\\n  function _setupNewAttackItem(IItemController.MainState storage s, address item, uint itemId) internal returns (bytes32 attackInfo){\\n    // we just write data for attack item, no need to generate, it will be augmented later so need individual data for itemId\\n    attackInfo = s.generateInfoAttack[item];\\n    s._itemAttackInfo[item.packNftId(itemId)] = attackInfo;\\n  }\\n\\n  function _setupNewBuffItem(\\n    IItemController.MainState storage s,\\n    address item,\\n    uint itemId,\\n    function (uint) internal view returns (uint) random_\\n  ) internal returns (\\n    uint8[] memory casterIds,\\n    int32[] memory casterValues,\\n    uint8[] memory targetIds,\\n    int32[] memory targetValues\\n  ){\\n\\n    // CASTER\\n    (casterIds, casterValues) = _generateSimpleAttributes(\\n      unpackItemGenerateInfo(s.generateInfoCasterAttributes[item]),\\n      true,\\n      random_\\n    );\\n\\n    if (casterIds.length != 0) {\\n      s._itemCasterAttributes[item.packNftId(itemId)] = casterValues.toBytes32ArrayWithIds(casterIds);\\n    }\\n\\n    // TARGET\\n    (targetIds, targetValues) = _generateSimpleAttributes(\\n      unpackItemGenerateInfo(s.generateInfoTargetAttributes[item]),\\n      true,\\n      random_\\n    );\\n\\n    if (targetIds.length != 0) {\\n      s._itemTargetAttributes[item.packNftId(itemId)] = targetValues.toBytes32ArrayWithIds(targetIds);\\n    }\\n  }\\n\\n  /// @notice Generate all mandatory attributes and try to generate required number of random attributes.\\n  /// Generate at least {info.minRandomAttributes} of random attributes if it's possible\\n  /// but not more than {info.maxRandomAttributes}. Value of each attribute is generated randomly according its chances.\\n  /// @param meta Assume, that meta.min != 0, meta.max != 0 and both meta.min and meta.min should have same sign\\n  /// because results value cannot be 0\\n  /// @return ids Ids of the attributes, zero id is allowed\\n  /// @return values Randomly generated attributes values, min <= value <= max\\n  /// @return itemRarity Rarity of the item (Either meta.defaultRarity or calculated if there is no default rarity)\\n  function _generateAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    IItemController.ItemMeta memory meta,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    uint8[] memory ids,\\n    int32[] memory values,\\n    IItemController.ItemRarity itemRarity\\n  ) {\\n    GenerateAttributesContext memory ctx;\\n\\n    uint len = info.ids.length;\\n    if (len != 0) {\\n      ctx.ids = new uint8[](len);\\n      ctx.values = new int32[](len);\\n      ctx.usedIndexes = new bool[](len);\\n\\n      // Fisher\\u2013Yates shuffle\\n      _shuffleInfo(info, random_);\\n\\n      // initialize ctx by initial values\\n      // generate all mandatory attributes, try to generate not more than {meta.maxRandomAttributes} random attributes\\n      _prepareAttributes(info, meta.maxRandomAttributes, ctx, random_);\\n\\n      // generate missing random attributes if it's necessary, ctx.counter is incremented\\n      _generateMissingRandomAttributes(info, meta.minRandomAttributes, ctx, random_);\\n\\n      itemRarity = meta.defaultRarity == 0\\n        ? _calculateRarity(ctx.randomSum, ctx.chancesSum, ctx.randomAttrCounter, meta.maxRandomAttributes)\\n        : IItemController.ItemRarity(meta.defaultRarity);\\n    } else {\\n      itemRarity = IItemController.ItemRarity.UNKNOWN;\\n    }\\n\\n    (ids, values) = _fixLengthsIdsValues(ctx.ids, ctx.values, ctx.counter);\\n  }\\n\\n  /// @notice Generate missing random attributes if necessary\\n  function _generateMissingRandomAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    uint8 minRandomAttributes,\\n    GenerateAttributesContext memory ctx,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint attrToGen = Math.min(ctx.totalRandomAttrsPossible, minRandomAttributes);\\n    if (ctx.randomAttrCounter < attrToGen && ctx.totalRandomAttrsPossible > ctx.randomAttrCounter) {\\n      // it's necessary AND possible to generate more random attributes\\n      uint possibleRemainingAttrs = ctx.totalRandomAttrsPossible - ctx.randomAttrCounter;\\n      uint remainingAttrsToGen = attrToGen - ctx.randomAttrCounter;\\n\\n      uint[] memory indicesToGen = new uint[](possibleRemainingAttrs);\\n      uint indicesToGenCounter;\\n\\n      // enumerate all attributes, add all indices of not-generated attributes to {indexesToGen}\\n      for (uint i; i < info.ids.length; ++i) {\\n        // mandatory attrs should be already generated and no need to check\\n        if (!ctx.usedIndexes[i]) {\\n          indicesToGen[indicesToGenCounter] = i;\\n          indicesToGenCounter++;\\n        }\\n      }\\n\\n      // Shuffle indices of not-generated attributes using Fisher\\u2013Yates shuffle\\n      if (possibleRemainingAttrs > 1) {\\n        for (uint i; i < possibleRemainingAttrs - 1; ++i) {\\n          uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, possibleRemainingAttrs - 1, random_);\\n          (indicesToGen[randomIndex], indicesToGen[i]) = (indicesToGen[i], indicesToGen[randomIndex]);\\n        }\\n      }\\n      // Generate necessary amount of attributes. Fist (shuffled) attributes are selected (MAX_CHANCE is used for each)\\n      for (uint i; i < remainingAttrsToGen; ++i) {\\n        uint idx = indicesToGen[i];\\n        (int32 attr,) = _generateAttribute(info.mins[idx], info.maxs[idx], CalcLib.MAX_CHANCE, random_);\\n        ctx.ids[ctx.counter] = info.ids[idx];\\n        ctx.values[ctx.counter] = attr;\\n        ctx.counter++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Generate all mandatory attributes, generate not more than {meta.maxRandomAttributes} random attributes.\\n  /// Updates context:\\n  ///   {ctx.totalRandomAttrsPossible} - total number of possible random attributes\\n  ///   {ctx.randomAttrCounter} - total number of generated random attributes  <= {maxRandomAttributes}\\n  ///   {ctx.randomSum} = sum of random of all random attributes.\\n  ///   {ctx.chancesSum} = sum of chances of all random attributes.\\n  ///   {ctx.counter} = total number of generated attributes. Values of ctx.ids, ctx.values, ctx.usedIndexes are\\n  ///   initialized in the range [0...ctx.counter)\\n  /// @param ctx Empty struct but arrays ids, values and usedIndexes should be allocated for info.ids.length items\\n  function _prepareAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    uint8 maxRandomAttributes,\\n    GenerateAttributesContext memory ctx,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint len = info.ids.length;\\n    for (uint i; i < len; ++i) {\\n      if (info.chances[i] != CalcLib.MAX_CHANCE) {\\n        ctx.totalRandomAttrsPossible++;\\n      }\\n\\n      if (info.chances[i] >= CalcLib.MAX_CHANCE || !ctx.stopGenerateRandom) {\\n        (int32 attr, uint random) = _generateAttribute(info.mins[i], info.maxs[i], info.chances[i], random_);\\n//          console.log(\\\"GEN id: %s, value: %s%s\\\", _info.ids[i], attr >= 0 ? '' : '-', attr >= 0 ? uint(int(attr)) : uint(int(- attr)));\\n\\n        // count only random attributes for calc rarity\\n        if (attr != 0) {\\n\\n          if (\\n            info.chances[i] < CalcLib.MAX_CHANCE\\n            // && random != 0 // commented: random = 0 can produce crash in _generateMissingRandomAttributes\\n          ) {\\n            ctx.randomAttrCounter++;\\n            ctx.randomSum += random;\\n            ctx.chancesSum += info.chances[i];\\n          }\\n          ctx.ids[ctx.counter] = info.ids[i];\\n          ctx.values[ctx.counter] = attr;\\n          ctx.counter++;\\n          ctx.usedIndexes[i] = true;\\n        }\\n\\n        // it is a bit less fair random for attrs in the end of the list, however we assume it should be pretty rare case\\n        if (ctx.randomAttrCounter == maxRandomAttributes) {\\n          ctx.stopGenerateRandom = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Shuffle info arrays using Fisher\\u2013Yates shuffle algo\\n  function _shuffleInfo(\\n    IItemController.ItemGenerateInfo memory info,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view {\\n    uint len = info.ids.length;\\n    if (len > 1) {\\n      for (uint i; i < len - 1; i++) {\\n        uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, len - 1, random_);\\n\\n        (info.ids[randomIndex], info.ids[i]) = (info.ids[i], info.ids[randomIndex]);\\n        (info.mins[randomIndex], info.mins[i]) = (info.mins[i], info.mins[randomIndex]);\\n        (info.maxs[randomIndex], info.maxs[i]) = (info.maxs[i], info.maxs[randomIndex]);\\n        (info.chances[randomIndex], info.chances[i]) = (info.chances[i], info.chances[randomIndex]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Generate array [0,1,2.. N-1] and shuffle it using Fisher\\u2013Yates shuffle algo\\n  function _shuffleIndices(\\n    uint countItems,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (uint[] memory indices){\\n    indices = new uint[](countItems);\\n    for (uint i = 1; i < countItems; ++i) {\\n      indices[i] = i;\\n    }\\n    if (countItems > 1) {\\n      for (uint i; i < countItems - 1; i++) {\\n        uint randomIndex = CalcLib.pseudoRandomInRangeFlex(i, countItems - 1, random_);\\n        (indices[randomIndex], indices[i]) = (indices[i], indices[randomIndex]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Reduce lengths of {ids} and {values} to {count}\\n  function _fixLengthsIdsValues(uint8[] memory ids, int32[] memory values, uint count) internal pure returns (\\n    uint8[] memory idsOut,\\n    int32[] memory valuesOut\\n  ) {\\n    if (count == ids.length) {\\n      return (ids, values);\\n    }\\n\\n    idsOut = new uint8[](count);\\n    valuesOut = new int32[](count);\\n    for (uint i; i < count; ++i) {\\n      idsOut[i] = ids[i];\\n      valuesOut[i] = values[i];\\n    }\\n    return (idsOut, valuesOut);\\n  }\\n\\n  /// @param random_ Pass CalcLib.pseudoRandom here, param is required for unit tests. Max value is MAX_CHANCE\\n  function _generateSimpleAttributes(\\n    IItemController.ItemGenerateInfo memory info,\\n    bool maxChance,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    uint8[] memory ids,\\n    int32[] memory values\\n  ) {\\n    uint len = info.ids.length;\\n    ids = new uint8[](len);\\n    values = new int32[](len);\\n\\n    uint n = 0;\\n    for (uint i; i < len; ++i) {\\n      (int32 attr,) = _generateAttribute(\\n        info.mins[i],\\n        info.maxs[i],\\n        maxChance ? CalcLib.MAX_CHANCE : info.chances[i],\\n        random_\\n      );\\n      if (attr != 0) {\\n        ids[n] = info.ids[i];\\n        values[n] = attr;\\n        ++n;\\n      }\\n    }\\n\\n    return _fixLengthsIdsValues(ids, values, n);\\n  }\\n\\n  //endregion ------------------------ Internal logic\\n\\n  //region ------------------------ Internal utils\\n  /// @param chance Chance in the range [0...MAX_CHANCE], MAX_CHANCE=1e9 means \\\"mandatory\\\" element.\\n  /// @param random_ Pass CalcLib.pseudoRandom here, param is required for unit tests\\n  /// @return attr Either 0 or min <= attr <= max\\n  /// @return rnd Random value in the range [0...MAX_CHANCE]; It's always 0 for mandatory elements\\n  function _generateAttribute(\\n    int32 min,\\n    int32 max,\\n    uint32 chance,\\n    function (uint) internal view returns (uint) random_\\n  ) internal view returns (\\n    int32 attr,\\n    uint rnd\\n  ) {\\n    if (chance > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighChance(chance);\\n\\n    uint diff = uint(CalcLib.absDiff(min, max));\\n\\n    if (chance < CalcLib.MAX_CHANCE) {\\n      uint32 random = CalcLib.pseudoRandomUint32Flex(CalcLib.MAX_CHANCE, random_);\\n      if (random < chance) {\\n        uint r = uint(CalcLib.MAX_CHANCE - random * (CalcLib.MAX_CHANCE / chance));\\n        int32 k = int32(int(r * diff / uint(CalcLib.MAX_CHANCE)));\\n        return (min + k, random);\\n      }\\n    } else { // chance == CalcLib.MAX_CHANCE => mandatory element\\n      if (diff == 0) {\\n        return (min, 0);\\n      } else {\\n        uint r = uint(CalcLib.pseudoRandomUint32Flex(CalcLib.MAX_CHANCE, random_));\\n        int32 k = int32(int(r % (diff + 1)));\\n\\n        // return zero random - no need to calc rarity for mandatory elements\\n        return (min + k, 0);\\n      }\\n    }\\n\\n    return (0, 0);\\n  }\\n\\n  /// @notice Calculate item rarity\\n  /// @param randomSum Total sum random values of all random attributes in ItemGenerateInfo, [0...MAX_CHANCE/attrCounter]\\n  /// @param chancesSum Total sum of all random chances in ItemGenerateInfo\\n  /// @param attrCounter Count of random attributes in ItemGenerateInfo\\n  /// @param maxAttr Index of max allowed random attribute (all attributes with higher indices are not random)\\n  /// @return item rarity\\n  function _calculateRarity(uint randomSum, uint chancesSum, uint attrCounter, uint maxAttr) internal pure returns (\\n    IItemController.ItemRarity\\n  ) {\\n    if (attrCounter == 0) {\\n      return IItemController.ItemRarity.NORMAL;\\n    }\\n\\n    uint random = randomSum / attrCounter;\\n    uint averageChance = chancesSum / attrCounter;\\n\\n    if (random > CalcLib.MAX_CHANCE) revert IAppErrors.TooHighRandom(random);\\n\\n    if (random < averageChance / 4 && attrCounter == maxAttr) {\\n      return IItemController.ItemRarity.RARE;\\n    } else if (random < averageChance * 3 / 4) {\\n      return attrCounter > 2\\n        ? IItemController.ItemRarity.RARE\\n        : IItemController.ItemRarity.MAGIC;\\n    } else {\\n      return attrCounter > 1\\n        ? IItemController.ItemRarity.MAGIC\\n        : IItemController.ItemRarity.NORMAL;\\n    }\\n  }\\n  //endregion ------------------------ Internal utils\\n\\n  //region ------------------------ PACKING\\n\\n  function packItemGenerateInfo(IItemController.ItemGenerateInfo memory info) internal pure returns (bytes32[] memory result) {\\n    uint len = info.ids.length;\\n    if (len != info.mins.length || len != info.maxs.length || len != info.chances.length) {\\n      revert IAppErrors.LengthsMismatch();\\n    }\\n\\n    result = new bytes32[](len);\\n\\n    for (uint i; i < len; ++i) {\\n      result[i] = PackingLib.packItemGenerateInfo(info.ids[i], info.mins[i], info.maxs[i], info.chances[i]);\\n    }\\n  }\\n\\n  function unpackItemGenerateInfo(bytes32[] memory gen) internal pure returns (\\n    IItemController.ItemGenerateInfo memory\\n  ) {\\n    uint length = gen.length;\\n\\n    uint8[] memory ids = new uint8[](length);\\n    int32[] memory mins = new int32[](length);\\n    int32[] memory maxs = new int32[](length);\\n    uint32[] memory chances = new uint32[](length);\\n\\n    for (uint i; i < length; ++i) {\\n      (ids[i], mins[i], maxs[i], chances[i]) = gen[i].unpackItemGenerateInfo();\\n    }\\n\\n    return IItemController.ItemGenerateInfo(ids, mins, maxs, chances);\\n  }\\n\\n  function packItemMeta(IItemController.ItemMeta memory meta) internal pure returns (bytes32) {\\n    return PackingLib.packItemMeta(\\n      meta.itemMetaType,\\n      meta.itemLevel,\\n      uint8(meta.itemType),\\n      meta.baseDurability,\\n      meta.defaultRarity,\\n      meta.minRandomAttributes,\\n      meta.maxRandomAttributes,\\n      meta.manaCost,\\n      meta.requirements\\n    );\\n  }\\n\\n  function unpackedItemMeta(bytes32 meta) internal pure returns (IItemController.ItemMeta memory result) {\\n    return meta.unpackItemMeta();\\n  }\\n\\n  function packItemInfo(IItemController.ItemInfo memory info) internal pure returns (bytes32) {\\n    return PackingLib.packItemInfo(uint8(info.rarity), info.augmentationLevel, info.durability);\\n  }\\n\\n  function unpackedItemInfo(bytes32 info) internal pure returns (IItemController.ItemInfo memory result) {\\n    uint8 rarity;\\n    (rarity, result.augmentationLevel, result.durability) = info.unpackItemInfo();\\n\\n    result.rarity = IItemController.ItemRarity(rarity);\\n    return result;\\n  }\\n\\n  function packItemAttackInfo(IItemController.AttackInfo memory info) internal pure returns (bytes32) {\\n    return PackingLib.packItemAttackInfo(\\n      uint8(info.aType),\\n      info.min,\\n      info.max,\\n      info.attributeFactors.strength,\\n      info.attributeFactors.dexterity,\\n      info.attributeFactors.vitality,\\n      info.attributeFactors.energy\\n    );\\n  }\\n\\n  function unpackItemAttackInfo(bytes32 info) internal pure returns (IItemController.AttackInfo memory result) {\\n    IStatController.CoreAttributes memory fs;\\n    uint8 aType;\\n    (aType, result.min, result.max, fs.strength, fs.dexterity, fs.vitality, fs.energy) = info.unpackItemAttackInfo();\\n\\n    result.aType = IItemController.AttackType(aType);\\n    result.attributeFactors = fs;\\n\\n    return result;\\n  }\\n  //endregion ------------------------ PACKING\\n}\\n\",\"keccak256\":\"0x35be525f87553c0d2c6066c366baa6cb25ec073cdb9dab01efdd0db3b98449b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/ItemStatsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n\\nimport \\\"./PackingLib.sol\\\";\\nimport \\\"./ItemLib.sol\\\";\\nimport \\\"./AppLib.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./ScoreLib.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IReinforcementController.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IItem.sol\\\";\\nimport \\\"../interfaces/IDungeonFactory.sol\\\";\\nimport \\\"../interfaces/IApplicationEvents.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\n\\nlibrary ItemStatsLib {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using CalcLib for int32;\\n  using PackingLib for address;\\n  using PackingLib for bytes32;\\n  using PackingLib for bytes32[];\\n  using PackingLib for uint32[];\\n  using PackingLib for int32[];\\n\\n  //region ------------------------ CONSTANTS\\n\\n  uint private constant AUGMENT_CHANCE = 0.7e18;\\n  /// @dev should be 20%\\n  uint private constant AUGMENT_FACTOR = 5;\\n  uint private constant DURABILITY_REDUCTION = 3;\\n  uint private constant MAX_AUGMENTATION_LEVEL = 10;\\n\\n  /// @dev keccak256(abi.encode(uint256(keccak256(\\\"item.controller.main\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 internal constant MAIN_STORAGE_LOCATION = 0xe78a2879cd91c3f7b62ea14e72546fed47c40919bca4daada532a5fa05ac6700;\\n\\n  //endregion ------------------------ CONSTANTS\\n\\n  //region ------------------------ STRUCTS\\n\\n  struct EquipLocalContext {\\n    IStatController statController;\\n    IDungeonFactory dungeonFactory;\\n    IHeroController hc;\\n    address payToken;\\n    address heroToken;\\n    uint heroTokenId;\\n//    IItemController.ItemMeta meta;\\n//    IItemController.ItemInfo itemInfo;\\n//    bytes32[] attributes;\\n  }\\n\\n  struct ReduceDurabilityContext {\\n    /// @notice values 0 or 1 for SKILL_1, SKILL_2, SKILL_3\\n    uint8[] skillSlots;\\n    uint8[] busySlots;\\n    IStatController statController;\\n    address itemAdr;\\n    uint16 durability;\\n    uint itemId;\\n  }\\n\\n  struct TakeOffContext {\\n    bool broken;\\n    IController controller;\\n\\n    address msgSender;\\n    address heroToken;\\n    address destination;\\n    IHeroController heroController;\\n    IDungeonFactory dungeonFactory;\\n    IStatController statController;\\n\\n    uint heroTokenId;\\n  }\\n  //endregion ------------------------ STRUCTS\\n\\n  //region ------------------------ STORAGE\\n  function _S() internal pure returns (IItemController.MainState storage s) {\\n    assembly {\\n      s.slot := MAIN_STORAGE_LOCATION\\n    }\\n    return s;\\n  }\\n  //endregion ------------------------ STORAGE\\n\\n  //region ------------------------ RESTRICTIONS\\n\\n  function onlyDeployer(IController c, address sender) internal view {\\n    if (!c.isDeployer(sender)) revert IAppErrors.ErrorNotDeployer(sender);\\n  }\\n\\n  function onlyOwner(address token, uint tokenId, address sender) internal view {\\n    if (IERC721(token).ownerOf(tokenId) != sender) revert IAppErrors.ErrorNotHeroOwner(token, sender);\\n  }\\n\\n  function onlyEOA(bool isEoa) internal view {\\n    if (!isEoa) {\\n      revert IAppErrors.NotEOA(msg.sender);\\n    }\\n  }\\n  //endregion ------------------------ RESTRICTIONS\\n\\n  //region ------------------------ REGISTER\\n\\n  function registerItem(\\n    IController controller,\\n    address msgSender,\\n    address item,\\n    IItemController.RegisterItemParams calldata info\\n  ) internal {\\n    onlyDeployer(controller, msgSender);\\n    IItemController.MainState storage s = _S();\\n\\n    if (info.itemMeta.itemMetaType == 0) revert IAppErrors.ZeroItemMetaType();\\n    if (info.itemMeta.itemLevel == 0) revert IAppErrors.ZeroLevel();\\n\\n    if (!s.items.add(item)) {\\n      IItemController.ItemMeta memory existMeta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n        // we should not change types for existed items\\n      if (existMeta.itemType != info.itemMeta.itemType) revert IAppErrors.ItemTypeChanged();\\n      if (existMeta.itemMetaType != info.itemMeta.itemMetaType) revert IAppErrors.ItemMetaTypeChanged();\\n    }\\n\\n    s.itemMeta[item] = ItemLib.packItemMeta(info.itemMeta);\\n\\n    s.augmentInfo[item] = PackingLib.packAddressWithAmount(info.augmentToken, info.augmentAmount);\\n\\n    _setAttributesWithCheck(item, info.commonAttributes, s.generateInfoAttributes);\\n\\n    if (info.itemMeta.itemMetaType == uint8(IItemController.ItemMetaType.CONSUMABLE)) {\\n      s._itemConsumableAttributes[item] = info.consumableAttributes.values.toBytes32ArrayWithIds(info.consumableAttributes.ids);\\n\\n      s.itemConsumableStats[item] = StatLib.packChangeableStats(info.consumableStats);\\n    }\\n\\n    if (info.itemMeta.itemMetaType == uint8(IItemController.ItemMetaType.BUFF)) {\\n      _setAttributesWithCheck(item, info.casterAttributes, s.generateInfoCasterAttributes);\\n\\n      _setAttributesWithCheck(item, info.targetAttributes, s.generateInfoTargetAttributes);\\n    }\\n\\n    if (info.itemMeta.itemMetaType == uint8(IItemController.ItemMetaType.ATTACK)) {\\n      s.generateInfoAttack[item] = ItemLib.packItemAttackInfo(info.genAttackInfo);\\n\\n      // need to set default attack info for zero id, it will be used in monsters attacks\\n      s._itemAttackInfo[item.packNftId(0)] = ItemLib.packItemAttackInfo(info.genAttackInfo);\\n    }\\n\\n    emit IApplicationEvents.ItemRegistered(item, info);\\n  }\\n\\n  /// @notice  Ensure: min != 0, max != 0 and both min and min should have same sign\\n  /// Value of attribute cannot be equal to 0 because toBytes32ArrayWithIds cannot store zero values.\\n  function _setAttributesWithCheck(\\n    address item,\\n    IItemController.ItemGenerateInfo memory data,\\n    mapping(address => bytes32[]) storage dest\\n  ) internal {\\n    for (uint i = 0; i < data.ids.length; ++i) {\\n      if (\\n        data.mins[i] == 0\\n        || data.maxs[i] == 0\\n        || data.mins[i] > data.maxs[i]\\n        || (data.mins[i] < 0 && data.maxs[i] > 0)\\n      ) revert IAppErrors.IncorrectMinMaxAttributeRange(data.mins[i], data.maxs[i]);\\n    }\\n\\n    dest[item] = ItemLib.packItemGenerateInfo(data);\\n  }\\n\\n  function removeItem(IController controller, address msgSender, address item) internal {\\n    IItemController.MainState storage s = _S();\\n    onlyDeployer(controller, msgSender);\\n\\n    s.items.remove(item);\\n\\n    delete s.itemMeta[item];\\n    delete s.augmentInfo[item];\\n    delete s.generateInfoAttributes[item];\\n    delete s._itemConsumableAttributes[item];\\n    delete s.itemConsumableStats[item];\\n    delete s.generateInfoCasterAttributes[item];\\n    delete s.generateInfoTargetAttributes[item];\\n    delete s.generateInfoAttack[item];\\n    delete s._itemAttackInfo[item.packNftId(0)];\\n\\n    emit IApplicationEvents.ItemRemoved(item);\\n  }\\n  //endregion ------------------------ REGISTER\\n\\n  //region ------------------------ EQUIP\\n\\n  function isItemEquipped(IItemController.MainState storage s, address item, uint itemId) internal view returns (bool) {\\n    return s.equippedOn[item.packNftId(itemId)] != bytes32(0);\\n  }\\n\\n  function equipMany(\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address heroToken,\\n    uint heroTokenId,\\n    address[] calldata items,\\n    uint[] calldata itemIds,\\n    uint8[] calldata itemSlots\\n  ) internal {\\n    onlyEOA(isEoa);\\n    IItemController.MainState storage s = _S();\\n    if (items.length != itemIds.length || items.length != itemSlots.length) revert IAppErrors.LengthsMismatch();\\n\\n    EquipLocalContext memory ctx;\\n    ctx.statController = IStatController(controller.statController());\\n    ctx.dungeonFactory = IDungeonFactory(controller.dungeonFactory());\\n    ctx.hc = IHeroController(controller.heroController());\\n    (ctx.payToken,) = ctx.hc.payTokenInfo(heroToken);\\n    ctx.heroTokenId = heroTokenId;\\n    ctx.heroToken = heroToken;\\n\\n    _checkHeroAndController(controller, ctx.hc, msgSender, heroToken, heroTokenId);\\n    if (ctx.dungeonFactory.currentDungeon(heroToken, heroTokenId) != 0) revert IAppErrors.EquipForbiddenInDungeon();\\n\\n    if (ctx.payToken == address(0)) revert IAppErrors.ErrorEquipForbidden();\\n\\n    for (uint i; i < items.length; ++i) {\\n      _equip(s, ctx, msgSender, items[i], itemIds[i], itemSlots[i]);\\n    }\\n  }\\n\\n  /// @notice Equip the item, add bonus attributes, transfer the item from the sender to the hero token\\n  function _equip(\\n    IItemController.MainState storage s,\\n    EquipLocalContext memory c,\\n    address msgSender,\\n    address item,\\n    uint itemId,\\n    uint8 itemSlot\\n  ) internal {\\n    onlyOwner(item, itemId, msgSender);\\n\\n    IItemController.ItemMeta memory meta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n    IItemController.ItemInfo memory _itemInfo = ItemLib.unpackedItemInfo(s.itemInfo[item.packNftId(itemId)]);\\n\\n    if (meta.itemMetaType == 0) revert IAppErrors.UnknownItem(item);\\n    if (isItemEquipped(s, item, itemId)) revert IAppErrors.ItemIsAlreadyEquipped(item);\\n\\n    if (uint(meta.itemType) == 0) revert IAppErrors.Consumable(item);\\n    if (meta.baseDurability != 0 && _itemInfo.durability == 0) revert IAppErrors.Broken(item);\\n    _checkRequirements(c.statController, c.heroToken, c.heroTokenId, meta.requirements);\\n\\n    c.statController.changeHeroItemSlot(\\n      c.heroToken,\\n      uint64(c.heroTokenId),\\n      uint(meta.itemType),\\n      itemSlot,\\n      item,\\n      itemId,\\n      true\\n    );\\n\\n    bytes32[] memory attributes = s._itemAttributes[item.packNftId(itemId)];\\n    if (attributes.length != 0) {\\n      c.statController.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: c.heroToken,\\n        heroTokenId: c.heroTokenId,\\n        changeAttributes: StatLib.bytesToFullAttributesArray(attributes),\\n        add: true,\\n        temporally: false\\n      }));\\n\\n      // some items can reduce hero life to zero, prevent this\\n      if (c.statController.heroStats(c.heroToken, c.heroTokenId).life == 0) revert IAppErrors.ZeroLife();\\n    }\\n\\n    // transfer item to hero\\n    IItem(item).controlledTransfer(msgSender, c.heroToken, itemId);\\n    // need to equip after transfer for properly checks\\n    s.equippedOn[item.packNftId(itemId)] = c.heroToken.packNftId(c.heroTokenId);\\n\\n    emit IApplicationEvents.Equipped(item, itemId, c.heroToken, c.heroTokenId, itemSlot);\\n  }\\n\\n  function _checkRequirements(\\n    IStatController statController,\\n    address heroToken,\\n    uint heroTokenId,\\n    IStatController.CoreAttributes memory requirements\\n  ) internal view {\\n    IStatController.CoreAttributes memory attributes = statController.heroBaseAttributes(heroToken, heroTokenId);\\n    if (\\n      requirements.strength > attributes.strength\\n      || requirements.dexterity > attributes.dexterity\\n      || requirements.vitality > attributes.vitality\\n      || requirements.energy > attributes.energy\\n    ) revert IAppErrors.RequirementsToItemAttributes();\\n  }\\n\\n  /// @notice Check requirements for the hero and for the controller state before equip/take off/use items\\n  function _checkHeroAndController(\\n    IController controller,\\n    IHeroController heroController,\\n    address msgSender,\\n    address heroToken,\\n    uint heroTokenId\\n  ) internal view {\\n    onlyOwner(heroToken, heroTokenId, msgSender);\\n    if (IReinforcementController(controller.reinforcementController()).isStaked(heroToken, heroTokenId)) revert IAppErrors.Staked(heroToken, heroTokenId);\\n    if (controller.onPause()) revert IAppErrors.ErrorPaused();\\n    if (heroController.heroClass(heroToken) == 0) revert IAppErrors.ErrorHeroIsNotRegistered(heroToken);\\n  }\\n  //endregion ------------------------ EQUIP\\n\\n  //region ------------------------ TAKE OFF\\n\\n  function takeOffMany(\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address heroToken,\\n    uint heroTokenId,\\n    address[] calldata items,\\n    uint[] calldata tokenIds,\\n    uint8[] calldata itemSlots\\n  ) internal {\\n    onlyEOA(isEoa);\\n\\n    TakeOffContext memory ctx = ItemStatsLib.TakeOffContext({\\n      controller: controller,\\n      msgSender: msgSender,\\n      heroToken: heroToken,\\n      heroTokenId: heroTokenId,\\n      destination: msgSender,\\n      broken: false,\\n      heroController: IHeroController(controller.heroController()),\\n      dungeonFactory: IDungeonFactory(controller.dungeonFactory()),\\n      statController: IStatController(controller.statController())\\n    });\\n\\n    IItemController.MainState storage s = _S();\\n    uint len = items.length;\\n    if (len != tokenIds.length || len != itemSlots.length) revert IAppErrors.LengthsMismatch();\\n\\n    for (uint i; i < len; ++i) {\\n      _takeOffWithChecks(s, ctx, items[i], tokenIds[i], itemSlots[i]);\\n    }\\n  }\\n\\n  /// @dev Some stories can manipulate items\\n  function takeOffDirectly(\\n    IController controller,\\n    address item,\\n    uint itemId,\\n    address hero,\\n    uint heroId,\\n    uint8 itemSlot,\\n    address destination,\\n    bool broken\\n  ) internal {\\n    if (controller.storyController() != msg.sender && controller.heroController() != msg.sender) {\\n      revert IAppErrors.ErrorForbidden(msg.sender);\\n    }\\n    ItemStatsLib._takeOff(_S(), IStatController(controller.statController()), item, itemId, hero, heroId, itemSlot, destination, broken);\\n  }\\n\\n  function _takeOffWithChecks(\\n    IItemController.MainState storage s,\\n    TakeOffContext memory ctx,\\n    address item,\\n    uint itemId,\\n    uint8 itemSlot\\n  ) internal {\\n    _checkHeroAndController(ctx.controller,\\n      ctx.heroController,\\n      ctx.msgSender,\\n      ctx.heroToken,\\n      ctx.heroTokenId\\n    );\\n    if (ctx.dungeonFactory.currentDungeon(ctx.heroToken, ctx.heroTokenId) != 0) revert IAppErrors.TakeOffForbiddenInDungeon();\\n\\n    if (s.equippedOn[item.packNftId(itemId)] != ctx.heroToken.packNftId(ctx.heroTokenId)) revert IAppErrors.NotEquipped(item);\\n\\n    _takeOff(s, ctx.statController, item, itemId, ctx.heroToken, ctx.heroTokenId, itemSlot, ctx.destination, ctx.broken);\\n  }\\n\\n  /// @notice Take off the item, remove bonus attributes, transfer the item from the hero token to {destination}\\n  /// @param broken True if the item is broken. The durability of the broken item will be set to 0.\\n  function _takeOff(\\n    IItemController.MainState storage s,\\n    IStatController statController,\\n    address item,\\n    uint itemId,\\n    address heroToken,\\n    uint heroTokenId,\\n    uint8 itemSlot,\\n    address destination,\\n    bool broken\\n  ) internal {\\n    bytes32 packedItemId = item.packNftId(itemId);\\n    IItemController.ItemMeta memory meta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n    IItemController.ItemInfo memory _itemInfo = ItemLib.unpackedItemInfo(s.itemInfo[packedItemId]);\\n\\n    if (uint(meta.itemType) == 0) revert IAppErrors.Consumable(item);\\n\\n    statController.changeHeroItemSlot(\\n      heroToken,\\n      uint64(heroTokenId),\\n      uint(meta.itemType),\\n      itemSlot,\\n      item,\\n      itemId,\\n      false\\n    );\\n\\n    if (broken) {\\n      _itemInfo.durability = 0;\\n      s.itemInfo[packedItemId] = ItemLib.packItemInfo(_itemInfo);\\n    }\\n\\n    bytes32[] memory attributes = s._itemAttributes[packedItemId];\\n    if (attributes.length != 0) {\\n      statController.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: heroToken,\\n        heroTokenId: heroTokenId,\\n        changeAttributes: StatLib.bytesToFullAttributesArray(attributes),\\n        add: false,\\n        temporally: false\\n      }));\\n    }\\n\\n    // need to take off before transfer for properly checks\\n    s.equippedOn[packedItemId] = bytes32(0);\\n    IItem(item).controlledTransfer(heroToken, destination, itemId);\\n\\n    emit IApplicationEvents.TakenOff(item, itemId, heroToken, heroTokenId, itemSlot, destination);\\n  }\\n  //endregion ------------------------ TAKE OFF\\n\\n  //region ------------------------ AUGMENT and REPAIR\\n\\n  /// @notice Initialization for augment() and repairDurability()\\n  /// Get {meta} and {info}, check some restrictions\\n  function _prepareToAugment(\\n    IItemController.MainState storage s,\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address item,\\n    uint itemId,\\n    uint consumedItemId\\n  ) internal view returns(\\n    IItemController.ItemMeta memory meta,\\n    IItemController.ItemInfo memory info\\n  ) {\\n    onlyEOA(isEoa);\\n    if (itemId == consumedItemId) revert IAppErrors.SameIdsNotAllowed();\\n    onlyOwner(item, itemId, msgSender);\\n    onlyOwner(item, consumedItemId, msgSender);\\n\\n    meta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n    info = ItemLib.unpackedItemInfo(s.itemInfo[item.packNftId(itemId)]);\\n\\n    if (isItemEquipped(s, item, itemId) || isItemEquipped(s, item, consumedItemId)) revert IAppErrors.ItemEquipped();\\n    if (controller.onPause()) revert IAppErrors.ErrorPaused();\\n  }\\n\\n  /// @notice Destroy {consumed item} to repair durability of the {item}\\n  function repairDurability(\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address item,\\n    uint itemId,\\n    uint consumedItemId\\n  ) external {\\n    // restrictions are checked inside {_prepareToAugment}\\n    IItemController.MainState storage s = _S();\\n    (\\n      IItemController.ItemMeta memory meta,\\n      IItemController.ItemInfo memory _itemInfo\\n    ) = _prepareToAugment(s, isEoa, controller, msgSender, item, itemId, consumedItemId);\\n\\n    if (meta.baseDurability == 0) revert IAppErrors.ZeroDurability();\\n\\n    _destroy(item, consumedItemId);\\n    _sendFee(s, controller, item, msgSender, IItemController.FeeType.REPAIR);\\n\\n    _itemInfo.durability = meta.baseDurability;\\n    s.itemInfo[item.packNftId(itemId)] = ItemLib.packItemInfo(_itemInfo);\\n\\n    emit IApplicationEvents.ItemRepaired(item, itemId, consumedItemId, meta.baseDurability);\\n  }\\n\\n  /// @notice Destroy {consumed item} to augment given {item}.\\n  /// There is a chance of 30% that the item will be destroyed instead of augmentation.\\n  function augment(\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address item,\\n    uint itemId,\\n    uint consumedItemId\\n  ) external {\\n    // restrictions are checked inside {_prepareToAugment}\\n    IItemController.MainState storage s = _S();\\n    (\\n      IItemController.ItemMeta memory meta,\\n      IItemController.ItemInfo memory _itemInfo\\n    ) = _prepareToAugment(s, isEoa, controller, msgSender, item, itemId, consumedItemId);\\n\\n    if (meta.itemMetaType == uint8(IItemController.ItemMetaType.CONSUMABLE)) revert IAppErrors.Consumable(item);\\n    if (_itemInfo.augmentationLevel >= MAX_AUGMENTATION_LEVEL) revert IAppErrors.TooHighAgLevel(_itemInfo.augmentationLevel);\\n\\n    _destroy(item, consumedItemId);\\n\\n    address augToken = _sendFee(s, controller, item, msgSender, IItemController.FeeType.AUGMENT);\\n    // we check augToken for 0 AFTER sendFee to avoid second reading of augmentInfo\\n    if (augToken == address(0)) revert IAppErrors.ZeroAugmentation();\\n\\n    if (IOracle(controller.oracle()).getRandomNumber(1e18, 0) < AUGMENT_CHANCE) {\\n      IItemController.AugmentInfo memory _augmentInfo;\\n      bytes32 packedItemId = item.packNftId(itemId);\\n\\n      // augment base\\n      (_augmentInfo.attributesValues, _augmentInfo.attributesIds) = _augmentAttributes(s._itemAttributes[packedItemId], true);\\n      s._itemAttributes[packedItemId] = _augmentInfo.attributesValues.toBytes32ArrayWithIds(_augmentInfo.attributesIds);\\n\\n      // additionally\\n      if (meta.itemMetaType == uint8(IItemController.ItemMetaType.ATTACK)) {\\n        _augmentInfo.attackInfo = ItemLib.unpackItemAttackInfo(s._itemAttackInfo[packedItemId]);\\n        _augmentInfo.attackInfo.min = _augmentAttribute(_augmentInfo.attackInfo.min);\\n        _augmentInfo.attackInfo.max = _augmentAttribute(_augmentInfo.attackInfo.max);\\n        s._itemAttackInfo[packedItemId] = ItemLib.packItemAttackInfo(_augmentInfo.attackInfo);\\n      } else if (meta.itemMetaType == uint8(IItemController.ItemMetaType.BUFF)) {\\n        // caster\\n        (_augmentInfo.casterValues, _augmentInfo.casterIds) = _augmentAttributes(s._itemCasterAttributes[packedItemId], true);\\n        s._itemCasterAttributes[packedItemId] = _augmentInfo.casterValues.toBytes32ArrayWithIds(_augmentInfo.casterIds);\\n\\n        // target\\n        (_augmentInfo.targetValues, _augmentInfo.targetIds) = _augmentAttributes(s._itemTargetAttributes[packedItemId], false);\\n        s._itemTargetAttributes[packedItemId] = _augmentInfo.targetValues.toBytes32ArrayWithIds(_augmentInfo.targetIds);\\n      }\\n\\n      // increase aug level\\n      _itemInfo.augmentationLevel = _itemInfo.augmentationLevel + 1;\\n      s.itemInfo[packedItemId] = ItemLib.packItemInfo(_itemInfo);\\n\\n      emit IApplicationEvents.Augmented(item, itemId, consumedItemId, _itemInfo.augmentationLevel, _augmentInfo);\\n    } else {\\n      _destroy(item, itemId);\\n      emit IApplicationEvents.NotAugmented(item, itemId, consumedItemId, _itemInfo.augmentationLevel);\\n    }\\n  }\\n\\n  /// @notice Modify either positive or negative values\\n  /// @param ignoreNegative True - leave unchanged all negative values, False - don't change all positive values\\n  function _augmentAttributes(bytes32[] memory packedAttr, bool ignoreNegative) internal pure returns (\\n    int32[] memory values,\\n    uint8[] memory ids\\n  ) {\\n    (values, ids) = packedAttr.toInt32ArrayWithIds();\\n    for (uint i; i < values.length; ++i) {\\n      // do not increase destroy item attribute\\n      if(uint(ids[i]) == uint(IStatController.ATTRIBUTES.DESTROY_ITEMS)) {\\n        continue;\\n      }\\n      if ((ignoreNegative && values[i] > 0) || (!ignoreNegative && values[i] < 0)) {\\n        values[i] = _augmentAttribute(values[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Increase/decrease positive/negative value on ceil(value/20) but at least on 1\\n  function _augmentAttribute(int32 value) internal pure returns (int32) {\\n    if (value == 0) {\\n      return 0;\\n    }\\n    // bonus must be not lower than 1\\n    if (value > 0) {\\n      return value + int32(int(Math.max(Math.ceilDiv(value.toUint(), AUGMENT_FACTOR), 1)));\\n    } else {\\n      return value - int32(int(Math.max(Math.ceilDiv((- value).toUint(), AUGMENT_FACTOR), 1)));\\n    }\\n  }\\n  //endregion ------------------------ AUGMENT and REPAIR\\n\\n  //region ------------------------ NEW ITEM CREATION\\n\\n  function mintNewItem(\\n    IController controller,\\n    address sender,\\n    address item,\\n    address recipient\\n  ) internal returns (uint itemId) {\\n    return ItemLib.mintNewItem(_S(), controller, sender, item, recipient);\\n  }\\n  //endregion ------------------------ NEW ITEM CREATION\\n\\n  //region ------------------------ REDUCE DURABILITY\\n\\n  /// @notice Reduce durability of all equipped items except items of SKILL-type.\\n  function reduceEquippedItemsDurability(\\n    IController controller,\\n    address msgSender,\\n    address hero,\\n    uint heroId,\\n    uint8 biome\\n  ) external {\\n    address dungeonFactory = controller.dungeonFactory();\\n    if (dungeonFactory != msgSender) revert IAppErrors.ErrorNotDungeonFactory(msgSender);\\n    IItemController.MainState storage s = _S();\\n\\n    ReduceDurabilityContext memory ctx;\\n    ctx.skillSlots = IDungeonFactory(dungeonFactory).skillSlotsForDurabilityReduction(hero, heroId);\\n    ctx.statController = IStatController(controller.statController());\\n    ctx.busySlots = ctx.statController.heroItemSlots(hero, heroId);\\n\\n    for (uint i; i < ctx.busySlots.length; ++i) {\\n\\n      if (\\n        (ctx.busySlots[i] == uint8(IStatController.ItemSlots.SKILL_1) && ctx.skillSlots[0] == 0)\\n        || (ctx.busySlots[i] == uint8(IStatController.ItemSlots.SKILL_2) && ctx.skillSlots[1] == 0)\\n        || (ctx.busySlots[i] == uint8(IStatController.ItemSlots.SKILL_3) && ctx.skillSlots[2] == 0)\\n      ) {\\n        continue;\\n      }\\n\\n      (ctx.itemAdr, ctx.itemId) = ctx.statController.heroItemSlot(hero, uint64(heroId), ctx.busySlots[i]).unpackNftId();\\n      ctx.durability = _reduceDurabilityForItem(s, ctx.itemAdr, ctx.itemId, biome);\\n\\n      // if broken need to take off\\n      if (ctx.durability == 0) {\\n        _takeOff(\\n          s,\\n          ctx.statController,\\n          ctx.itemAdr,\\n          ctx.itemId,\\n          hero,\\n          heroId,\\n          ctx.busySlots[i],\\n          IERC721(hero).ownerOf(heroId),\\n          false\\n        );\\n      }\\n\\n    }\\n  }\\n\\n  /// @notice newDurability Calculate new durability for the {item}, update {itemInfo}\\n  function _reduceDurabilityForItem(\\n    IItemController.MainState storage s,\\n    address item,\\n    uint itemId,\\n    uint biome\\n  ) internal returns (uint16 newDurability) {\\n    IItemController.ItemMeta memory meta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n    IItemController.ItemInfo memory _itemInfo = ItemLib.unpackedItemInfo(s.itemInfo[item.packNftId(itemId)]);\\n\\n    newDurability = uint16(_calcReduceDurability(biome, _itemInfo.durability, meta.itemLevel, meta.itemType));\\n\\n    _itemInfo.durability = newDurability;\\n    s.itemInfo[item.packNftId(itemId)] = ItemLib.packItemInfo(_itemInfo);\\n\\n    emit IApplicationEvents.ReduceDurability(item, itemId, newDurability);\\n  }\\n\\n  /// @return New (reduced) value for the current durability\\n  function _calcReduceDurability(\\n    uint biome,\\n    uint currentDurability,\\n    uint8 itemLevel,\\n    IItemController.ItemType itemType\\n  ) internal pure returns (uint) {\\n    uint value = DURABILITY_REDUCTION;\\n\\n    if (itemType != IItemController.ItemType.SKILL) {\\n      uint itemBiomeLevel = uint(itemLevel) / StatLib.BIOME_LEVEL_STEP + 1;\\n      if (itemBiomeLevel < biome) {\\n        value = DURABILITY_REDUCTION * ((biome - itemBiomeLevel + 1) ** 2 / 2);\\n      }\\n    }\\n\\n    return currentDurability > value\\n      ? currentDurability - value\\n      : 0;\\n  }\\n  //endregion ------------------------ REDUCE DURABILITY\\n\\n  //region ------------------------ DESTROY\\n\\n  function destroy(IController controller, address msgSender, address item, uint itemId) external {\\n    if (\\n      controller.gameObjectController() != msgSender\\n      && controller.storyController() != msgSender\\n      && IERC721(item).ownerOf(itemId) != msgSender\\n    ) {\\n      revert IAppErrors.ErrorForbidden(msgSender);\\n    }\\n\\n    if (isItemEquipped(_S(), item, itemId)) revert IAppErrors.ItemEquipped();\\n\\n    _destroy(item, itemId);\\n  }\\n\\n  function _destroy(address item, uint itemId) internal {\\n    IItem(item).burn(itemId);\\n    emit IApplicationEvents.Destroyed(item, itemId);\\n  }\\n  //endregion ------------------------ DESTROY\\n\\n  //region ------------------------ FEE\\n\\n  /// @return augToken Return augToken to avoid repeat reading of augmentInfo inside augment()\\n  function _sendFee(\\n    IItemController.MainState storage s,\\n    IController controller,\\n    address item,\\n    address msgSender,\\n    IItemController.FeeType feeType\\n  ) internal returns (address augToken) {\\n    (address token, uint amount) = s.augmentInfo[item].unpackAddressWithAmount();\\n    if (token != address(0)) {\\n      address treasury = controller.treasury();\\n      IERC20(token).transferFrom(msgSender, address(this), amount);\\n\\n      AppLib.approveIfNeeded(token, amount, treasury);\\n      ITreasury(treasury).sendFee(token, amount, feeType);\\n    }\\n    return token;\\n  }\\n  //endregion ------------------------ FEE\\n\\n  //region ------------------------ USE\\n\\n  /// @notice Use consumable item to temporally increase bonus attributes and destroy the item\\n  function use(\\n    bool isEoa,\\n    IController controller,\\n    address msgSender,\\n    address item,\\n    uint itemId,\\n    address heroToken,\\n    uint heroTokenId\\n  ) external {\\n    onlyEOA(isEoa);\\n    onlyOwner(item, itemId, msgSender);\\n\\n    IItemController.MainState storage s = _S();\\n\\n    IStatController statController = IStatController(controller.statController());\\n    IHeroController hc = IHeroController(controller.heroController());\\n\\n    (address payToken,) = hc.payTokenInfo(heroToken);\\n    if (payToken == address(0)) revert IAppErrors.UseForbiddenZeroPayToken();\\n\\n    _checkHeroAndController(controller, hc, msgSender, heroToken, heroTokenId);\\n\\n    IItemController.ItemMeta memory meta = ItemLib.unpackedItemMeta(s.itemMeta[item]);\\n    if (uint8(meta.itemType) != 0) revert IAppErrors.NotConsumable(item);\\n    _checkRequirements(statController, heroToken, heroTokenId, meta.requirements);\\n\\n    statController.registerConsumableUsage(heroToken, heroTokenId, item);\\n\\n    statController.changeCurrentStats(heroToken, heroTokenId, StatLib.unpackChangeableStats(s.itemConsumableStats[item]), true);\\n\\n    bytes32[] memory itemConsumableAttributes = s._itemConsumableAttributes[item];\\n    if (itemConsumableAttributes.length != 0) {\\n      int32[] memory attributes = StatLib.bytesToFullAttributesArray(itemConsumableAttributes);\\n      statController.changeBonusAttributes(IStatController.ChangeAttributesInfo({\\n        heroToken: heroToken,\\n        heroTokenId: heroTokenId,\\n        changeAttributes: attributes,\\n        add: true,\\n        temporally: true\\n      }));\\n    }\\n\\n    _destroy(item, itemId);\\n    emit IApplicationEvents.Used(item, itemId, heroToken, heroTokenId);\\n  }\\n  //endregion ------------------------ USE\\n\\n  //region ------------------------ VIEWS\\n  function itemByIndex(uint idx) internal view returns (address) {\\n    return _S().items.at(idx);\\n  }\\n\\n  function itemsLength() internal view returns (uint) {\\n    return _S().items.length();\\n  }\\n\\n  function itemMeta(address item) internal view returns (IItemController.ItemMeta memory meta) {\\n    return ItemLib.unpackedItemMeta(_S().itemMeta[item]);\\n  }\\n\\n  function augmentInfo(address item) internal view returns (address token, uint amount) {\\n    return PackingLib.unpackAddressWithAmount(_S().augmentInfo[item]);\\n  }\\n\\n  function genAttributeInfo(address item) internal view returns (IItemController.ItemGenerateInfo memory info) {\\n    return ItemLib.unpackItemGenerateInfo(_S().generateInfoAttributes[item]);\\n  }\\n\\n  function genCasterAttributeInfo(address item) internal view returns (IItemController.ItemGenerateInfo memory info) {\\n    return ItemLib.unpackItemGenerateInfo(_S().generateInfoCasterAttributes[item]);\\n  }\\n\\n  function genTargetAttributeInfo(address item) internal view returns (IItemController.ItemGenerateInfo memory info) {\\n    return ItemLib.unpackItemGenerateInfo(_S().generateInfoTargetAttributes[item]);\\n  }\\n\\n  function genAttackInfo(address item) internal view returns (IItemController.AttackInfo memory info) {\\n    return ItemLib.unpackItemAttackInfo(_S().generateInfoAttack[item]);\\n  }\\n\\n  function itemInfo(address item, uint itemId) internal view returns (IItemController.ItemInfo memory info) {\\n    return ItemLib.unpackedItemInfo(_S().itemInfo[PackingLib.packNftId(item, itemId)]);\\n  }\\n\\n  function equippedOn(address item, uint itemId) internal view returns (address hero, uint heroId) {\\n    return PackingLib.unpackNftId(_S().equippedOn[item.packNftId(itemId)]);\\n  }\\n\\n  function itemAttributes(address item, uint itemId) internal view returns (int32[] memory values, uint8[] memory ids) {\\n    return PackingLib.toInt32ArrayWithIds(_S()._itemAttributes[PackingLib.packNftId(item, itemId)]);\\n  }\\n\\n  function consumableAttributes(address item) internal view returns (int32[] memory values, uint8[] memory ids) {\\n    return PackingLib.toInt32ArrayWithIds(_S()._itemConsumableAttributes[item]);\\n  }\\n\\n  function consumableStats(address item) internal view returns (IStatController.ChangeableStats memory stats) {\\n    return StatLib.unpackChangeableStats(_S().itemConsumableStats[item]);\\n  }\\n\\n  function casterAttributes(address item, uint itemId) internal view returns (int32[] memory values, uint8[] memory ids) {\\n    return PackingLib.toInt32ArrayWithIds(_S()._itemCasterAttributes[PackingLib.packNftId(item, itemId)]);\\n  }\\n\\n  function targetAttributes(address item, uint itemId) internal view returns (int32[] memory values, uint8[] memory ids) {\\n    return PackingLib.toInt32ArrayWithIds(_S()._itemTargetAttributes[PackingLib.packNftId(item, itemId)]);\\n  }\\n\\n  function itemAttackInfo(address item, uint itemId) internal view returns (IItemController.AttackInfo memory info) {\\n    return ItemLib.unpackItemAttackInfo(_S()._itemAttackInfo[PackingLib.packNftId(item, itemId)]);\\n  }\\n\\n  function score(address item, uint itemId) external view returns (uint) {\\n    return ScoreLib.itemScore(\\n      StatLib.bytesToFullAttributesArray(_S()._itemAttributes[PackingLib.packNftId(item, itemId)]),\\n      ItemLib.unpackedItemMeta(_S().itemMeta[item]).baseDurability\\n    );\\n  }\\n\\n  function isAllowedToTransfer(address item, uint itemId) internal view returns (bool) {\\n    return _S().equippedOn[item.packNftId(itemId)] == bytes32(0);\\n  }\\n  //endregion ------------------------ VIEWS\\n\\n}\\n\",\"keccak256\":\"0xce2d65b37be1d609a49db9f721e06c35f8d6fb0200e65cbb467c83b4e04d6fe7\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PackingLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IItemController.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\n\\nlibrary PackingLib {\\n\\n  error TooHighValue(uint value);\\n  error OutOfBounds(uint index, uint length);\\n  error UnexpectedValue(uint expected, uint actual);\\n  error WrongValue(uint newValue, uint actual);\\n  error LengthsMismatch();\\n  error IntOutOfRange(int value);\\n  error ZeroValue();\\n  /// @notice packCustomDataChange requires an input string with two zero bytes at the beginning\\n  ///         0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0000\\n  /// This error happens if these bytes are not zero\\n  error IncompatibleInputString();\\n\\n  //////////////////////////\\n  // ---- PACKING LOGIC ----\\n  //////////////////////////\\n\\n  //region ------------------------------------ COMMON\\n\\n  function packNftId(address token, uint id) internal pure returns (bytes32 serialized) {\\n    if (id > uint(type(uint64).max)) revert TooHighValue(id);\\n    serialized = bytes32(uint(uint160(token)));\\n    serialized |= bytes32(uint(uint64(id))) << 160;\\n  }\\n\\n  function unpackNftId(bytes32 data) internal pure returns (address token, uint id) {\\n    token = address(uint160(uint(data)));\\n    id = uint(data) >> 160;\\n  }\\n\\n  function packAddressWithAmount(address token, uint amount) internal pure returns (bytes32 data) {\\n    if (amount > uint(type(uint96).max)) revert TooHighValue(amount);\\n    data = bytes32(uint(uint160(token)));\\n    data |= bytes32(uint(uint96(amount))) << 160;\\n  }\\n\\n  function unpackAddressWithAmount(bytes32 data) internal pure returns (address token, uint amount) {\\n    token = address(uint160(uint(data)));\\n    amount = uint(data) >> 160;\\n  }\\n\\n  function packItemMintInfo(address item, uint32 chance) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(item)));\\n    data |= bytes32(uint(chance)) << 160;\\n  }\\n\\n  function unpackItemMintInfo(bytes32 data) internal pure returns (address item, uint32 chance) {\\n    item = address(uint160(uint(data)));\\n    chance = uint32(uint(data) >> 160);\\n  }\\n\\n  /// @param customDataIndex We assume, that two lowest bytes of this string are always zero\\n  /// So, the string looks like following: 0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0000\\n  /// Last 2 bytes will be used to encode {value}\\n  function packCustomDataChange(bytes32 customDataIndex, int16 value) internal pure returns (bytes32 data) {\\n    if (uint(customDataIndex) != (uint(customDataIndex) >> 16) << 16) revert IncompatibleInputString();\\n    data = bytes32(uint(customDataIndex));\\n    data |= bytes32(uint(uint16(value)));\\n  }\\n\\n  function unpackCustomDataChange(bytes32 data) internal pure returns (bytes32 customDataIndex, int16 value) {\\n    customDataIndex = bytes32((uint(data) >> 16) << 16);\\n    value = int16(int(uint(uint16(uint(data)))));\\n  }\\n\\n  /// @dev min(uint64) + max(uint64) + isHeroData/isMandatory(uint8)\\n  function packCustomDataRequirements(uint64 min, uint64 max, bool key) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(min));\\n    data |= bytes32(uint(max)) << 64;\\n    data |= bytes32(uint(key ? uint8(1) : uint8(0))) << (64 + 64);\\n  }\\n\\n  function unpackCustomDataRequirements(bytes32 data) internal pure returns (uint64 min, uint64 max, bool key) {\\n    min = uint64(uint(data));\\n    max = uint64(uint(data) >> 64);\\n    key = uint8(uint(data) >> (64 + 64)) == uint8(1);\\n  }\\n\\n  function packStatsChange(\\n    uint32 experience,\\n    int32 heal,\\n    int32 manaRegen,\\n    int32 lifeChancesRecovered,\\n    int32 damage,\\n    int32 manaConsumed\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(experience));\\n    data |= bytes32(uint(uint32(heal))) << 32;\\n    data |= bytes32(uint(uint32(manaRegen))) << (32 + 32);\\n    data |= bytes32(uint(uint32(lifeChancesRecovered))) << (32 + 32 + 32);\\n    data |= bytes32(uint(uint32(damage))) << (32 + 32 + 32 + 32);\\n    data |= bytes32(uint(uint32(manaConsumed))) << (32 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackStatsChange(bytes32 data) internal pure returns (\\n    uint32 experience,\\n    int32 heal,\\n    int32 manaRegen,\\n    int32 lifeChancesRecovered,\\n    int32 damage,\\n    int32 manaConsumed\\n  ) {\\n    experience = uint32(uint(data));\\n    heal = int32(int(uint(data) >> 32));\\n    manaRegen = int32(int(uint(data) >> (32 + 32)));\\n    lifeChancesRecovered = int32(int(uint(data) >> (32 + 32 + 32)));\\n    damage = int32(int(uint(data) >> (32 + 32 + 32 + 32)));\\n    manaConsumed = int32(int(uint(data) >> (32 + 32 + 32 + 32 + 32)));\\n  }\\n  //endregion ------------------------------------ COMMON\\n\\n  //region ------------------------------------ WORLD/BATTLEFIELD MAP\\n\\n  function packMapObject(address objectAddress, uint64 objectId, uint8 objectType) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(bytes20(objectAddress));\\n    packedData |= bytes32(uint(objectId) << 32);\\n    packedData |= bytes32(uint(objectType) << 24);\\n  }\\n\\n  function unpackMapObject(bytes32 packedData) internal pure returns (address objectAddress, uint64 objectId, uint8 objectType) {\\n    objectAddress = address(bytes20(packedData));\\n    objectId = uint64(uint(packedData) >> 32);\\n    objectType = uint8(uint(packedData) >> 24);\\n  }\\n\\n  function packCoordinate(uint128 x, uint128 y) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(uint(x));\\n    packedData |= bytes32(uint(y) << 128);\\n  }\\n\\n  function unpackCoordinate(bytes32 packedData) internal pure returns (uint128 x, uint128 y) {\\n    x = uint128(uint(packedData));\\n    y = uint128(uint(packedData) >> 128);\\n  }\\n\\n  /// @param x Assume x <= max uint64\\n  /// @param y Assume y <= max uint64\\n  function packBattlefieldId(uint8 biomeMapFieldId, uint8 territoryNumber, uint128 x, uint128 y) internal pure returns (bytes32 packedData) {\\n    // 256 => 128 + 128;\\n    // 1) 128 is used for biomeMapFieldId, territoryNumber and probably other fields in the future\\n    // 2) 128 is used to store x, y as uint64, uint64\\n\\n    // we will use uint64 for coordinates assuming it is more than enough for biome map\\n    packedData = bytes32(uint(biomeMapFieldId));\\n    packedData |= bytes32(uint(territoryNumber) << (8));\\n    packedData |= bytes32(uint(uint64(x)) << 128);\\n    packedData |= bytes32(uint(uint64(y)) << (64 + 128));\\n  }\\n\\n  function unpackBattlefieldId(bytes32 packedData) internal pure returns (uint8 biomeMapFieldId, uint8 territoryNumber, uint128 x, uint128 y) {\\n    biomeMapFieldId = uint8(uint(packedData));\\n    territoryNumber = uint8(uint(packedData) >> (8));\\n    x = uint128(uint64(uint(packedData) >> (128)));\\n    y = uint128(uint64(uint(packedData) >> (64 + 128)));\\n  }\\n  //endregion ------------------------------------ WORLD/BATTLEFIELD MAP\\n\\n  //region ------------------------------------ REINFORCEMENT\\n\\n  function packReinforcementHeroInfo(uint8 biome, uint128 score, uint8 fee, uint64 stakeTs) internal pure returns (bytes32 packedData) {\\n    packedData = bytes32(uint(biome));\\n    packedData |= bytes32(uint(score) << 8);\\n    packedData |= bytes32(uint(fee) << (8 + 128));\\n    packedData |= bytes32(uint(stakeTs) << (8 + 128 + 8));\\n  }\\n\\n  function unpackReinforcementHeroInfo(bytes32 packedData) internal pure returns (uint8 biome, uint128 score, uint8 fee, uint64 stakeTs) {\\n    biome = uint8(uint(packedData));\\n    score = uint128(uint(packedData) >> 8);\\n    fee = uint8(uint(packedData) >> (8 + 128));\\n    stakeTs = uint64(uint(packedData) >> (8 + 128 + 8));\\n  }\\n  //endregion ------------------------------------ REINFORCEMENT\\n\\n  //region ------------------------------------ DUNGEON\\n\\n  function packDungeonKey(address heroAdr, uint80 heroId, uint16 dungLogicNum) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(dungLogicNum)) << (160 + 80);\\n  }\\n\\n  function unpackDungeonKey(bytes32 data) internal pure returns (address heroAdr, uint80 heroId, uint16 dungLogicNum) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint80(uint(data) >> 160);\\n    dungLogicNum = uint16(uint(data) >> (160 + 80));\\n  }\\n\\n  // --- GAME OBJECTS ---\\n\\n  function packIterationKey(address heroAdr, uint64 heroId, uint32 objId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(objId)) << (160 + 64);\\n  }\\n\\n  function unpackIterationKey(bytes32 data) internal pure returns (address heroAdr, uint64 heroId, uint32 objId) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint64(uint(data) >> 160);\\n    objId = uint32(uint(data) >> (160 + 64));\\n  }\\n\\n  function packMonsterStats(\\n    uint8 level,\\n    uint8 race,\\n    uint32 experience,\\n    uint8 maxDropItems\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(level));\\n    data |= bytes32(uint(race)) << 8;\\n    data |= bytes32(uint(experience)) << (8 + 8);\\n    data |= bytes32(uint(maxDropItems)) << (8 + 8 + 32);\\n  }\\n\\n  function unpackMonsterStats(bytes32 data) internal pure returns (\\n    uint8 level,\\n    uint8 race,\\n    uint32 experience,\\n    uint8 maxDropItems\\n  ) {\\n    level = uint8(uint(data));\\n    race = uint8(uint(data) >> 8);\\n    experience = uint32(uint(data) >> (8 + 8));\\n    maxDropItems = uint8(uint(data) >> (8 + 8 + 32));\\n  }\\n\\n  function packAttackInfo(\\n    address attackToken,\\n    uint64 attackTokenId,\\n    uint8 attackType\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(attackToken)));\\n    data |= bytes32(uint(attackTokenId)) << 160;\\n    data |= bytes32(uint(attackType)) << (160 + 64);\\n  }\\n\\n  function unpackAttackInfo(bytes32 data) internal pure returns (\\n    address attackToken,\\n    uint64 attackTokenId,\\n    uint8 attackType\\n  ) {\\n    attackToken = address(uint160(uint(data)));\\n    attackTokenId = uint64(uint(data) >> 160);\\n    attackType = uint8(uint(data) >> (160 + 64));\\n  }\\n\\n  function packPlayedObjKey(address heroAdr, uint64 heroId, uint8 oType, uint8 biome) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(oType)) << (160 + 64);\\n    data |= bytes32(uint(biome)) << (160 + 64 + 8);\\n  }\\n\\n  function unpackPlayedObjKey(bytes32 data) internal pure returns (address heroAdr, uint64 heroId, uint8 oType, uint8 biome) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint64(uint(data) >> 160);\\n    oType = uint8(uint(data) >> (160 + 64));\\n    biome = uint8(uint(data) >> (160 + 64 + 8));\\n  }\\n\\n  function packGeneratedMonster(bool generated, uint32 amplifier, int32 hp, uint8 turnCounter) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint8(generated ? 1 : 0)));\\n    data |= bytes32(uint(amplifier)) << 8;\\n    data |= bytes32(uint(uint32(hp))) << (8 + 32);\\n    data |= bytes32(uint(turnCounter)) << (8 + 32 + 32);\\n  }\\n\\n  function unpackGeneratedMonster(bytes32 data) internal pure returns (bool generated, uint32 amplifier, int32 hp, uint8 turnCounter) {\\n    generated = uint8(uint(data)) == uint8(1);\\n    amplifier = uint32(uint(data) >> 8);\\n    hp = int32(int(uint(data) >> (8 + 32)));\\n    turnCounter = uint8(uint(data) >> (8 + 32 + 32));\\n  }\\n  //endregion ------------------------------------ DUNGEON\\n\\n  //region ------------------------------------ ITEMS\\n\\n  /// @notice itemMetaType8 + itemLvl8 + itemType8 + baseDurability16 + defaultRarity8 + minAttr8 + maxAttr8 + manaCost32 + req(packed core 128)\\n  /// @param itemType This is ItemType enum\\n  function packItemMeta(\\n    uint8 itemMetaType,\\n    uint8 itemLvl,\\n    uint8 itemType,\\n    uint16 baseDurability,\\n    uint8 defaultRarity,\\n    uint8 minAttr,\\n    uint8 maxAttr,\\n    uint32 manaCost,\\n    IStatController.CoreAttributes memory req\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(itemMetaType));\\n    data |= bytes32(uint(itemLvl)) << 8;\\n    data |= bytes32(uint(itemType)) << (8 + 8);\\n    data |= bytes32(uint(baseDurability)) << (8 + 8 + 8);\\n    data |= bytes32(uint(defaultRarity)) << (8 + 8 + 8 + 16);\\n    data |= bytes32(uint(minAttr)) << (8 + 8 + 8 + 16 + 8);\\n    data |= bytes32(uint(maxAttr)) << (8 + 8 + 8 + 16 + 8 + 8);\\n    data |= bytes32(uint(manaCost)) << (8 + 8 + 8 + 16 + 8 + 8 + 8);\\n    data |= bytes32(uint(int(req.strength))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32);\\n    data |= bytes32(uint(int(req.dexterity))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32);\\n    data |= bytes32(uint(int(req.vitality))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(req.energy))) << (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackItemMeta(bytes32 data) internal pure returns (IItemController.ItemMeta memory) {\\n    IItemController.ItemMeta memory result;\\n\\n    result.itemMetaType = uint8(uint(data));\\n    result.itemLevel = uint8(uint(data) >> 8);\\n    result.itemType = IItemController.ItemType(uint8(uint(data) >> (8 + 8)));\\n    result.baseDurability = uint16(uint(data) >> (8 + 8 + 8));\\n    result.defaultRarity = uint8(uint(data) >> (8 + 8 + 8 + 16));\\n    result.minRandomAttributes = uint8(uint(data) >> (8 + 8 + 8 + 16 + 8));\\n    result.maxRandomAttributes = uint8(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8));\\n    result.manaCost = uint32(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8));\\n    result.requirements.strength = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32)));\\n    result.requirements.dexterity = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32)));\\n    result.requirements.vitality = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32)));\\n    result.requirements.energy = int32(int(uint(data) >> (8 + 8 + 8 + 16 + 8 + 8 + 8 + 32 + 32 + 32 + 32)));\\n\\n    return result;\\n  }\\n\\n  function packItemGenerateInfo(uint8 id, int32 min, int32 max, uint32 chance) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(id));\\n    data |= bytes32(uint(uint32(min))) << 8;\\n    data |= bytes32(uint(uint32(max))) << (8 + 32);\\n    data |= bytes32(uint(chance)) << (8 + 32 + 32);\\n  }\\n\\n  function unpackItemGenerateInfo(bytes32 data) internal pure returns (uint8 id, int32 min, int32 max, uint32 chance) {\\n    id = uint8(uint(data));\\n    min = int32(int(uint(data) >> 8));\\n    max = int32(int(uint(data) >> (8 + 32)));\\n    chance = uint32(uint(data) >> (8 + 32 + 32));\\n  }\\n\\n  function packItemAttackInfo(\\n    uint8 attackType,\\n    int32 min,\\n    int32 max,\\n    int32 factorStr,\\n    int32 factorDex,\\n    int32 factorVit,\\n    int32 factorEng\\n  ) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(attackType));\\n    data |= bytes32(uint(uint32(min))) << 8;\\n    data |= bytes32(uint(uint32(max))) << (8 + 32);\\n    data |= bytes32(uint(int(factorStr))) << (8 + 32 + 32);\\n    data |= bytes32(uint(int(factorDex))) << (8 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(factorVit))) << (8 + 32 + 32 + 32 + 32);\\n    data |= bytes32(uint(int(factorEng))) << (8 + 32 + 32 + 32 + 32 + 32);\\n  }\\n\\n  function unpackItemAttackInfo(bytes32 data) internal pure returns (\\n    uint8 attackType,\\n    int32 min,\\n    int32 max,\\n    int32 factorStr,\\n    int32 factorDex,\\n    int32 factorVit,\\n    int32 factorEng\\n  ) {\\n    attackType = uint8(uint(data));\\n    min = int32(int(uint(data) >> 8));\\n    max = int32(int(uint(data) >> (8 + 32)));\\n    factorStr = int32(int(uint(data) >> (8 + 32 + 32)));\\n    factorDex = int32(int(uint(data) >> (8 + 32 + 32 + 32)));\\n    factorVit = int32(int(uint(data) >> (8 + 32 + 32 + 32 + 32)));\\n    factorEng = int32(int(uint(data) >> (8 + 32 + 32 + 32 + 32 + 32)));\\n  }\\n\\n  function packItemInfo(uint8 rarity, uint8 augmentationLevel, uint16 durability) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(rarity));\\n    data |= bytes32(uint(augmentationLevel)) << 8;\\n    data |= bytes32(uint(durability)) << (8 + 8);\\n  }\\n\\n  function unpackItemInfo(bytes32 data) internal pure returns (uint8 rarity, uint8 augmentationLevel, uint16 durability) {\\n    rarity = uint8(uint(data));\\n    augmentationLevel = uint8(uint(data) >> 8);\\n    durability = uint16(uint(data) >> (8 + 8));\\n  }\\n  //endregion ------------------------------------ ITEMS\\n\\n  //region ------------------------------------ STORIES\\n\\n  function packStoryPageId(uint16 storyId, uint16 pageId, uint8 heroClass) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n  }\\n\\n  function unpackStoryPageId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n  }\\n\\n  function packStoryAnswerId(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n  }\\n\\n  function unpackStoryAnswerId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n  }\\n\\n  function packStoryNextPagesId(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 resultId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n    data |= bytes32(uint(resultId)) << (16 + 16 + 8 + 16);\\n  }\\n\\n  function unpackStoryNextPagesId(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 resultId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n    resultId = uint8(uint(data) >> (16 + 16 + 8 + 16));\\n  }\\n\\n  function packStoryAttributeRequirement(uint8 attributeIndex, int32 value, bool isCore) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(attributeIndex));\\n    data |= bytes32(uint(uint32(value))) << 8;\\n    data |= bytes32(uint(isCore ? uint8(1) : uint8(0))) << (8 + 32);\\n  }\\n\\n  function unpackStoryAttributeRequirement(bytes32 data) internal pure returns (uint8 attributeIndex, int32 value, bool isCore) {\\n    attributeIndex = uint8(uint(data));\\n    value = int32(int(uint(data) >> 8));\\n    isCore = uint8(uint(data) >> (8 + 32)) == uint8(1);\\n  }\\n\\n  function packStoryItemRequirement(address item, bool requireItemBurn, bool requireItemEquipped) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(item)));\\n    data |= bytes32(uint(requireItemBurn ? uint8(1) : uint8(0))) << 160;\\n    data |= bytes32(uint(requireItemEquipped ? uint8(1) : uint8(0))) << (160 + 8);\\n  }\\n\\n  function unpackStoryItemRequirement(bytes32 data) internal pure returns (address item, bool requireItemBurn, bool requireItemEquipped) {\\n    item = address(uint160(uint(data)));\\n    requireItemBurn = uint8(uint(data) >> 160) == uint8(1);\\n    requireItemEquipped = uint8(uint(data) >> (160 + 8)) == uint8(1);\\n  }\\n\\n  /// @dev max amount is 309,485,009 for token with 18 decimals\\n  function packStoryTokenRequirement(address token, uint88 amount, bool requireTransfer) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(token)));\\n    data |= bytes32(uint(amount)) << 160;\\n    data |= bytes32(uint(requireTransfer ? uint8(1) : uint8(0))) << (160 + 88);\\n  }\\n\\n  function unpackStoryTokenRequirement(bytes32 data) internal pure returns (address token, uint88 amount, bool requireTransfer) {\\n    token = address(uint160(uint(data)));\\n    amount = uint88(uint(data) >> 160);\\n    requireTransfer = uint8(uint(data) >> (160 + 88)) == uint8(1);\\n  }\\n\\n  function packStoryCustomDataResult(uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 customDataResultId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(storyId));\\n    data |= bytes32(uint(pageId)) << 16;\\n    data |= bytes32(uint(heroClass)) << (16 + 16);\\n    data |= bytes32(uint(answerId)) << (16 + 16 + 8);\\n    data |= bytes32(uint(customDataResultId)) << (16 + 16 + 8 + 16);\\n  }\\n\\n  function unpackStoryCustomDataResult(bytes32 data) internal pure returns (uint16 storyId, uint16 pageId, uint8 heroClass, uint16 answerId, uint8 customDataResultId) {\\n    storyId = uint16(uint(data));\\n    pageId = uint16(uint(data) >> 16);\\n    heroClass = uint8(uint(data) >> (16 + 16));\\n    answerId = uint16(uint(data) >> (16 + 16 + 8));\\n    customDataResultId = uint8(uint(data) >> (16 + 16 + 8 + 16));\\n  }\\n\\n  function packStoryHeroState(uint16 pageId, uint40 heroLastActionTS) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(pageId));\\n    data |= bytes32(uint(heroLastActionTS)) << 16;\\n  }\\n\\n  function unpackStoryHeroState(bytes32 data) internal pure returns (uint16 pageId, uint40 heroLastActionTS) {\\n    pageId = uint16(uint(data));\\n    heroLastActionTS = uint40(uint(data) >> 16);\\n  }\\n\\n  function packStoryHeroStateId(address heroAdr, uint80 heroId, uint16 storyId) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(uint160(heroAdr)));\\n    data |= bytes32(uint(heroId)) << 160;\\n    data |= bytes32(uint(storyId)) << (160 + 80);\\n  }\\n\\n  function unpackStoryHeroStateId(bytes32 data) internal pure returns (address heroAdr, uint80 heroId, uint16 storyId) {\\n    heroAdr = address(uint160(uint(data)));\\n    heroId = uint80(uint(data) >> 160);\\n    storyId = uint16(uint(data) >> (160 + 80));\\n  }\\n\\n  function packStorySimpleRequirement(uint32 randomRequirement, uint32 delayRequirement, bool isFinalAnswer) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(randomRequirement));\\n    data |= bytes32(uint(delayRequirement)) << 32;\\n    data |= bytes32(uint(isFinalAnswer ? uint8(1) : uint8(0))) << (32 + 32);\\n  }\\n\\n  function unpackStorySimpleRequirement(bytes32 data) internal pure returns (uint32 randomRequirement, uint32 delayRequirement, bool isFinalAnswer) {\\n    randomRequirement = uint32(uint(data));\\n    delayRequirement = uint32(uint(data) >> 32);\\n    isFinalAnswer = uint8(uint(data) >> (32 + 32)) == uint8(1);\\n  }\\n\\n  function packBurnInfo(uint8 slot, uint64 chance, bool stopIfBurned) internal pure returns (bytes32 data) {\\n    data = bytes32(uint(slot));\\n    data |= bytes32(uint(chance)) << 8;\\n    data |= bytes32(uint(stopIfBurned ? uint8(1) : uint8(0))) << (8 + 64);\\n  }\\n\\n  function unpackBurnInfo(bytes32 data) internal pure returns (uint8 slot, uint64 chance, bool stopIfBurned) {\\n    slot = uint8(uint(data));\\n    chance = uint64(uint(data) >> 8);\\n    stopIfBurned = uint8(uint(data) >> (8 + 64)) == uint8(1);\\n  }\\n  //endregion ------------------------------------ STORIES\\n\\n  ////////////////////////////////////////////////////////////////////////////////////\\n  // ---- ARRAYS LOGIC ----\\n  ////////////////////////////////////////////////////////////////////////////////////\\n\\n  //region ------------------------------------ SIMPLE ARRAYS\\n\\n\\n  function packUint8Array(uint8[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 32) revert OutOfBounds(len, 32);\\n    bytes32 result;\\n    for (uint i = 0; i < len; i++) {\\n      result |= bytes32(uint(data[i])) << (i * 8);\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Simple faster version of {packUint8Array} for small number of items\\n  ///         It allows to exclude dynamic array creation.\\n  function packUint8Array3(uint8 a, uint8 b, uint8 c) internal pure returns (bytes32) {\\n    bytes32 result = bytes32(uint(a));\\n    result |= bytes32(uint(b)) << (1 * 8);\\n    result |= bytes32(uint(c)) << (2 * 8);\\n    return result;\\n  }\\n\\n\\n  function unpackUint8Array(bytes32 data) internal pure returns (uint8[] memory) {\\n    uint8[] memory result = new uint8[](32);\\n    for (uint i = 0; i < 32; i++) {\\n      result[i] = uint8(uint(data) >> (i * 8));\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Simple faster version of {unpackUint8Array} for small number of items\\n  ///         It allows to exclude only first 3 values\\n  function unpackUint8Array3(bytes32 data) internal pure returns (uint8 a, uint8 b, uint8 c) {\\n    a = uint8(uint(data));\\n    b = uint8(uint(data) >> (1 * 8));\\n    c = uint8(uint(data) >> (2 * 8));\\n  }\\n\\n  function changeUnit8ArrayWithCheck(bytes32 data, uint index, uint8 value, uint8 expectedPrevValue) internal pure returns (bytes32 newData) {\\n    uint8[] memory arr = unpackUint8Array(data);\\n    if (arr[index] != expectedPrevValue) revert UnexpectedValue(uint(expectedPrevValue), uint(arr[index]));\\n    arr[index] = value;\\n    return packUint8Array(arr);\\n  }\\n\\n  function packInt32Array(int32[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 8) revert OutOfBounds(len, 8);\\n    bytes32 result;\\n    for (uint i; i < len; i++) {\\n      result |= bytes32(uint(uint32(data[i]))) << (i * 32);\\n    }\\n    return result;\\n  }\\n\\n  function unpackInt32Array(bytes32 data) internal pure returns (int32[] memory) {\\n    int32[] memory result = new int32[](8);\\n    for (uint i = 0; i < 8; i++) {\\n      result[i] = int32(int(uint(data) >> (i * 32)));\\n    }\\n    return result;\\n  }\\n\\n  function packUint32Array(uint32[] memory data) internal pure returns (bytes32) {\\n    uint len = data.length;\\n    if (len > 8) revert OutOfBounds(len, 8);\\n    bytes32 result;\\n    for (uint i = 0; i < len; i++) {\\n      result |= bytes32(uint(data[i])) << (i * 32);\\n    }\\n    return result;\\n  }\\n\\n  function unpackUint32Array(bytes32 data) internal pure returns (uint32[] memory) {\\n    uint32[] memory result = new uint32[](8);\\n    for (uint i = 0; i < 8; i++) {\\n      result[i] = uint32(uint(data) >> (i * 32));\\n    }\\n    return result;\\n  }\\n  //endregion ------------------------------------ SIMPLE ARRAYS\\n\\n  //region ------------------------------------ COMPLEX ARRAYS\\n\\n  // We should represent arrays without concrete size.\\n  // For this reason we must not revert on out of bounds but return zero value instead.\\n\\n  // we need it for properly unpack packed arrays with ids\\n//  function getInt32AsInt24(bytes32[] memory arr, uint idx) internal pure returns (int32) {\\n//    if (idx / 8 >= arr.length) {\\n//      return int32(0);\\n//    }\\n//    return int32(int24(int(uint(arr[idx / 8]) >> ((idx % 8) * 32))));\\n//  }\\n\\n  // we need it for properly unpack packed arrays with ids\\n//  function getUnit8From32Step(bytes32[] memory arr, uint idx) internal pure returns (uint8) {\\n//    if (idx / 8 >= arr.length) {\\n//      return uint8(0);\\n//    }\\n//    return uint8(uint(arr[idx / 8]) >> ((idx % 8) * 32 + 24));\\n//  }\\n\\n  function getInt32Memory(bytes32[] memory arr, uint idx) internal pure returns (int32) {\\n    if (idx / 8 >= arr.length) {\\n      return int32(0);\\n    }\\n    return int32(int(uint(arr[idx / 8]) >> ((idx % 8) * 32)));\\n  }\\n\\n  function getInt32(bytes32[] storage arr, uint idx) internal view returns (int32) {\\n    // additional gas usage, but we should not revert on out of bounds\\n    if (idx / 8 >= arr.length) {\\n      return int32(0);\\n    }\\n    return int32(int(uint(arr[idx / 8]) >> ((idx % 8) * 32)));\\n  }\\n\\n  function setInt32(bytes32[] storage arr, uint idx, int32 value) internal {\\n    uint pos = idx / 8;\\n    uint shift = (idx % 8) * 32;\\n\\n    uint curLength = arr.length;\\n    if (pos >= curLength) {\\n      arr.push(0);\\n      for (uint i = curLength; i < pos; ++i) {\\n        arr.push(0);\\n      }\\n    }\\n\\n    arr[pos] = bytes32(uint(arr[pos]) & ~(uint(0xffffffff) << shift) | (uint(uint32(value)) & 0xffffffff) << shift);\\n  }\\n\\n  /// @notice Increment {idx}-th item on {value}\\n  function changeInt32(bytes32[] storage arr, uint idx, int32 value) internal returns (int32 newValue, int32 change) {\\n    int32 cur = int32(int(getInt32(arr, idx)));\\n    int newValueI = int(cur) + int(value);\\n    newValue = int32(newValueI);\\n    change = int32(newValueI - int(cur));\\n\\n    setInt32(arr, idx, newValue);\\n  }\\n\\n  function toInt32Array(bytes32[] memory arr, uint size) internal pure returns (int32[] memory) {\\n    int32[] memory result = new int32[](size);\\n    for (uint i = 0; i < arr.length; i++) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= size) break;\\n        result[idx] = getInt32Memory(arr, idx);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev pack int32 array into bytes32 array\\n  function toBytes32Array(int32[] memory arr) internal pure returns (bytes32[] memory) {\\n    uint size = arr.length / 8 + 1;\\n    bytes32[] memory result = new bytes32[](size);\\n    for (uint i; i < size; ++i) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= arr.length) break;\\n        result[i] |= bytes32(uint(uint32(arr[idx]))) << (j * 32);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev pack int32 array into bytes32 array using last 8bytes for ids\\n  ///      we can not use zero values coz will not able to properly unpack it later\\n  function toBytes32ArrayWithIds(int32[] memory arr, uint8[] memory ids) internal pure returns (bytes32[] memory) {\\n    if (arr.length != ids.length) revert LengthsMismatch();\\n\\n    uint size = arr.length / 8 + 1;\\n    bytes32[] memory result = new bytes32[](size);\\n    for (uint i; i < size; ++i) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        if (idx >= arr.length) break;\\n\\n//        console.log(\\\"toBytes32ArrayWithIds id: %s, value: %s%s\\\", ids[idx], arr[idx] >= 0 ? '' : '-', arr[idx] >= 0 ? uint(int(arr[idx])) : uint(int(-arr[idx])));\\n\\n        if (arr[idx] > type(int24).max || arr[idx] < type(int24).min) revert IntOutOfRange(int(arr[idx]));\\n        if (arr[idx] == 0) revert ZeroValue();\\n        result[i] |= bytes32(uint(uint24(int24(arr[idx])))) << (j * 32);\\n        result[i] |= bytes32(uint(ids[idx])) << (j * 32 + 24);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /// @dev we do not know exact size of array, assume zero values is not acceptable for this array\\n  function toInt32ArrayWithIds(bytes32[] memory arr) internal pure returns (int32[] memory values, uint8[] memory ids) {\\n    uint len = arr.length;\\n    uint size = len * 8;\\n    int32[] memory valuesTmp = new int32[](size);\\n    uint8[] memory idsTmp = new uint8[](size);\\n    uint counter;\\n    for (uint i = 0; i < len; i++) {\\n      for (uint j; j < 8; ++j) {\\n        uint idx = i * 8 + j;\\n        // if (idx >= size) break;  // it looks like a useless check\\n        valuesTmp[idx] = int32(int24(int(uint(arr[i]) >> (j * 32)))); // getInt32AsInt24(arr, idx);\\n        idsTmp[idx] = uint8(uint(arr[i]) >> (j * 32 + 24)); // getUnit8From32Step(arr, idx);\\n        if (valuesTmp[idx] == 0) {\\n          break;\\n        }\\n        counter++;\\n      }\\n    }\\n\\n    values = new int32[](counter);\\n    ids = new uint8[](counter);\\n    for (uint i; i < counter; ++i) {\\n      values[i] = valuesTmp[i];\\n      ids[i] = idsTmp[i];\\n    }\\n  }\\n  //endregion ------------------------------------ COMPLEX ARRAYS\\n\\n}\\n\",\"keccak256\":\"0x169dec334b08b119f2b91eeb4650ab285440f7f698ad96584bf78c982d9e66ee\",\"license\":\"BUSL-1.1\"},\"contracts/lib/ScoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\n\\nlibrary ScoreLib {\\n  using CalcLib for int32;\\n\\n  // core\\n  uint public constant STRENGTH = 100;\\n  uint public constant DEXTERITY = 100;\\n  uint public constant VITALITY = 100;\\n  uint public constant ENERGY = 100;\\n\\n  // attributes\\n  uint public constant MELEE_DAMAGE = 10;\\n  uint public constant ATTACK_RATING = 3;\\n  uint public constant DEFENCE = 10;\\n  uint public constant BLOCK_RATING = 500;\\n  uint public constant LIFE = 10;\\n  uint public constant MANA = 10;\\n\\n  uint public constant LIFE_CHANCES = 10_000;\\n  uint public constant MAGIC_FIND = 300;\\n  uint public constant CRITICAL_HIT = 150;\\n  uint public constant DMG_FACTOR = 200;\\n\\n  uint public constant AR_FACTOR = 200;\\n  uint public constant LIFE_STOLEN_PER_HIT = 1000;\\n  uint public constant MANA_AFTER_KILL = 1000;\\n  uint public constant DAMAGE_REDUCTION = 500;\\n  uint public constant REFLECT_DAMAGE = 250;\\n  uint public constant RESIST_TO_STATUSES = 70;\\n\\n  // resistance\\n  uint public constant ELEMENT_RESIST = 100;\\n\\n  // race specific attributes\\n  uint public constant RACE_SPECIFIC = 20;\\n\\n  // statuses\\n  uint public constant STATUSES = 100;\\n\\n  // items\\n  uint public constant DURABILITY_SCORE = 1;\\n\\n  // hero\\n  uint public constant HERO_LEVEL_SCORE = 1000;\\n\\n  function attributesScore(int32[] memory attributes) internal pure returns (uint) {\\n    uint result;\\n    {\\n      result += (attributes[uint(IStatController.ATTRIBUTES.STRENGTH)]).toUint() * STRENGTH\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEXTERITY)]).toUint() * DEXTERITY\\n        + (attributes[uint(IStatController.ATTRIBUTES.VITALITY)]).toUint() * VITALITY\\n        + (attributes[uint(IStatController.ATTRIBUTES.ENERGY)]).toUint() * ENERGY\\n        + (attributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)]).toUint() * ATTACK_RATING\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEFENSE)]).toUint() * DEFENCE\\n        + (attributes[uint(IStatController.ATTRIBUTES.BLOCK_RATING)]).toUint() * BLOCK_RATING\\n        + Math.average(attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)].toUint(), attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)].toUint()) * MELEE_DAMAGE\\n      ;\\n    }\\n    {\\n      result +=\\n        (attributes[uint(IStatController.ATTRIBUTES.LIFE)]).toUint() * LIFE\\n        + (attributes[uint(IStatController.ATTRIBUTES.MANA)]).toUint() * MANA\\n        + (attributes[uint(IStatController.ATTRIBUTES.FIRE_RESISTANCE)]).toUint() * ELEMENT_RESIST\\n        + (attributes[uint(IStatController.ATTRIBUTES.COLD_RESISTANCE)]).toUint() * ELEMENT_RESIST\\n        + (attributes[uint(IStatController.ATTRIBUTES.LIGHTNING_RESISTANCE)]).toUint() * ELEMENT_RESIST;\\n    }\\n    {\\n      result +=\\n        (attributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_HUMAN)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_UNDEAD)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_DAEMON)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DMG_AGAINST_BEAST)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEF_AGAINST_HUMAN)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEF_AGAINST_UNDEAD)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEF_AGAINST_DAEMON)]).toUint() * RACE_SPECIFIC\\n        + (attributes[uint(IStatController.ATTRIBUTES.DEF_AGAINST_BEAST)]).toUint() * RACE_SPECIFIC;\\n    }\\n    {\\n      result +=\\n        (attributes[uint(IStatController.ATTRIBUTES.STUN)]).toUint() * STATUSES\\n        + (attributes[uint(IStatController.ATTRIBUTES.BURN)]).toUint() * STATUSES\\n        + (attributes[uint(IStatController.ATTRIBUTES.FREEZE)]).toUint() * STATUSES\\n        + (attributes[uint(IStatController.ATTRIBUTES.CONFUSE)]).toUint() * STATUSES\\n        + (attributes[uint(IStatController.ATTRIBUTES.CURSE)]).toUint() * STATUSES\\n        + (attributes[uint(IStatController.ATTRIBUTES.POISON)]).toUint() * STATUSES;\\n    }\\n    {\\n      result +=\\n        (attributes[uint(IStatController.ATTRIBUTES.LIFE_CHANCES)]).toUint() * LIFE_CHANCES\\n        + (attributes[uint(IStatController.ATTRIBUTES.MAGIC_FIND)]).toUint() * MAGIC_FIND\\n        + (attributes[uint(IStatController.ATTRIBUTES.CRITICAL_HIT)]).toUint() * CRITICAL_HIT\\n        + (attributes[uint(IStatController.ATTRIBUTES.MELEE_DMG_FACTOR)]).toUint() * DMG_FACTOR\\n        + (attributes[uint(IStatController.ATTRIBUTES.FIRE_DMG_FACTOR)]).toUint() * DMG_FACTOR\\n        + (attributes[uint(IStatController.ATTRIBUTES.COLD_DMG_FACTOR)]).toUint() * DMG_FACTOR\\n        + (attributes[uint(IStatController.ATTRIBUTES.LIGHTNING_DMG_FACTOR)]).toUint() * DMG_FACTOR;\\n    }\\n    {\\n      result +=\\n        (attributes[uint(IStatController.ATTRIBUTES.AR_FACTOR)]).toUint() * AR_FACTOR\\n        + (attributes[uint(IStatController.ATTRIBUTES.LIFE_STOLEN_PER_HIT)]).toUint() * LIFE_STOLEN_PER_HIT\\n        + (attributes[uint(IStatController.ATTRIBUTES.MANA_AFTER_KILL)]).toUint() * MANA_AFTER_KILL\\n        + (attributes[uint(IStatController.ATTRIBUTES.DAMAGE_REDUCTION)]).toUint() * DAMAGE_REDUCTION\\n        + (attributes[uint(IStatController.ATTRIBUTES.REFLECT_DAMAGE_MELEE)]).toUint() * REFLECT_DAMAGE\\n        + (attributes[uint(IStatController.ATTRIBUTES.REFLECT_DAMAGE_MAGIC)]).toUint() * REFLECT_DAMAGE\\n        + (attributes[uint(IStatController.ATTRIBUTES.RESIST_TO_STATUSES)]).toUint() * RESIST_TO_STATUSES;\\n    }\\n    return result;\\n  }\\n\\n  function itemScore(int32[] memory attributes, uint16 baseDurability) internal pure returns (uint) {\\n    return attributesScore(attributes) + baseDurability * DURABILITY_SCORE;\\n  }\\n\\n  function heroScore(int32[] memory attributes, uint level) internal pure returns (uint) {\\n    return attributesScore(attributes) + level * HERO_LEVEL_SCORE;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1753aa9133d866d7f633d526111cce793f143cb190381d40da89e6251e652861\",\"license\":\"BUSL-1.1\"},\"contracts/lib/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x52ede981a6bb509c0dce07a0373e3c073c24fd16ca4ca7fbaa24f6c8b747b45b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/StatLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IStatController.sol\\\";\\nimport \\\"../interfaces/IHeroController.sol\\\";\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"./CalcLib.sol\\\";\\nimport \\\"./PackingLib.sol\\\";\\n\\nlibrary StatLib {\\n  using PackingLib for bytes32[];\\n  using PackingLib for bytes32;\\n  using PackingLib for uint32[];\\n  using PackingLib for int32[];\\n  using CalcLib for int32;\\n\\n  //region --------------------------- Constants\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant STAT_LIB_VERSION = \\\"1.0.0\\\";\\n  uint32 public constant MAX_LEVEL = 99;\\n\\n  uint public constant BASE_EXPERIENCE = 100_000;\\n  uint public constant BIOME_LEVEL_STEP = 5;\\n  uint internal constant _MAX_AMPLIFIER = 1e18;\\n  uint private constant _PRECISION = 1e18;\\n\\n  /// @dev Assume MAX_BIOME * BIOME_LEVEL_STEP < MAX_LEVEL + 1, see dungeonTreasuryReward\\n  uint public constant MAX_POSSIBLE_BIOME = 19;\\n  //endregion --------------------------- Constants\\n\\n  //region --------------------------- Data types\\n\\n  struct BaseMultiplier {\\n    uint minDamage;\\n    uint maxDamage;\\n    uint attackRating;\\n    uint defense;\\n    uint blockRating;\\n    uint life;\\n    uint mana;\\n  }\\n\\n  struct LevelUp {\\n    uint life;\\n    uint mana;\\n  }\\n\\n  struct InitialHero {\\n    IStatController.CoreAttributes core;\\n    BaseMultiplier multiplier;\\n    LevelUp levelUp;\\n    int32 baseLifeChances;\\n  }\\n\\n  enum HeroClasses {\\n    UNKNOWN,\\n    THRALL,\\n    SAVAGE,\\n    MAGE,\\n    ASSASSIN,\\n    GHOST,\\n    HAMMERGINA,\\n    END_SLOT\\n  }\\n  //endregion --------------------------- Data types\\n\\n  //region --------------------------- BASE\\n\\n  // --- HERO 1 (Slave) ---\\n\\n  function initialHero1() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 15,\\n      dexterity: 15,\\n      vitality: 30,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 2e18,\\n      defense: 2e18,\\n      blockRating: 0.1e18,\\n      life: 1.5e18,\\n      mana: 0.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 2e18,\\n      mana: 1e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 2 (Spata) ---\\n\\n  function initialHero2() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 30,\\n      dexterity: 5,\\n      vitality: 25,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.15e18,\\n      maxDamage: 0.25e18,\\n      attackRating: 2e18,\\n      defense: 1e18,\\n      blockRating: 0.08e18,\\n      life: 1.3e18,\\n      mana: 0.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.8e18,\\n      mana: 1e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 3 (Decidia) ---\\n\\n  function initialHero3() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 10,\\n      dexterity: 15,\\n      vitality: 20,\\n      energy: 25\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 2e18,\\n      defense: 1e18,\\n      blockRating: 0.1e18,\\n      life: 1e18,\\n      mana: 2e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.3e18,\\n      mana: 2e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 4 (Innatus) ---\\n\\n  function initialHero4() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 15,\\n      dexterity: 25,\\n      vitality: 15,\\n      energy: 15\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.1e18,\\n      maxDamage: 0.2e18,\\n      attackRating: 4e18,\\n      defense: 3e18,\\n      blockRating: 0.2e18,\\n      life: 1.2e18,\\n      mana: 1e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.7e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 5\\n    });\\n  }\\n\\n  // --- HERO 5 (F2P) ---\\n\\n  function initialHero5() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 20,\\n      dexterity: 20,\\n      vitality: 20,\\n      energy: 10\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.15e18,\\n      maxDamage: 0.25e18,\\n      attackRating: 3e18,\\n      defense: 2.5e18,\\n      blockRating: 0.15e18,\\n      life: 1.5e18,\\n      mana: 1.5e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.5e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 1\\n    });\\n  }\\n\\n  // --- HERO 6 (F2P) HAMMERGINA ---\\n\\n  function initialHero6() internal pure returns (InitialHero memory) {\\n    return InitialHero({\\n      core: IStatController.CoreAttributes({\\n      strength: 50,\\n      dexterity: 30,\\n      vitality: 50,\\n      energy: 15\\n    }),\\n\\n      multiplier: BaseMultiplier({\\n      minDamage: 0.2e18,\\n      maxDamage: 0.3e18,\\n      attackRating: 5e18,\\n      defense: 3e18,\\n      blockRating: 0.15e18,\\n      life: 2e18,\\n      mana: 2e18\\n    }),\\n\\n      levelUp: LevelUp({\\n      life: 1.7e18,\\n      mana: 1.5e18\\n    }),\\n\\n      baseLifeChances: 1\\n    });\\n  }\\n\\n  // ------\\n\\n  function initialHero(uint heroClass) internal pure returns (InitialHero memory) {\\n    if (heroClass == 1) {\\n      return initialHero1();\\n    } else if (heroClass == 2) {\\n      return initialHero2();\\n    } else if (heroClass == 3) {\\n      return initialHero3();\\n    } else if (heroClass == 4) {\\n      return initialHero4();\\n    } else if (heroClass == 5) {\\n      return initialHero5();\\n    } else if (heroClass == 6) {\\n      return initialHero6();\\n    } else {\\n      revert IAppErrors.UnknownHeroClass(heroClass);\\n    }\\n  }\\n  //endregion --------------------------- BASE\\n\\n  //region --------------------------- CALCULATIONS\\n\\n  function minDamage(int32 strength, uint heroClass) internal pure returns (int32) {\\n    return int32(int(strength.toUint() * initialHero(heroClass).multiplier.minDamage / _PRECISION));\\n  }\\n\\n  function maxDamage(int32 strength, uint heroClass) internal pure returns (int32){\\n    return int32(int(strength.toUint() * initialHero(heroClass).multiplier.maxDamage / _PRECISION));\\n  }\\n\\n  function attackRating(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(dexterity.toUint() * initialHero(heroClass).multiplier.attackRating / _PRECISION));\\n  }\\n\\n  function defense(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(dexterity.toUint() * initialHero(heroClass).multiplier.defense / _PRECISION));\\n  }\\n\\n  function blockRating(int32 dexterity, uint heroClass) internal pure returns (int32){\\n    return int32(int(Math.min((dexterity.toUint() * initialHero(heroClass).multiplier.blockRating / _PRECISION), 75)));\\n  }\\n\\n  function life(int32 vitality, uint heroClass, uint32 level) internal pure returns (int32){\\n    return int32(int(\\n      (vitality.toUint() * initialHero(heroClass).multiplier.life / _PRECISION)\\n      + (uint(level) * initialHero(heroClass).levelUp.life / _PRECISION)\\n    ));\\n  }\\n\\n  function mana(int32 energy, uint heroClass, uint32 level) internal pure returns (int32){\\n    return int32(int(\\n      (energy.toUint() * initialHero(heroClass).multiplier.mana / _PRECISION)\\n      + (uint(level) * initialHero(heroClass).levelUp.mana / _PRECISION)\\n    ));\\n  }\\n\\n  function lifeChances(uint heroClass, uint32 /*level*/) internal pure returns (int32){\\n    return initialHero(heroClass).baseLifeChances;\\n  }\\n\\n  function levelExperience(uint32 level) internal pure returns (uint32) {\\n    if (level == 0 || level >= MAX_LEVEL) {\\n      return 0;\\n    }\\n    return uint32(uint(level) * BASE_EXPERIENCE * (67e17 - CalcLib.log2((uint(MAX_LEVEL - level + 2)) * 1e18)) / 1e18);\\n  }\\n\\n  function chanceToHit(\\n    uint attackersAttackRating,\\n    uint defendersDefenceRating,\\n    uint attackersLevel,\\n    uint defendersLevel,\\n    uint arFactor\\n  ) internal pure returns (uint) {\\n    attackersAttackRating += attackersAttackRating * arFactor / 100;\\n    uint x = Math.max(attackersAttackRating, 1);\\n    uint y = Math.max(attackersAttackRating + defendersDefenceRating, 1);\\n    uint z = attackersLevel;\\n    uint k = defendersLevel / 2;\\n    uint xy = x * 1e18 / y;\\n    uint zk = z * 1e18 / (attackersLevel + k);\\n    uint base = 2 * xy * zk / 1e18;\\n    return Math.max(Math.min(base, 0.95e18), 0.2e18);\\n  }\\n\\n  function experienceToLvl(uint experience, uint startFromLevel) internal pure returns (uint level) {\\n    level = startFromLevel;\\n    for (; level < MAX_LEVEL;) {\\n      if (levelExperience(uint32(level)) >= experience) {\\n        break;\\n      }\\n      unchecked{++level;}\\n    }\\n  }\\n\\n  function expPerMonster(uint32 monsterExp, uint monsterRarity, uint32 heroExp, uint32 heroCurrentLvl, uint monsterBiome) internal pure returns (uint32) {\\n    uint heroLvl = experienceToLvl(uint(heroExp), uint(heroCurrentLvl));\\n    uint heroBiome = heroLvl / StatLib.BIOME_LEVEL_STEP + 1;\\n    uint base = uint(monsterExp) + uint(monsterExp) * monsterRarity / _MAX_AMPLIFIER;\\n\\n    // reduce exp if hero not in his biome\\n    if (heroBiome > monsterBiome) {\\n      base = base / (2 ** (heroBiome - monsterBiome));\\n    }\\n    return uint32(base);\\n  }\\n\\n  /// @notice Allow to calculate delta param for {mintDropChance}\\n  function mintDropChanceDelta(uint experience, uint startFromLevel, uint monsterBiome) internal pure returns (uint) {\\n    uint heroBiome = StatLib.experienceToLvl(experience, startFromLevel) / StatLib.BIOME_LEVEL_STEP + 1;\\n    return heroBiome > monsterBiome ? 2**(heroBiome - monsterBiome) : 0;\\n  }\\n\\n  /// @param delta 2 ** (heroBiome - monsterBiome) or zero if heroBiome < monsterBiome, see {mintDropChanceDelta}\\n  function mintDropChance(uint baseChance, uint monsterRarity, uint delta) internal pure returns (uint) {\\n    uint chance = baseChance + baseChance * monsterRarity / _MAX_AMPLIFIER;\\n\\n    // reduce chance if hero not in his biome\\n    return delta == 0\\n      ? chance\\n      : chance / delta;\\n  }\\n\\n  function initAttributes(\\n    bytes32[] storage attributes,\\n    uint heroClass,\\n    uint32 level,\\n    IStatController.CoreAttributes memory base\\n  ) internal returns (uint32[] memory result) {\\n\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.STRENGTH), base.strength);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DEXTERITY), base.dexterity);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.VITALITY), base.vitality);\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.ENERGY), base.energy);\\n\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN), minDamage(base.strength, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX), maxDamage(base.strength, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING), attackRating(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.DEFENSE), defense(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING), blockRating(base.dexterity, heroClass));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE), life(base.vitality, heroClass, level));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.MANA), mana(base.energy, heroClass, level));\\n    attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE_CHANCES), lifeChances(heroClass, level));\\n\\n    result = new uint32[](3);\\n    result[0] = uint32(life(base.vitality, heroClass, level).toUint());\\n    result[1] = uint32(mana(base.energy, heroClass, level).toUint());\\n    result[2] = uint32(lifeChances(heroClass, uint32(level)).toUint());\\n  }\\n\\n  function updateCoreDependAttributesInMemory(\\n    int32[] memory attributes,\\n    int32[] memory bonus,\\n    uint heroClass,\\n    uint32 level\\n  ) internal pure returns (int32[] memory) {\\n    int32 strength = attributes[uint(IStatController.ATTRIBUTES.STRENGTH)];\\n    int32 dexterity = attributes[uint(IStatController.ATTRIBUTES.DEXTERITY)];\\n    int32 vitality = attributes[uint(IStatController.ATTRIBUTES.VITALITY)];\\n    int32 energy = attributes[uint(IStatController.ATTRIBUTES.ENERGY)];\\n\\n    attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)] = minDamage(strength, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DAMAGE_MIN)];\\n    attributes[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)] = maxDamage(strength, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DAMAGE_MAX)];\\n    attributes[uint(IStatController.ATTRIBUTES.ATTACK_RATING)] = attackRating(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.ATTACK_RATING)];\\n    attributes[uint(IStatController.ATTRIBUTES.DEFENSE)] = defense(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.DEFENSE)];\\n    attributes[uint(IStatController.ATTRIBUTES.BLOCK_RATING)] = blockRating(dexterity, heroClass) + bonus[uint(IStatController.ATTRIBUTES.BLOCK_RATING)];\\n    attributes[uint(IStatController.ATTRIBUTES.LIFE)] = life(vitality, heroClass, level) + bonus[uint(IStatController.ATTRIBUTES.LIFE)];\\n    attributes[uint(IStatController.ATTRIBUTES.MANA)] = mana(energy, heroClass, level) + bonus[uint(IStatController.ATTRIBUTES.MANA)];\\n    return attributes;\\n  }\\n\\n  function updateCoreDependAttributes(\\n    IController controller,\\n    bytes32[] storage attributes,\\n    bytes32[] storage bonusMain,\\n    bytes32[] storage bonusExtra,\\n    IStatController.ChangeableStats memory _heroStats,\\n    uint index,\\n    address heroToken,\\n    int32 base\\n  ) internal {\\n    uint heroClass = IHeroController(controller.heroController()).heroClass(heroToken);\\n    if (index == uint(IStatController.ATTRIBUTES.STRENGTH)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN),\\n        StatLib.minDamage(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MIN))\\n      );\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX),\\n        StatLib.maxDamage(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DAMAGE_MAX))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.DEXTERITY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING),\\n        StatLib.attackRating(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.ATTACK_RATING))\\n      );\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.DEFENSE),\\n        StatLib.defense(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.DEFENSE))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.DEFENSE))\\n      );\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING),\\n        StatLib.blockRating(base, heroClass)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.BLOCK_RATING))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.VITALITY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.LIFE),\\n        StatLib.life(base, heroClass, _heroStats.level)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.LIFE))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.LIFE))\\n      );\\n    } else if (index == uint(IStatController.ATTRIBUTES.ENERGY)) {\\n\\n      attributes.setInt32(uint(IStatController.ATTRIBUTES.MANA),\\n        StatLib.mana(base, heroClass, _heroStats.level)\\n        + bonusMain.getInt32(uint(IStatController.ATTRIBUTES.MANA))\\n        + bonusExtra.getInt32(uint(IStatController.ATTRIBUTES.MANA))\\n      );\\n    }\\n  }\\n\\n  function attributesAdd(int32[] memory base, int32[] memory add) internal pure returns (int32[] memory) {\\n    unchecked{\\n      for (uint i; i < base.length; ++i) {\\n        base[i] += add[i];\\n      }\\n    }\\n    return base;\\n  }\\n\\n// Currently this function is not used\\n//  function attributesRemove(int32[] memory base, int32[] memory remove) internal pure returns (int32[] memory) {\\n//    unchecked{\\n//      for (uint i; i < base.length; ++i) {\\n//        base[i] = CalcLib.minusWithMinFloorI32(base[i], remove[i]);\\n//      }\\n//    }\\n//    return base;\\n//  }\\n\\n  function packChangeableStats(IStatController.ChangeableStats memory stats) internal pure returns (bytes32) {\\n    uint32[] memory cData = new uint32[](5);\\n    cData[0] = stats.level;\\n    cData[1] = stats.experience;\\n    cData[2] = stats.life;\\n    cData[3] = stats.mana;\\n    cData[4] = stats.lifeChances;\\n\\n    return cData.packUint32Array();\\n  }\\n\\n  function unpackChangeableStats(bytes32 data) internal pure returns (IStatController.ChangeableStats memory result) {\\n    uint32[] memory cData = data.unpackUint32Array();\\n    return IStatController.ChangeableStats({\\n      level: cData[0],\\n      experience: cData[1],\\n      life: cData[2],\\n      mana: cData[3],\\n      lifeChances: cData[4]\\n    });\\n  }\\n\\n  function bytesToFullAttributesArray(bytes32[] memory attributes) internal pure returns (int32[] memory result) {\\n    (int32[] memory values, uint8[] memory ids) = attributes.toInt32ArrayWithIds();\\n    return valuesToFullAttributesArray(values, ids);\\n  }\\n\\n  function valuesToFullAttributesArray(int32[] memory values, uint8[] memory ids) internal pure returns (int32[] memory result) {\\n    result = new int32[](uint(IStatController.ATTRIBUTES.END_SLOT));\\n    for (uint i; i < values.length; ++i) {\\n      int32 value = values[i];\\n      if (value != 0) {\\n        result[ids[i]] = value;\\n      }\\n    }\\n  }\\n  //endregion --------------------------- CALCULATIONS\\n\\n}\\n\",\"keccak256\":\"0x7c620e54a4e0a50ebc566ef993d709d6badd2a7e366950513a7641d4414aabd6\",\"license\":\"BUSL-1.1\"},\"contracts/openzeppelin/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // To implement this library for multiple types with as little code repetition as possible, we write it in\\n  // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n  // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n  /**\\n   * @dev Query for a nonexistent map key.\\n     */\\n  error EnumerableMapNonexistentKey(bytes32 key);\\n\\n  struct Bytes32ToBytes32Map {\\n    // Storage of keys\\n    EnumerableSet.Bytes32Set _keys;\\n    mapping(bytes32 key => bytes32) _values;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n    map._values[key] = value;\\n    return map._keys.add(key);\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n    delete map._values[key];\\n    return map._keys.remove(key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n    return map._keys.contains(key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n  function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n    return map._keys.length();\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n    bytes32 key = map._keys.at(index);\\n    return (key, map._values[key]);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == bytes32(0)) {\\n      return (contains(map, key), bytes32(0));\\n    } else {\\n      return (true, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == 0 && !contains(map, key)) {\\n      revert EnumerableMapNonexistentKey(key);\\n    }\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n    return map._keys.values();\\n  }\\n\\n  // UintToUintMap\\n\\n  struct UintToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(UintToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(key)));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintToAddressMap\\n\\n  struct UintToAddressMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressToUintMap\\n\\n  struct AddressToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n    return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n    return remove(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(AddressToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (address(uint160(uint256(key))), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // Bytes32ToUintMap\\n\\n  struct Bytes32ToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n  function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n    return set(map._inner, key, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n  function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n    return remove(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n     */\\n  function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n    return contains(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n     */\\n  function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (key, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n  function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, key);\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n  function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n    return uint256(get(map._inner, key));\\n  }\\n\\n  /**\\n   * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = keys(map._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x5052395b3d57e4347a977f96eba69188b4a952594afae411910995ecab5c1d05\",\"license\":\"MIT\"},\"contracts/openzeppelin/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position is the index of the value in the `values` array plus 1.\\n    // Position 0 is used to mean a value is not in the set.\\n    mapping(bytes32 value => uint256) _positions;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._positions[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We cache the value's position to prevent multiple reads from the same storage slot\\n    uint256 position = set._positions[value];\\n\\n    if (position != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 valueIndex = position - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (valueIndex != lastIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the lastValue to the index where the value to delete is\\n        set._values[valueIndex] = lastValue;\\n        // Update the tracked position of the lastValue (that was just moved)\\n        set._positions[lastValue] = position;\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the tracked position for the deleted slot\\n      delete set._positions[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._positions[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n     */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n     */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n     */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xd5483249a7bac53a40791ade8d640831cdec526eea6b42a4db68f2ce13c008fa\",\"license\":\"MIT\"},\"contracts/openzeppelin/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n  struct InitializableStorage {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n         */\\n    uint64 _initialized;\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n    bool _initializing;\\n  }\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n  /**\\n   * @dev The contract is already initialized.\\n     */\\n  error InvalidInitialization();\\n\\n  /**\\n   * @dev The contract is not initializing.\\n     */\\n  error NotInitializing();\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n  event Initialized(uint64 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier initializer() {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    // Cache values to avoid duplicated sloads\\n    bool isTopLevelCall = !$._initializing;\\n    uint64 initialized = $._initialized;\\n\\n    // Allowed calls:\\n    // - initialSetup: the contract is not in the initializing state and no previous version was\\n    //                 initialized\\n    // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n    //                 current contract is just being deployed\\n    bool initialSetup = initialized == 0 && isTopLevelCall;\\n    bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n    if (!initialSetup && !construction) {\\n      revert InvalidInitialization();\\n    }\\n    $._initialized = 1;\\n    if (isTopLevelCall) {\\n      $._initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      $._initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier reinitializer(uint64 version) {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    if ($._initializing || $._initialized >= version) {\\n      revert InvalidInitialization();\\n    }\\n    $._initialized = version;\\n    $._initializing = true;\\n    _;\\n    $._initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n  modifier onlyInitializing() {\\n    _checkInitializing();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n  function _checkInitializing() internal view virtual {\\n    if (!_isInitializing()) {\\n      revert NotInitializing();\\n    }\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n  function _disableInitializers() internal virtual {\\n    // solhint-disable-next-line var-name-mixedcase\\n    InitializableStorage storage $ = _getInitializableStorage();\\n\\n    if ($._initializing) {\\n      revert InvalidInitialization();\\n    }\\n    if ($._initialized != type(uint64).max) {\\n      $._initialized = type(uint64).max;\\n      emit Initialized(type(uint64).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n  function _getInitializedVersion() internal view returns (uint64) {\\n    return _getInitializableStorage()._initialized;\\n  }\\n\\n  /**\\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n  function _isInitializing() internal view returns (bool) {\\n    return _getInitializableStorage()._initializing;\\n  }\\n\\n  /**\\n   * @dev Returns a pointer to the storage namespace.\\n     */\\n  // solhint-disable-next-line var-name-mixedcase\\n  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n    assembly {\\n      $.slot := INITIALIZABLE_STORAGE\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x80aa3fc0fc9afdf84bd1a51716150cd13041f42d920a9afa8020ea41cf673809\",\"license\":\"MIT\"},\"contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n\\n  /**\\n    * @dev Muldiv operation overflow.\\n   */\\n  error MathOverflowedMulDiv();\\n\\n  enum Rounding {\\n    Floor, // Toward negative infinity\\n    Ceil, // Toward positive infinity\\n    Trunc, // Toward zero\\n    Expand // Away from zero\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      // Guarantee the same behavior as in a regular Solidity division.\\n      return a / b;\\n    }\\n\\n    // The following calculation ensures accurate ceiling division without overflow.\\n    // Since a is non-zero, (a - 1) / b will not overflow.\\n    // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n    // but the largest value we can obtain is type(uint256).max - 1, which happens\\n    // when a = type(uint256).max and b = 1.\\n    unchecked {\\n      return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n    unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n      uint256 prod0 = x * y; // Least significant 256 bits of the product\\n      uint256 prod1; // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(x, y, not(0))\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n      if (prod1 == 0) {\\n        // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n        // The surrounding unchecked block does not change this fact.\\n        // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n        return prod0 / denominator;\\n      }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n      if (denominator <= prod1) {\\n        revert MathOverflowedMulDiv();\\n      }\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n      uint256 remainder;\\n      assembly {\\n      // Compute remainder using mulmod.\\n        remainder := mulmod(x, y, denominator)\\n\\n      // Subtract 256 bit number from 512 bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n    // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n      uint256 twos = denominator & (0 - denominator);\\n      assembly {\\n      // Divide denominator by twos.\\n        denominator := div(denominator, twos)\\n\\n      // Divide [prod1 prod0] by twos.\\n        prod0 := div(prod0, twos)\\n\\n      // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n\\n    // Shift in bits from prod1 into prod0.\\n      prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n      uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n    // works in modular arithmetic, doubling the correct bits in each step.\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n      result = prod0 * inverse;\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n    unchecked {\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      return min(result, a / result);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = sqrt(a);\\n      return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 128;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 64;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 32;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 16;\\n      }\\n      if (value >> 8 > 0) {\\n        value >>= 8;\\n        result += 8;\\n      }\\n      if (value >> 4 > 0) {\\n        value >>= 4;\\n        result += 4;\\n      }\\n      if (value >> 2 > 0) {\\n        value >>= 2;\\n        result += 2;\\n      }\\n      if (value >> 1 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log2(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >= 10 ** 64) {\\n        value /= 10 ** 64;\\n        result += 64;\\n      }\\n      if (value >= 10 ** 32) {\\n        value /= 10 ** 32;\\n        result += 32;\\n      }\\n      if (value >= 10 ** 16) {\\n        value /= 10 ** 16;\\n        result += 16;\\n      }\\n      if (value >= 10 ** 8) {\\n        value /= 10 ** 8;\\n        result += 8;\\n      }\\n      if (value >= 10 ** 4) {\\n        value /= 10 ** 4;\\n        result += 4;\\n      }\\n      if (value >= 10 ** 2) {\\n        value /= 10 ** 2;\\n        result += 2;\\n      }\\n      if (value >= 10 ** 1) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log10(value);\\n      return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 16;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 8;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 4;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 2;\\n      }\\n      if (value >> 8 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log256(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n    return uint8(rounding) % 2 == 1;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4d972e3e1d79f693b6cb42007d23c27256cb6f087392edea24b93585a822572c\",\"license\":\"MIT\"},\"contracts/proxy/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract Controllable is Initializable, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"1.0.0\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  // init implementation contract\\n  constructor() initializer {}\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    _init(controller_);\\n  }\\n\\n  function _init(address controller_) private {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address value_) public override view returns (bool) {\\n    return value_ == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address value_) public override view returns (bool) {\\n    return IController(controller()).governance() == value_;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view override returns (uint) {\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view override returns (address) {\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1edc53f0d11834bebf4485746d04112ed10db9d4cb19b4945362c593ebf97daf\",\"license\":\"BUSL-1.1\"},\"contracts/relay/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/IAppErrors.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771Context {\\n  // for whitelist new relayers need to add new constants and update proxies\\n  address private constant GELATO_RELAY_1_BALANCE_ERC_2771 = 0xd8253782c45a12053594b9deB72d8e8aB2Fca54c;\\n  address private constant SACRA_RELAY = 0x52CEba41Da235Af367bFC0b0cCd3314cb901bB5F;\\n\\n  function isTrustedForwarder(address forwarder) public view virtual returns (bool){\\n    return forwarder == GELATO_RELAY_1_BALANCE_ERC_2771 || forwarder == SACRA_RELAY;\\n  }\\n\\n  function _msgSender() internal view virtual returns (address sender) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n      return sender;\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      return msg.data[: msg.data.length - 20];\\n    } else {\\n      return msg.data;\\n    }\\n  }\\n\\n  /// @notice Return true if given address is not a smart contract but a wallet address.\\n  /// @dev It is not 100% guarantee after EIP-3074 implementation, use it as an additional check.\\n  /// @return true if the address is a wallet.\\n  function _isNotSmartContract() internal view returns (bool) {\\n    return isTrustedForwarder(msg.sender) || msg.sender == tx.origin;\\n  }\\n\\n  function onlyEOA() internal view {\\n    if (!_isNotSmartContract()) {\\n      revert IAppErrors.NotEOA(msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1ca981a603a741a635268b53ecde2ea35fa994a4a809e1a4947e47ba8cc565ee\",\"license\":\"MIT\"},\"contracts/solady/LibPRNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for generating pseudorandom numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\\n/// @author LazyShuffler based on NextShuffler by aschlosberg (divergencearran)\\n/// (https://github.com/divergencetech/ethier/blob/main/contracts/random/NextShuffler.sol)\\nlibrary LibPRNG {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The initial length must be greater than zero and less than `2**32 - 1`.\\n    error InvalidInitialLazyShufflerLength();\\n\\n    /// @dev The new length must not be less than the current length.\\n    error InvalidNewLazyShufflerLength();\\n\\n    /// @dev The lazy shuffler has not been initialized.\\n    error LazyShufflerNotInitialized();\\n\\n    /// @dev Cannot double initialize the lazy shuffler.\\n    error LazyShufflerAlreadyInitialized();\\n\\n    /// @dev The lazy shuffle has finished.\\n    error LazyShuffleFinished();\\n\\n    /// @dev The queried index is out of bounds.\\n    error LazyShufflerGetOutOfBounds();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev A pseudorandom number state in memory.\\n    struct PRNG {\\n        uint256 state;\\n    }\\n\\n    /// @dev A lazy Fisher-Yates shuffler for a range `[0..n)` in storage.\\n    struct LazyShuffler {\\n        // Bits Layout:\\n        // - [0..31]    `numShuffled`\\n        // - [32..223]  `permutationSlot`\\n        // - [224..255] `length`\\n        uint256 _state;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         OPERATIONS                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Seeds the `prng` with `state`.\\n    function seed(PRNG memory prng, uint256 state) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(prng, state)\\n        }\\n    }\\n\\n    /// @dev Returns the next pseudorandom uint256.\\n    /// All bits of the returned uint256 pass the NIST Statistical Test Suite.\\n    function next(PRNG memory prng) internal pure returns (uint256 result) {\\n        // We simply use `keccak256` for a great balance between\\n        // runtime gas costs, bytecode size, and statistical properties.\\n        //\\n        // A high-quality LCG with a 32-byte state\\n        // is only about 30% more gas efficient during runtime,\\n        // but requires a 32-byte multiplier, which can cause bytecode bloat\\n        // when this function is inlined.\\n        //\\n        // Using this method is about 2x more efficient than\\n        // `nextRandomness = uint256(keccak256(abi.encode(randomness)))`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := keccak256(prng, 0x20)\\n            mstore(prng, result)\\n        }\\n    }\\n\\n    /// @dev Returns a pseudorandom uint256, uniformly distributed\\n    /// between 0 (inclusive) and `upper` (exclusive).\\n    /// If your modulus is big, this method is recommended\\n    /// for uniform sampling to avoid modulo bias.\\n    /// For uniform sampling across all uint256 values,\\n    /// or for small enough moduli such that the bias is neligible,\\n    /// use {next} instead.\\n    function uniform(PRNG memory prng, uint256 upper) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := keccak256(prng, 0x20)\\n                mstore(prng, result)\\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\\n            }\\n            result := mod(result, upper)\\n        }\\n    }\\n\\n    /// @dev Shuffles the array in-place with Fisher-Yates shuffle.\\n    function shuffle(PRNG memory prng, uint256[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a)\\n            let w := not(0)\\n            let mask := shr(128, w)\\n            if n {\\n                for { a := add(a, 0x20) } 1 {} {\\n                    // We can just directly use `keccak256`, cuz\\n                    // the other approaches don't save much.\\n                    let r := keccak256(prng, 0x20)\\n                    mstore(prng, r)\\n\\n                    // Note that there will be a very tiny modulo bias\\n                    // if the length of the array is not a power of 2.\\n                    // For all practical purposes, it is negligible\\n                    // and will not be a fairness or security concern.\\n                    {\\n                        let j := add(a, shl(5, mod(shr(128, r), n)))\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let i := add(a, shl(5, n))\\n                        let t := mload(i)\\n                        mstore(i, mload(j))\\n                        mstore(j, t)\\n                    }\\n\\n                    {\\n                        let j := add(a, shl(5, mod(and(r, mask), n)))\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let i := add(a, shl(5, n))\\n                        let t := mload(i)\\n                        mstore(i, mload(j))\\n                        mstore(j, t)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Shuffles the bytes in-place with Fisher-Yates shuffle.\\n    function shuffle(PRNG memory prng, bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a)\\n            let w := not(0)\\n            let mask := shr(128, w)\\n            if n {\\n                let b := add(a, 0x01)\\n                for { a := add(a, 0x20) } 1 {} {\\n                    // We can just directly use `keccak256`, cuz\\n                    // the other approaches don't save much.\\n                    let r := keccak256(prng, 0x20)\\n                    mstore(prng, r)\\n\\n                    // Note that there will be a very tiny modulo bias\\n                    // if the length of the array is not a power of 2.\\n                    // For all practical purposes, it is negligible\\n                    // and will not be a fairness or security concern.\\n                    {\\n                        let o := mod(shr(128, r), n)\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let t := mload(add(b, n))\\n                        mstore8(add(a, n), mload(add(b, o)))\\n                        mstore8(add(a, o), t)\\n                    }\\n\\n                    {\\n                        let o := mod(and(r, mask), n)\\n                        n := add(n, w) // `sub(n, 1)`.\\n                        if iszero(n) { break }\\n\\n                        let t := mload(add(b, n))\\n                        mstore8(add(a, n), mload(add(b, o)))\\n                        mstore8(add(a, o), t)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a sample from the standard normal distribution denominated in `WAD`.\\n    function standardNormalWad(PRNG memory prng) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Technically, this is the Irwin-Hall distribution with 20 samples.\\n            // The chance of drawing a sample outside 10 \\u03c3 from the standard normal distribution\\n            // is \\u2248 0.000000000000000000000015, which is insignificant for most practical purposes.\\n            // Passes the Kolmogorov-Smirnov test for 200k samples. Uses about 322 gas.\\n            result := keccak256(prng, 0x20)\\n            mstore(prng, result)\\n            let n := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43 // Prime.\\n            let a := 0x100000000000000000000000000000051 // Prime and a primitive root of `n`.\\n            let m := 0x1fffffffffffffff1fffffffffffffff1fffffffffffffff1fffffffffffffff\\n            let s := 0x1000000000000000100000000000000010000000000000001\\n            let r1 := mulmod(result, a, n)\\n            let r2 := mulmod(r1, a, n)\\n            let r3 := mulmod(r2, a, n)\\n            // forgefmt: disable-next-item\\n            result := sub(sar(96, mul(26614938895861601847173011183,\\n                add(add(shr(192, mul(s, add(and(m, result), and(m, r1)))),\\n                shr(192, mul(s, add(and(m, r2), and(m, r3))))),\\n                shr(192, mul(s, and(m, mulmod(r3, a, n))))))), 7745966692414833770)\\n        }\\n    }\\n\\n    /// @dev Returns a sample from the unit exponential distribution denominated in `WAD`.\\n    function exponentialWad(PRNG memory prng) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Passes the Kolmogorov-Smirnov test for 200k samples.\\n            // Gas usage varies, starting from about 172+ gas.\\n            let r := keccak256(prng, 0x20)\\n            mstore(prng, r)\\n            let p := shl(129, r)\\n            let w := shl(1, r)\\n            if iszero(gt(w, p)) {\\n                let n := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43 // Prime.\\n                let a := 0x100000000000000000000000000000051 // Prime and a primitive root of `n`.\\n                for {} 1 {} {\\n                    r := mulmod(r, a, n)\\n                    if iszero(lt(shl(129, r), w)) {\\n                        r := mulmod(r, a, n)\\n                        result := add(1000000000000000000, result)\\n                        w := shl(1, r)\\n                        p := shl(129, r)\\n                        if iszero(lt(w, p)) { break }\\n                        continue\\n                    }\\n                    w := shl(1, r)\\n                    if iszero(lt(w, shl(129, r))) { break }\\n                }\\n            }\\n            result := add(div(p, shl(129, 170141183460469231732)), result)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*       STORAGE-BASED RANGE LAZY SHUFFLING OPERATIONS        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the state for lazy-shuffling the range `[0..n)`.\\n    /// Reverts if `n == 0 || n >= 2**32 - 1`.\\n    /// Reverts if `$` has already been initialized.\\n    /// If you need to reduce the length after initialization, just use a fresh new `$`.\\n    function initialize(LazyShuffler storage $, uint256 n) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(sub(n, 1), 0xfffffffe)) {\\n                mstore(0x00, 0x83b53941) // `InvalidInitialLazyShufflerLength()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if sload($.slot) {\\n                mstore(0x00, 0x0c9f11f2) // `LazyShufflerAlreadyInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, $.slot)\\n            sstore($.slot, or(shl(224, n), shl(32, shr(64, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Increases the length of `$`.\\n    /// Reverts if `$` has not been initialized.\\n    function grow(LazyShuffler storage $, uint256 n) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            // If the new length is smaller than the old length, revert.\\n            if lt(n, shr(224, state)) {\\n                mstore(0x00, 0xbed37c6e) // `InvalidNewLazyShufflerLength()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            sstore($.slot, or(shl(224, n), shr(32, shl(32, state))))\\n        }\\n    }\\n\\n    /// @dev Restarts the shuffler by setting `numShuffled` to zero,\\n    /// such that all elements can be drawn again.\\n    /// Restarting does NOT clear the internal permutation, nor changes the length.\\n    /// Even with the same sequence of randomness, reshuffling can yield different results.\\n    function restart(LazyShuffler storage $) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot)\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            sstore($.slot, shl(32, shr(32, state)))\\n        }\\n    }\\n\\n    /// @dev Returns the number of elements that have been shuffled.\\n    function numShuffled(LazyShuffler storage $) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := and(0xffffffff, sload($.slot))\\n        }\\n    }\\n\\n    /// @dev Returns the length of `$`.\\n    /// Returns zero if `$` is not initialized, else a non-zero value less than `2**32 - 1`.\\n    function length(LazyShuffler storage $) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := shr(224, sload($.slot))\\n        }\\n    }\\n\\n    /// @dev Returns if `$` has been initialized.\\n    function initialized(LazyShuffler storage $) internal view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := iszero(iszero(sload($.slot)))\\n        }\\n    }\\n\\n    /// @dev Returns if there are any more elements left to shuffle.\\n    /// Reverts if `$` is not initialized.\\n    function finished(LazyShuffler storage $) internal view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            if iszero(state) {\\n                mstore(0x00, 0x1ead2566) // `LazyShufflerNotInitialized()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := eq(shr(224, state), and(0xffffffff, state))\\n        }\\n    }\\n\\n    /// @dev Returns the current value stored at `index`, accounting for all historical shuffling.\\n    /// Reverts if `index` is greater than or equal to the `length` of `$`.\\n    function get(LazyShuffler storage $, uint256 index) internal view returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let state := sload($.slot) // The packed value at `$`.\\n            let n := shr(224, state) // Length of `$`.\\n            if iszero(lt(index, n)) {\\n                mstore(0x00, 0x61367cc4) // `LazyShufflerGetOutOfBounds()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let u32 := gt(n, 0xfffe)\\n            let s := add(shr(sub(4, u32), index), shr(64, shl(32, state))) // Bucket slot.\\n            let o := shl(add(4, u32), and(index, shr(u32, 15))) // Bucket slot offset (bits).\\n            let m := sub(shl(shl(u32, 16), 1), 1) // Value mask.\\n            result := and(m, shr(o, sload(s)))\\n            result := xor(index, mul(xor(index, sub(result, 1)), iszero(iszero(result))))\\n        }\\n    }\\n\\n    /// @dev Does a single Fisher-Yates shuffle step, increments the `numShuffled` in `$`,\\n    /// and returns the next value in the shuffled range.\\n    /// `randomness` can be taken from a good-enough source, or a higher quality source like VRF.\\n    /// Reverts if there are no more values to shuffle, which includes the case if `$` is not initialized.\\n    function next(LazyShuffler storage $, uint256 randomness) internal returns (uint256 chosen) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function _get(u32_, state_, i_) -> _value {\\n                let s_ := add(shr(sub(4, u32_), i_), shr(64, shl(32, state_))) // Bucket slot.\\n                let o_ := shl(add(4, u32_), and(i_, shr(u32_, 15))) // Bucket slot offset (bits).\\n                let m_ := sub(shl(shl(u32_, 16), 1), 1) // Value mask.\\n                _value := and(m_, shr(o_, sload(s_)))\\n                _value := xor(i_, mul(xor(i_, sub(_value, 1)), iszero(iszero(_value))))\\n            }\\n            function _set(u32_, state_, i_, value_) {\\n                let s_ := add(shr(sub(4, u32_), i_), shr(64, shl(32, state_))) // Bucket slot.\\n                let o_ := shl(add(4, u32_), and(i_, shr(u32_, 15))) // Bucket slot offset (bits).\\n                let m_ := sub(shl(shl(u32_, 16), 1), 1) // Value mask.\\n                let v_ := sload(s_) // Bucket slot value.\\n                value_ := mul(iszero(eq(i_, value_)), add(value_, 1))\\n                sstore(s_, xor(v_, shl(o_, and(m_, xor(shr(o_, v_), value_)))))\\n            }\\n            let state := sload($.slot) // The packed value at `$`.\\n            let shuffled := and(0xffffffff, state) // Number of elements shuffled.\\n            let n := shr(224, state) // Length of `$`.\\n            let remainder := sub(n, shuffled) // Number of elements left to shuffle.\\n            if iszero(remainder) {\\n                mstore(0x00, 0x51065f79) // `LazyShuffleFinished()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, randomness) // (Re)hash the randomness so that we don't\\n            mstore(0x20, shuffled) // need to expect guarantees on its distribution.\\n            let index := add(mod(keccak256(0x00, 0x40), remainder), shuffled)\\n            chosen := _get(gt(n, 0xfffe), state, index)\\n            _set(gt(n, 0xfffe), state, index, _get(gt(n, 0xfffe), state, shuffled))\\n            _set(gt(n, 0xfffe), state, shuffled, chosen)\\n            sstore($.slot, add(1, state)) // Increment the `numShuffled` by 1, and store it.\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdcb71f8dc72bb7384776154ca24d34c23e3c9bcf124bc75f0d2e379f9ebd021d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b03166000811580156200005d5750825b90506000826001600160401b031660011480156200007a5750303b155b90508115801562000089575080155b15620000a85760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000d757845460ff60401b1916680100000000000000001785555b83156200011e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050615c6680620001336000396000f3fe608060405234801561001057600080fd5b50600436106102135760003560e01c8063975fdfea11610126578063d87b687d116100b3578063d87b687d146104ca578063d9f72d80146104dd578063dd21b9291461053c578063dee1f0e41461054f578063dfcb87e514610562578063e3dacdb614610575578063ee1fe2ad14610588578063f77c47911461059b578063f863208d146105a3578063fafc4bfd146105ab578063ffa1ad74146105be57600080fd5b8063975fdfea146103fc5780639b92d4c51461040f5780639d0bcca014610422578063a24835d11461042a578063aef874fa1461043d578063b429afeb1461045e578063bc78570114610471578063bf105a0014610484578063cad181b914610497578063ce11a209146104b757600080fd5b8063399fa840116101a4578063399fa840146103295780634593144c1461033c5780634fac6ccd146103445780635040f95214610357578063572b6c051461036a57806370435ed11461037d5780637401edba146103905780637cc96380146103a357806382b538de146103ab578063936725ec146103cb57600080fd5b8063010759751461021857806307d79427146102425780630bcfdc1414610257578063173cc5221461027757806319ab453c146102975780631af65859146102aa5780631cdaab67146102bd57806324e44dfc146102dd57806327238f12146102f0578063325a19f114610313575b600080fd5b61022b610226366004614755565b6105e2565b6040516102399291906147c0565b60405180910390f35b610255610250366004614835565b6105fb565b005b61026a610265366004614877565b6106a2565b60405161023991906148c8565b61028a610285366004614971565b6106b9565b604051610239919061498a565b6102556102a5366004614877565b6106c4565b6102556102b83660046149ac565b6107be565b6102d06102cb366004614755565b6107d5565b6040516102399190614a46565b61022b6102eb366004614755565b6107ee565b6103036102fe366004614755565b6107fb565b6040519015158152602001610239565b61031b610807565b604051908152602001610239565b610255610337366004614877565b610840565b61031b61085c565b610255610352366004614877565b61088c565b61026a610365366004614877565b61099d565b610303610378366004614877565b6109ae565b61025561038b366004614ac6565b6109fc565b61031b61039e366004614755565b610a2e565b61031b610aab565b6103be6103b9366004614877565b610ac9565b6040516102399190614bc1565b6103ef604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102399190614c79565b61025561040a366004614cc8565b610ada565b61025561041d366004614ac6565b610af8565b61028a610b20565b610255610438366004614755565b610b50565b61045061044b366004614755565b610be4565b604051610239929190614d1f565b61030361046c366004614877565b610bf1565b61025561047f366004614d38565b610c16565b610255610492366004614d80565b610cc7565b6104aa6104a5366004614877565b610d49565b6040516102399190614dc5565b6104aa6104c5366004614755565b610d5a565b6102556104d8366004614d80565b610d6c565b6104f06104eb366004614877565b610d8e565b6040516102399190815163ffffffff9081168252602080840151821690830152604080840151821690830152606080840151821690830152608092830151169181019190915260a00190565b61026a61054a366004614877565b610d9f565b61030361055d366004614877565b610db0565b610450610570366004614877565b610e35565b61022b610583366004614877565b610e4a565b61031b610596366004614e04565b610e56565b61028a610e6b565b61031b610e9b565b61022b6105b9366004614755565b610ea5565b6103ef60405180604001604052806005815260200164312e302e3160d81b81525081565b6060806105ef8484610eb2565b915091505b9250929050565b73a28536629916fb8fa55c297a5DfB4F2bBA13Bf2463c4be6cb461061d610e6b565b610625610f31565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152908216602482015290861660448201526064810185905260ff8416608482015260a4015b60006040518083038186803b15801561068557600080fd5b505af4158015610699573d6000803e3d6000fd5b50505050505050565b6106aa614599565b6106b382610f53565b92915050565b60006106b382610fd2565b60006106ce610fe6565b805490915060ff600160401b82041615906001600160401b03166000811580156106f55750825b90506000826001600160401b031660011480156107115750303b155b90508115801561071f575080155b1561073d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561076757845460ff60401b1916600160401b1785555b6107708661100a565b83156107b657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6106996107c9610e6b565b8888888888888861101b565b6107dd6145c1565b6107e783836111a9565b9392505050565b6060806105ef84846111df565b60006107e783836111fc565b600061083b61083760017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614e48565b5490565b905090565b61085961084b610e6b565b610853610f31565b83611237565b50565b600061083b61083760017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614e48565b3330146108de5760405162461bcd60e51b815260206004820152601b60248201527a24b731b932b0b9b2903932bb34b9b4b7b7103337b93134b23232b760291b60448201526064015b60405180910390fd5b60006108fc6108376001600080516020615c11833981519152614e48565b610907906001614e5b565b9050610929816109266001600080516020615c11833981519152614e48565b55565b6109588261092660017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614e48565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6109a5614599565b6106b382611389565b60006001600160a01b03821673d8253782c45a12053594b9deb72d8e8ab2fca54c14806106b357506001600160a01b0382167352ceba41da235af367bfc0b0ccd3314cb901bb5f1492915050565b610a24610a07611406565b610a0f610e6b565b610a17610f31565b8b8b8b8b8b8b8b8b61141e565b5050505050505050565b604051633a00f6dd60e11b815260009073a28536629916fb8fa55c297a5DfB4F2bBA13Bf2490637401edba90610a6a9086908690600401614d1f565b602060405180830381865af4158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190614e6e565b600061083b6108376001600080516020615c11833981519152614e48565b610ad16145e3565b6106b3826117de565b610af4610ae5610e6b565b610aed610f31565b8484611813565b5050565b610a24610b03611406565b610b0b610e6b565b610b13610f31565b8b8b8b8b8b8b8b8b611c2b565b600061083b61083760017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614e48565b73a28536629916fb8fa55c297a5DfB4F2bBA13Bf2463c1336c97610b72610e6b565b610b7a610f31565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152908216602482015290851660448201526064810184905260840160006040518083038186803b158015610bd057600080fd5b505af41580156107b6573d6000803e3d6000fd5b6000806105ef8484611eaa565b6000610bfb610e6b565b6001600160a01b0316826001600160a01b0316149050919050565b73a28536629916fb8fa55c297a5DfB4F2bBA13Bf24630244c7ef610c38611406565b610c40610e6b565b610c48610f31565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b03918216602484015281166044830152808816606483015260848201879052851660a482015260c4810184905260e40160006040518083038186803b158015610cb357600080fd5b505af4158015610a24573d6000803e3d6000fd5b73a28536629916fb8fa55c297a5DfB4F2bBA13Bf2463dfd41dfb610ce9611406565b610cf1610e6b565b610cf9610f31565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b03918216602484015281166044830152861660648201526084810185905260a4810184905260c40161066d565b610d51614634565b6106b382611ee8565b610d62614634565b6107e78383611f1d565b73a28536629916fb8fa55c297a5DfB4F2bBA13Bf246334d9da65610ce9611406565b610d9661465d565b6106b382611f53565b610da7614599565b6106b382611f88565b6000816001600160a01b0316610dc4610e6b565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190614e87565b6001600160a01b03161492915050565b600080610e4183612005565b91509150915091565b606080610e4183612039565b60006107e7610e63610e6b565b3385856120b1565b600061083b61083760017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614e48565b600061083b612165565b6060806105ef8484612177565b6060806105ef610ec0612194565b600d016000610ecf87876121b8565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f2757602002820191906000526020600020905b815481526020019060010190808311610f13575b5050505050612208565b6000610f3c336109ae565b15610f4e575060131936013560601c90565b503390565b610f5b614599565b6106b3610f66612194565b6001600160a01b0384166000908152600891909101602090815260409182902080548351818402810184019094528084529091830182828015610fc857602002820191906000526020600020905b815481526020019060010190808311610fb4575b50505050506124f9565b60006106b382610fe0612194565b90612710565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b61101261271c565b61085981612743565b336001600160a01b0316886001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190614e87565b6001600160a01b0316141580156111115750336001600160a01b0316886001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190614e87565b6001600160a01b031614155b15611131573360405163f652640360e01b81526004016108d5919061498a565b610a2461113c612194565b896001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190614e87565b89898989898989612862565b6111b16145c1565b6107e76111bc612194565b600a0160006111cb86866121b8565b815260200190815260200160002054612b9d565b6060806105ef6111ed612194565b600e016000610ecf87876121b8565b600080611207612194565b600b01600061121f6001600160a01b038716866121b8565b81526020019081526020016000205414905092915050565b6000611241612194565b905061124d8484612c06565b6112578183612c92565b506001600160a01b038216600090815260028201602090815260408083208390556003840182528083208390556004840190915281206112969161468b565b6001600160a01b038216600090815260058201602052604081206112b99161468b565b6001600160a01b038216600090815260068201602090815260408083208390556007840190915281206112eb9161468b565b6001600160a01b0382166000908152600882016020526040812061130e9161468b565b6001600160a01b03821660008181526009830160205260408120819055600f83019161133a90826121b8565b8152602001908152602001600020600090557ff4bab09e0bfc491adb818cac1805d51def9f0ec39825ffb0e42aeaa46494efce8260405161137b919061498a565b60405180910390a150505050565b611391614599565b6106b361139c612194565b6001600160a01b0384166000908152600791909101602090815260409182902080548351818402810184019094528084529091830182828015610fc85760200282019190600052602060002090815481526020019060010190808311610fb45750505050506124f9565b6000611411336109ae565b8061083b57505032331490565b6114278b612ca7565b6000611431612194565b905085841415806114425750858214155b156114605760405163586cb9e160e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091528b6001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190614e87565b6001600160a01b0390811682526040805163683fedf760e01b81529051918e169163683fedf7916004808201926020929091908290030181865afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190614e87565b81602001906001600160a01b031690816001600160a01b0316815250508b6001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e29190614e87565b6001600160a01b031660408083018290525163509e788360e11b815263a13cf10690611612908d9060040161498a565b6040805180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116529190614ea4565b506001600160a01b03908116606083015260a082018a90528a1660808201526040810151611684908d908d8d8d612cc7565b80602001516001600160a01b0316639a641e028b8b6040518363ffffffff1660e01b81526004016116b6929190614d1f565b602060405180830381865afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f79190614ed2565b6001600160401b03161561171e576040516332811e7b60e21b815260040160405180910390fd5b60608101516001600160a01b031661174957604051630e8e75df60e21b815260040160405180910390fd5b60005b878110156117ce576117c683838e8c8c8681811061176c5761176c614efb565b90506020020160208101906117819190614877565b8b8b8781811061179357611793614efb565b905060200201358a8a888181106117ac576117ac614efb565b90506020020160208101906117c19190614f11565b612edd565b60010161174c565b5050505050505050505050505050565b6117e66145e3565b6106b36117f1612194565b6001600160a01b0384166000908152600291909101602052604090205461338a565b61181d8484612c06565b6000611827612194565b90506118366020830183614f11565b60ff166000036118585760405162a2622f60e41b815260040160405180910390fd5b6118686040830160208401614f11565b60ff1660000361188b57604051631e1c984560e31b815260040160405180910390fd5b611895818461339b565b61194c576001600160a01b03831660009081526002820160205260408120546118bd9061338a565b90506118cf6060840160408501614f3d565b600c8111156118e0576118e0614a30565b8160400151600c8111156118f6576118f6614a30565b1461191457604051632d5a77ad60e11b815260040160405180910390fd5b6119216020840184614f11565b60ff16816000015160ff161461194a5760405163d300ee6760e01b815260040160405180910390fd5b505b61196361195e368490038401846150b1565b6133b0565b6001600160a01b038416600090815260028301602052604090205561199e6119936101a084016101808501614877565b836101a001356134b6565b6001600160a01b03841660009081526003830160205260409020556119dd836119cb6101c0850185615168565b6119d4906152e8565b83600401613503565b60046119ec6020840184614f11565b60ff1603611afe57611a97611a056101e084018461539e565b611a0f90806153b4565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611a4f925050506101e085018561539e565b611a5d9060208101906153b4565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092939250506136ad9050565b6001600160a01b038416600090815260058301602090815260409091208251611ac693919291909101906146a9565b50611ae2611add36849003840161020085016153fd565b61390b565b6001600160a01b03841660009081526006830160205260409020555b6003611b0d6020840184614f11565b60ff1603611b5d57611b3983611b276102a0850185615168565b611b30906152e8565b83600701613503565b611b5d83611b4b6102c0850185615168565b611b54906152e8565b83600801613503565b6002611b6c6020840184614f11565b60ff1603611beb57611b8f611b8a3684900384016102e08501615486565b613a34565b6001600160a01b0384166000908152600983016020526040902055611bc0611b8a3684900384016102e08501615486565b600f82016000611bd96001600160a01b038716826121b8565b81526020810191909152604001600020555b7fc95b7ce18e68e0cd72d853f72c56778d20af395933e5707fabe05f07cdd8bce48383604051611c1c9291906158b3565b60405180910390a15050505050565b611c348b612ca7565b60006040518061012001604052806000151581526020018c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b031681526020018c6001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce99190614e87565b6001600160a01b031681526020018c6001600160a01b031663683fedf76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d599190614e87565b6001600160a01b031681526020018c6001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc89190614e87565b6001600160a01b0316815260200189905290506000611de5612194565b9050868581141580611df75750808414155b15611e155760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015611e9957611e9183858c8c85818110611e3757611e37614efb565b9050602002016020810190611e4c9190614877565b8b8b86818110611e5e57611e5e614efb565b905060200201358a8a87818110611e7757611e77614efb565b9050602002016020810190611e8c9190614f11565b613ac6565b600101611e18565b505050505050505050505050505050565b6000806105ef611eb8612194565b600b016000611ed06001600160a01b038816876121b8565b8152602001908152602001600020549060a082901c90565b611ef0614634565b6106b3611efb612194565b6001600160a01b03841660009081526009919091016020526040902054613c1e565b611f25614634565b6107e7611f30612194565b600f016000611f3f86866121b8565b815260200190815260200160002054613c1e565b611f5b61465d565b6106b3611f66612194565b6001600160a01b03841660009081526006919091016020526040902054613cca565b611f90614599565b6106b3611f9b612194565b6001600160a01b0384166000908152600491909101602090815260409182902080548351818402810184019094528084529091830182828015610fc85760200282019190600052602060002090815481526020019060010190808311610fb45750505050506124f9565b600080610e41612013612194565b6001600160a01b038516600090815260039190910160205260409020549060a082901c90565b606080610e41612047612194565b6001600160a01b0385166000908152600591909101602090815260409182902080548351818402810184019094528084529091830182828015610f275760200282019190600052602060002090815481526020019060010190808311610f13575050505050612208565b600073c21C7836466cEE25a7dBe31EaE735d1C9B117F8063245b1a236120d5612194565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b038089166024830152808816604483015280871660648301528516608482015260a401602060405180830381865af4158015612138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215c9190614e6e565b95945050505050565b600061083b612172612194565b613dae565b6060806105ef612185612194565b600c016000610ecf87876121b8565b7fe78a2879cd91c3f7b62ea14e72546fed47c40919bca4daada532a5fa05ac670090565b60006001600160401b038211156121e557604051633995b34160e01b8152600481018390526024016108d5565b5067ffffffffffffffff60a01b60a09190911b166001600160a01b039091161790565b80516060908190600061221c8260086159d6565b90506000816001600160401b0381111561223857612238614f58565b604051908082528060200260200182016040528015612261578160200160208202803683370190505b5090506000826001600160401b0381111561227e5761227e614f58565b6040519080825280602002602001820160405280156122a7578160200160208202803683370190505b5090506000805b858110156123d45760005b60088110156123cb576000816122d08460086159d6565b6122da9190614e5b565b90506122e78260206159d6565b8b84815181106122f9576122f9614efb565b602002602001015160001c901c60020b86828151811061231b5761231b614efb565b60039290920b6020928302919091018201526123389083906159d6565b612343906018614e5b565b8b848151811061235557612355614efb565b602002602001015160001c901c85828151811061237457612374614efb565b602002602001019060ff16908160ff168152505085818151811061239a5761239a614efb565b602002602001015160030b6000036123b257506123cb565b836123bc816159ed565b945050508060010190506122b9565b506001016122ae565b50806001600160401b038111156123ed576123ed614f58565b604051908082528060200260200182016040528015612416578160200160208202803683370190505b509650806001600160401b0381111561243157612431614f58565b60405190808252806020026020018201604052801561245a578160200160208202803683370190505b50955060005b818110156124ee5783818151811061247a5761247a614efb565b602002602001015188828151811061249457612494614efb565b602002602001019060030b908160030b815250508281815181106124ba576124ba614efb565b60200260200101518782815181106124d4576124d4614efb565b60ff90921660209283029190910190910152600101612460565b505050505050915091565b612501614599565b81516000816001600160401b0381111561251d5761251d614f58565b604051908082528060200260200182016040528015612546578160200160208202803683370190505b5090506000826001600160401b0381111561256357612563614f58565b60405190808252806020026020018201604052801561258c578160200160208202803683370190505b5090506000836001600160401b038111156125a9576125a9614f58565b6040519080825280602002602001820160405280156125d2578160200160208202803683370190505b5090506000846001600160401b038111156125ef576125ef614f58565b604051908082528060200260200182016040528015612618578160200160208202803683370190505b50905060005b858110156126ea5761265888828151811061263b5761263b614efb565b602002602001015190600882901c90602883901c90604884901c90565b88858151811061266a5761266a614efb565b6020026020010188868151811061268357612683614efb565b6020026020010188878151811061269c5761269c614efb565b602002602001018888815181106126b5576126b5614efb565b63ffffffff90951660209586029190910190940193909352600393840b9092529290910b905260ff909116905260010161261e565b506040805160808101825294855260208501939093529183015260608201529392505050565b60006107e78383613db8565b612724613de2565b61274157604051631afcd79f60e31b815260040160405180910390fd5b565b6001600160a01b03811661278b5760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b60448201526064016108d5565b6127ba8161092660017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614e48565b6127e94261092660017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614e48565b6128184361092660017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614e48565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b60006128776001600160a01b038916886121b8565b6001600160a01b038916600090815260028c0160205260408120549192509061289f9061338a565b6000838152600a8d016020526040812054919250906128bd90612b9d565b90508160400151600c8111156128d5576128d5614a30565b6000036128f757896040516327f46c4f60e01b81526004016108d5919061498a565b8a6001600160a01b031663906f0ced89898560400151600c81111561291e5761291e614a30565b8a8f8f60006040518863ffffffff1660e01b81526004016129459796959493929190615a06565b600060405180830381600087803b15801561295f57600080fd5b505af1158015612973573d6000803e3d6000fd5b50505050831561299f576000604082015261298d81613dfc565b6000848152600a8e0160205260409020555b6000838152600c8d0160209081526040808320805482518185028101850190935280835291929091908301828280156129f757602002820191906000526020600020905b8154815260200190600101908083116129e3575b505050505090508051600014612aa2578b6001600160a01b0316639ff45dbe6040518060a001604052808c6001600160a01b031681526020018b8152602001612a3f85613e42565b8152600060208201819052604091820152516001600160e01b031960e084901b168152612a6f9190600401615a55565b600060405180830381600087803b158015612a8957600080fd5b505af1158015612a9d573d6000803e3d6000fd5b505050505b6000848152600b8e0160205260408082209190915551630ee8df4560e31b81526001600160a01b038c1690637746fa2890612ae5908c908a908f90600401615ab1565b600060405180830381600087803b158015612aff57600080fd5b505af1158015612b13573d6000803e3d6000fd5b505050507fd26bc924e2dd5a06c95c625446278e313e22ec09b4f606842d4a603b9dcb795e8b8b8b8b8b8b604051612b86969594939291906001600160a01b03968716815260208101959095529285166040850152606084019190915260ff16608083015290911660a082015260c00190565b60405180910390a150505050505050505050505050565b612ba56145c1565b61ffff601083901c16604082015260ff600883901c81166020830152829081166006811115612bd657612bd6614a30565b82906006811115612be957612be9614a30565b90816006811115612bfc57612bfc614a30565b8152505050919050565b604051631430d62960e21b81526001600160a01b038316906350c358a490612c3290849060040161498a565b602060405180830381865afa158015612c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c739190615ad5565b610af4578060405163451cea1760e11b81526004016108d5919061498a565b60006107e7836001600160a01b038416613e66565b8061085957336040516377817ac360e01b81526004016108d5919061498a565b612cd2828285613f60565b846001600160a01b0316632f91ede96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d349190614e87565b6001600160a01b0316635451da1b83836040518363ffffffff1660e01b8152600401612d61929190614d1f565b602060405180830381865afa158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da29190615ad5565b15612dc4578181604051634f38de4760e11b81526004016108d5929190614d1f565b846001600160a01b03166318d928316040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190615ad5565b15612e4457604051635e1633d360e11b815260040160405180910390fd5b604051631789b7b160e01b81526001600160a01b03851690631789b7b190612e7090859060040161498a565b602060405180830381865afa158015612e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb19190615af2565b60ff16600003612ed6578160405163adc7fced60e01b81526004016108d5919061498a565b5050505050565b612ee8838386613f60565b6001600160a01b0383166000908152600287016020526040812054612f0c9061338a565b90506000612f2b600a8901826111cb6001600160a01b038916886121b8565b825190915060ff16600003612f5557846040516308057f8b60e11b81526004016108d5919061498a565b612f6088868661400d565b15612f805784604051633c9a6ba160e21b81526004016108d5919061498a565b8160400151600c811115612f9657612f96614a30565b600003612fb857846040516327f46c4f60e01b81526004016108d5919061498a565b606082015161ffff1615801590612fd55750604081015161ffff16155b15612ff557846040516318b5fb5360e11b81526004016108d5919061498a565b613012876000015188608001518960a00151856101000151614042565b86600001516001600160a01b031663906f0ced88608001518960a001518560400151600c81111561304557613045614a30565b878a8a60016040518863ffffffff1660e01b815260040161306c9796959493929190615a06565b600060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b50600092505050600c8901816130b96001600160a01b038916886121b8565b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561311157602002820191906000526020600020905b8154815260200190600101908083116130fd575b5050505050905080516000146132695787600001516001600160a01b0316639ff45dbe6040518060a001604052808b608001516001600160a01b031681526020018b60a00151815260200161316585613e42565b8152600160208201526000604091820152516001600160e01b031960e084901b1681526131959190600401615a55565b600060405180830381600087803b1580156131af57600080fd5b505af11580156131c3573d6000803e3d6000fd5b5050895160808b015160a08c0151604051631a95890960e31b81526001600160a01b03909316945063d4ac484893506131fe92600401614d1f565b60a060405180830381865afa15801561321b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323f9190615b0f565b6040015163ffffffff1660000361326957604051630915eecf60e21b815260040160405180910390fd5b6080880151604051630ee8df4560e31b81526001600160a01b03881691637746fa289161329c918b918a90600401615ab1565b600060405180830381600087803b1580156132b657600080fd5b505af11580156132ca573d6000803e3d6000fd5b50505060a089015160808a01516132eb92506001600160a01b0316906121b8565b600b8a0160006133046001600160a01b038a16896121b8565b81526020808201929092526040908101600020929092556080808b015160a0808d015185516001600160a01b03808e1682529581018c90529490921694840194909452606083015260ff8716908201527feb2eb074eb15472636bebc93010969043d430b4a120914dd775a8240cf6d54ff910160405180910390a1505050505050505050565b6133926145e3565b6106b38261412d565b60006107e7836001600160a01b03841661422b565b60006106b3826000015183602001518460400151600c8111156133d5576133d5614a30565b856060015186608001518760c001518860e001518960a001518a61010001518051602082015160408381015160609485015160c01b601b0b60a09190911b60170b60809390931b60130b9390941b600f0b63ffffffff60401b9590911b9490941660ff60381b60389690961b9590951660ff60301b60309790971b9690961660ff60281b60289890981b9790971664ffff00000060189990991b9890981662ff000060109a909a1b9990991661ff0060089b909b1b9a909a1660ff909b169a909a179890981796909617949094179290921717171791909117919091171790565b60006001600160601b038211156134e357604051633995b34160e01b8152600481018390526024016108d5565b506001600160a01b031960a09190911b166001600160a01b039091161790565b60005b825151811015613672578260200151818151811061352657613526614efb565b602002602001015160030b6000148061355f57508260400151818151811061355057613550614efb565b602002602001015160030b6000145b806135a957508260400151818151811061357b5761357b614efb565b602002602001015160030b8360200151828151811061359c5761359c614efb565b602002602001015160030b135b806135ff57506000836020015182815181106135c7576135c7614efb565b602002602001015160030b1280156135ff57506000836040015182815181106135f2576135f2614efb565b602002602001015160030b135b1561366a578260200151818151811061361a5761361a614efb565b60200260200101518360400151828151811061363857613638614efb565b602002602001015160405163afeec43960e01b81526004016108d5929190600392830b8152910b602082015260400190565b600101613506565b5061367c8261427a565b6001600160a01b03841660009081526020838152604090912082516136a793919291909101906146a9565b50505050565b606081518351146136d15760405163586cb9e160e01b815260040160405180910390fd5b6000600884516136e19190615b7d565b6136ec906001614e5b565b90506000816001600160401b0381111561370857613708614f58565b604051908082528060200260200182016040528015613731578160200160208202803683370190505b50905060005b828110156139025760005b60088110156138f9576000816137598460086159d6565b6137639190614e5b565b90508751811061377357506138f9565b627fffff60020b88828151811061378c5761378c614efb565b602002602001015160030b13806137c55750627fffff1960020b8882815181106137b8576137b8614efb565b602002602001015160030b125b15613803578781815181106137dc576137dc614efb565b602002602001015160030b604051632eb1d06960e01b81526004016108d591815260200190565b87818151811061381557613815614efb565b602002602001015160030b60000361384057604051637c946ed760e01b815260040160405180910390fd5b61384b8260206159d6565b88828151811061385d5761385d614efb565b602002602001015162ffffff1660001b901b84848151811061388157613881614efb565b6020026020010181815117915081815250508160206138a091906159d6565b6138ab906018614e5b565b8782815181106138bd576138bd614efb565b602002602001015160ff1660001b901b8484815181106138df576138df614efb565b602090810291909101018051909117905250600101613742565b50600101613737565b50949350505050565b60408051600580825260c082019092526000918291906020820160a08036833701905050905082600001518160008151811061394957613949614efb565b602002602001019063ffffffff16908163ffffffff168152505082602001518160018151811061397b5761397b614efb565b602002602001019063ffffffff16908163ffffffff16815250508260400151816002815181106139ad576139ad614efb565b602002602001019063ffffffff16908163ffffffff16815250508260600151816003815181106139df576139df614efb565b602002602001019063ffffffff16908163ffffffff1681525050826080015181600481518110613a1157613a11614efb565b602002602001019063ffffffff16908163ffffffff16815250506107e7816143fb565b60006106b382600001516005811115613a4f57613a4f614a30565b6020848101516040808701516060808901518051958101519381015191015160ff9690961660089490941b64ffffffff00169390931760289190911b63ffffffff60281b161760489390931b600c0b9290921760689290921b60100b9190911760889190911b60140b1760a89190911b60180b1790565b613ae884602001518560a0015186604001518760600151886101000151612cc7565b8360c001516001600160a01b0316639a641e0285606001518661010001516040518363ffffffff1660e01b8152600401613b23929190614d1f565b602060405180830381865afa158015613b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b649190614ed2565b6001600160401b031615613b8b5760405163899454e360e01b815260040160405180910390fd5b613bb084610100015185606001516001600160a01b03166121b890919063ffffffff16565b600b86016000613bc96001600160a01b038716866121b8565b81526020019081526020016000205414613bf85782604051632cab491d60e21b81526004016108d5919061498a565b612ed6858560e0015185858860600151896101000151878b608001518c60000151612862565b613c26614634565b613c2e6146f4565b60a883901c600390810b6060830152608884901c810b604080840191909152606885901c820b602080850191909152604886901c830b8452602886901c830b91850191909152600885901c90910b908301528260ff81166005811115613c9657613c96614a30565b83906005811115613ca957613ca9614a30565b90816005811115613cbc57613cbc614a30565b905250506060820152919050565b613cd261465d565b6000613cdd8361447d565b90506040518060a0016040528082600081518110613cfd57613cfd614efb565b602002602001015163ffffffff16815260200182600181518110613d2357613d23614efb565b602002602001015163ffffffff16815260200182600281518110613d4957613d49614efb565b602002602001015163ffffffff16815260200182600381518110613d6f57613d6f614efb565b602002602001015163ffffffff16815260200182600481518110613d9557613d95614efb565b602002602001015163ffffffff16815250915050919050565b60006106b3825490565b6000826000018281548110613dcf57613dcf614efb565b9060005260206000200154905092915050565b6000613dec610fe6565b54600160401b900460ff16919050565b60006106b382600001516006811115613e1757613e17614a30565b6020840151604085015160ff9290921660089190911b61ff00161760109190911b63ffff0000161790565b6060600080613e5084612208565b91509150613e5e82826144f2565b949350505050565b60008181526001830160205260408120548015613f4f576000613e8a600183614e48565b8554909150600090613e9e90600190614e48565b9050808214613f03576000866000018281548110613ebe57613ebe614efb565b9060005260206000200154905080876000018481548110613ee157613ee1614efb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613f1457613f14615b9f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b3565b60009150506106b3565b5092915050565b6040516331a9108f60e11b8152600481018390526001600160a01b038083169190851690636352211e90602401602060405180830381865afa158015613faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fce9190614e87565b6001600160a01b0316146140085760405163c8e98f8960e01b81526001600160a01b038085166004830152821660248201526044016108d5565b505050565b600080600b8501816140286001600160a01b038716866121b8565b815260200190815260200160002054141590509392505050565b604051630fba6a5960e11b81526000906001600160a01b03861690631f74d4b2906140739087908790600401614d1f565b608060405180830381865afa158015614090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b49190615bb5565b9050806000015160030b826000015160030b13806140df5750806020015160030b826020015160030b135b806140f75750806040015160030b826040015160030b135b8061410f5750806060015160030b826060015160030b135b15612ed657604051637e2b537360e11b815260040160405180910390fd5b6141356145e3565b61413d6145e3565b60ff8084168252600884901c81166020830152601084901c16600c81111561416757614167614a30565b8160400190600c81111561417d5761417d614a30565b9081600c81111561419057614190614a30565b905250601883901c61ffff16606082810191909152602884901c60ff908116608080850191909152603086901c821660c080860191909152603887901c90921660e0850152604086811c63ffffffff1660a0808701919091526101008601805189871c600390810b9091528151948a901c810b6020959095019490945280519189901c840b9190920152519590911c900b9301929092525090565b6000818152600183016020526040812054614272575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b3565b5060006106b3565b805151602082015151606091908114158061429a57508260400151518114155b806142aa57508260600151518114155b156142c85760405163586cb9e160e01b815260040160405180910390fd5b806001600160401b038111156142e0576142e0614f58565b604051908082528060200260200182016040528015614309578160200160208202803683370190505b50915060005b818110156143f4576143cf8460000151828151811061433057614330614efb565b60200260200101518560200151838151811061434e5761434e614efb565b60200260200101518660400151848151811061436c5761436c614efb565b60200260200101518760600151858151811061438a5761438a614efb565b602090810291909101015160ff9390931660089290921b64ffffffff00169190911760289190911b63ffffffff60281b161760489190911b63ffffffff60481b161790565b8382815181106143e1576143e1614efb565b602090810291909101015260010161430f565b5050919050565b8051600090600881111561442c57604051633d71388b60e21b815260048101829052600860248201526044016108d5565b6000805b82811015614475576144438160206159d6565b85828151811061445557614455614efb565b602090810291909101015163ffffffff16901b9190911790600101614430565b509392505050565b604080516008808252610120820190925260609160009190602082016101008036833701905050905060005b6008811015613f59576144bd8160206159d6565b8460001c901c8282815181106144d5576144d5614efb565b63ffffffff909216602092830291909101909101526001016144a9565b60408051602b8082526105808201909252606091602082016105608036833701905050905060005b8351811015613f5957600084828151811061453757614537614efb565b602002602001015190508060030b60001461459057808385848151811061456057614560614efb565b602002602001015160ff168151811061457b5761457b614efb565b602002602001019060030b908160030b815250505b5060010161451a565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040805160608101909152806000815260006020820181905260409091015290565b60408051610120810182526000808252602082018190529091820190815260006020820181905260408201819052606082018190526080820181905260a082015260c00161462f6146f4565b905290565b60408051608081019091528060008152600060208201819052604082015260600161462f6146f4565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b5080546000825590600052602060002090810190610859919061471b565b8280548282559060005260206000209081019282156146e4579160200282015b828111156146e45782518255916020019190600101906146c9565b506146f092915061471b565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b808211156146f0576000815560010161471c565b6001600160a01b038116811461085957600080fd5b803561475081614730565b919050565b6000806040838503121561476857600080fd5b823561477381614730565b946020939093013593505050565b60008151808452602080850194506020840160005b838110156147b557815160ff1687529582019590820190600101614796565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156147fc57815160030b845292840192908401906001016147dd565b50505083810360208501526148118186614781565b9695505050505050565b60ff8116811461085957600080fd5b80356147508161481b565b60008060006060848603121561484a57600080fd5b833561485581614730565b925060208401359150604084013561486c8161481b565b809150509250925092565b60006020828403121561488957600080fd5b81356107e781614730565b60008151808452602080850194506020840160005b838110156147b557815160030b875295820195908201906001016148a9565b6000602080835283516080828501526148e460a0850182614781565b905081850151601f19808684030160408701526149018383614894565b9250604087015191508086840301606087015261491e8383614894565b6060880151878203909201608088015281518082529185019350600092508401905b8083101561496657835163ffffffff168252928401926001929092019190840190614940565b509695505050505050565b60006020828403121561498357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b801515811461085957600080fd5b600080600080600080600060e0888a0312156149c757600080fd5b87356149d281614730565b96506020880135955060408801356149e981614730565b9450606088013593506080880135614a008161481b565b925060a0880135614a1081614730565b915060c0880135614a208161499e565b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b8151606082019060078110614a5d57614a5d614a30565b8083525060ff602084015116602083015261ffff604084015116604083015292915050565b60008083601f840112614a9457600080fd5b5081356001600160401b03811115614aab57600080fd5b6020830191508360208260051b85010111156105f457600080fd5b60008060008060008060008060a0898b031215614ae257600080fd5b8835614aed81614730565b97506020890135965060408901356001600160401b0380821115614b1057600080fd5b614b1c8c838d01614a82565b909850965060608b0135915080821115614b3557600080fd5b614b418c838d01614a82565b909650945060808b0135915080821115614b5a57600080fd5b50614b678b828c01614a82565b999c989b5096995094979396929594505050565b600d8110614b8b57614b8b614a30565b9052565b805160030b8252602081015160030b6020830152604081015160030b6040830152606081015160030b60608301525050565b60006101808201905060ff835116825260ff60208401511660208301526040830151614bf06040840182614b7b565b506060830151614c06606084018261ffff169052565b506080830151614c1b608084018260ff169052565b5060a0830151614c3360a084018263ffffffff169052565b5060c0830151614c4860c084018260ff169052565b5060e0830151614c5d60e084018260ff169052565b5061010080840151614c7182850182614b8f565b505092915050565b60006020808352835180602085015260005b81811015614ca757858101830151858201604001528201614c8b565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060408385031215614cdb57600080fd5b8235614ce681614730565b915060208301356001600160401b03811115614d0157600080fd5b83016103c08186031215614d1457600080fd5b809150509250929050565b6001600160a01b03929092168252602082015260400190565b60008060008060808587031215614d4e57600080fd5b8435614d5981614730565b9350602085013592506040850135614d7081614730565b9396929550929360600135925050565b600080600060608486031215614d9557600080fd5b8335614da081614730565b95602085013595506040909401359392505050565b60068110614b8b57614b8b614a30565b600060e082019050614dd8828451614db5565b602083015160030b6020830152604083015160030b60408301526060830151613f596060840182614b8f565b60008060408385031215614e1757600080fd5b8235614e2281614730565b91506020830135614d1481614730565b634e487b7160e01b600052601160045260246000fd5b818103818111156106b3576106b3614e32565b808201808211156106b3576106b3614e32565b600060208284031215614e8057600080fd5b5051919050565b600060208284031215614e9957600080fd5b81516107e781614730565b60008060408385031215614eb757600080fd5b8251614ec281614730565b6020939093015192949293505050565b600060208284031215614ee457600080fd5b81516001600160401b03811681146107e757600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215614f2357600080fd5b81356107e78161481b565b8035600d811061475057600080fd5b600060208284031215614f4f57600080fd5b6107e782614f2e565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614f9057614f90614f58565b60405290565b60405161012081016001600160401b0381118282101715614f9057614f90614f58565b60405160a081016001600160401b0381118282101715614f9057614f90614f58565b604051601f8201601f191681016001600160401b038111828210171561500357615003614f58565b604052919050565b803561ffff8116811461475057600080fd5b63ffffffff8116811461085957600080fd5b80356147508161501d565b8060030b811461085957600080fd5b60006080828403121561505b57600080fd5b615063614f6e565b905081356150708161503a565b815260208201356150808161503a565b602082015260408201356150938161503a565b604082015260608201356150a68161503a565b606082015292915050565b600061018082840312156150c457600080fd5b6150cc614f96565b6150d58361482a565b81526150e36020840161482a565b60208201526150f460408401614f2e565b60408201526151056060840161500b565b60608201526151166080840161482a565b608082015261512760a0840161502f565b60a082015261513860c0840161482a565b60c082015261514960e0840161482a565b60e082015261010061515d85828601615049565b908201529392505050565b60008235607e1983360301811261517e57600080fd5b9190910192915050565b60006001600160401b038211156151a1576151a1614f58565b5060051b60200190565b600082601f8301126151bc57600080fd5b813560206151d16151cc83615188565b614fdb565b8083825260208201915060208460051b8701019350868411156151f357600080fd5b602086015b8481101561496657803561520b8161481b565b83529183019183016151f8565b600082601f83011261522957600080fd5b813560206152396151cc83615188565b8083825260208201915060208460051b87010193508684111561525b57600080fd5b602086015b848110156149665780356152738161503a565b8352918301918301615260565b600082601f83011261529157600080fd5b813560206152a16151cc83615188565b8083825260208201915060208460051b8701019350868411156152c357600080fd5b602086015b848110156149665780356152db8161501d565b83529183019183016152c8565b6000608082360312156152fa57600080fd5b615302614f6e565b82356001600160401b038082111561531957600080fd5b615325368387016151ab565b8352602085013591508082111561533b57600080fd5b61534736838701615218565b6020840152604085013591508082111561536057600080fd5b61536c36838701615218565b6040840152606085013591508082111561538557600080fd5b5061539236828601615280565b60608301525092915050565b60008235603e1983360301811261517e57600080fd5b6000808335601e198436030181126153cb57600080fd5b8301803591506001600160401b038211156153e557600080fd5b6020019150600581901b36038213156105f457600080fd5b600060a0828403121561540f57600080fd5b615417614fb9565b82356154228161501d565b815260208301356154328161501d565b602082015260408301356154458161501d565b604082015260608301356154588161501d565b6060820152608083013561546b8161501d565b60808201529392505050565b80356006811061475057600080fd5b600060e0828403121561549857600080fd5b6154a0614f6e565b6154a983615477565b815260208301356154b98161503a565b602082015260408301356154cc8161503a565b60408201526154de8460608501615049565b60608201529392505050565b80356154f58161503a565b60030b825260208101356155088161503a565b60030b6020830152604081013561551e8161503a565b60030b604083015260608101356155348161503a565b8060030b6060840152505050565b803561554d8161481b565b60ff16825260208101356155608161481b565b60ff16602083015261557460408201614f2e565b6155816040840182614b7b565b5061558e6060820161500b565b61ffff1660608301526155a36080820161482a565b60ff1660808301526155b760a0820161502f565b63ffffffff1660a08301526155ce60c0820161482a565b60ff1660c08301526155e260e0820161482a565b60ff1660e08301526101006140088184018383016154ea565b60008235607e1983360301811261561157600080fd5b90910192915050565b6000808335601e1984360301811261563157600080fd5b83016020810192503590506001600160401b0381111561565057600080fd5b8060051b36038213156105f457600080fd5b8183526000602080850194508260005b858110156147b55781356156858161481b565b60ff1687529582019590820190600101615672565b8183526000602080850194508260005b858110156147b55781356156bd8161503a565b60030b875295820195908201906001016156aa565b60006156de828361561a565b608085526156f0608086018284615662565b9150506020615702602085018561561a565b868403602088015261571584828461569a565b93505050615726604085018561561a565b868403604088015261573984828461569a565b9350505061574a606085018561561a565b86840360608801528084529092600091906020015b8183101561578c5784356157728161501d565b63ffffffff1681529383019360019290920191830161575f565b979650505050505050565b60008235603e1983360301811261561157600080fd5b60006157b9828361561a565b604085526157cb604086018284615662565b9150506157db602084018461561a565b858303602087015261481183828461569a565b80356157f98161501d565b63ffffffff90811683526020820135906158128261501d565b90811660208401526040820135906158298261501d565b90811660408401526060820135906158408261501d565b90811660608401526080820135906158578261501d565b808216608085015250505050565b6158778261587283615477565b614db5565b60208101356158858161503a565b60030b6020830152604081013561589b8161503a565b60030b6040830152610af460608084019083016154ea565b6001600160a01b03831681526040602082018190526158d490820183615542565b60006158e36101808401614745565b6101c06158fa818501836001600160a01b03169052565b6101e091506101a085013582850152615915818601866155fb565b90506102006103c08186015261592f6104008601836156d2565b915061593d83870187615797565b9250603f19808684030161022087015261595783856157ad565b935061596961024087018389016157ee565b6159776102a08801886155fb565b92506102e0915080868503018287015261599184846156d2565b93506159a16102c08801886155fb565b92508086850301610300870152506159b983836156d2565b92506159cb6103208601828801615865565b509095945050505050565b80820281158282048414176106b3576106b3614e32565b6000600182016159ff576159ff614e32565b5060010190565b6001600160a01b0397881681526001600160401b03969096166020870152604086019490945260ff929092166060850152909316608083015260a082019290925290151560c082015260e00190565b6020815260018060a01b038251166020820152602082015160408201526000604083015160a06060840152615a8d60c0840182614894565b90506060840151151560808401526080840151151560a08401528091505092915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215615ae757600080fd5b81516107e78161499e565b600060208284031215615b0457600080fd5b81516107e78161481b565b600060a08284031215615b2157600080fd5b615b29614fb9565b8251615b348161501d565b81526020830151615b448161501d565b60208201526040830151615b578161501d565b60408201526060830151615b6a8161501d565b6060820152608083015161546b8161501d565b600082615b9a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600060808284031215615bc757600080fd5b615bcf614f6e565b8251615bda8161503a565b81526020830151615bea8161503a565b60208201526040830151615bfd8161503a565b604082015260608301516154de8161503a56fe22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bda264697066735822122059ad3be19ac5d76c44943ec960417c9f6a7bae4acb05ff1509dcb1680636dec564736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102135760003560e01c8063975fdfea11610126578063d87b687d116100b3578063d87b687d146104ca578063d9f72d80146104dd578063dd21b9291461053c578063dee1f0e41461054f578063dfcb87e514610562578063e3dacdb614610575578063ee1fe2ad14610588578063f77c47911461059b578063f863208d146105a3578063fafc4bfd146105ab578063ffa1ad74146105be57600080fd5b8063975fdfea146103fc5780639b92d4c51461040f5780639d0bcca014610422578063a24835d11461042a578063aef874fa1461043d578063b429afeb1461045e578063bc78570114610471578063bf105a0014610484578063cad181b914610497578063ce11a209146104b757600080fd5b8063399fa840116101a4578063399fa840146103295780634593144c1461033c5780634fac6ccd146103445780635040f95214610357578063572b6c051461036a57806370435ed11461037d5780637401edba146103905780637cc96380146103a357806382b538de146103ab578063936725ec146103cb57600080fd5b8063010759751461021857806307d79427146102425780630bcfdc1414610257578063173cc5221461027757806319ab453c146102975780631af65859146102aa5780631cdaab67146102bd57806324e44dfc146102dd57806327238f12146102f0578063325a19f114610313575b600080fd5b61022b610226366004614755565b6105e2565b6040516102399291906147c0565b60405180910390f35b610255610250366004614835565b6105fb565b005b61026a610265366004614877565b6106a2565b60405161023991906148c8565b61028a610285366004614971565b6106b9565b604051610239919061498a565b6102556102a5366004614877565b6106c4565b6102556102b83660046149ac565b6107be565b6102d06102cb366004614755565b6107d5565b6040516102399190614a46565b61022b6102eb366004614755565b6107ee565b6103036102fe366004614755565b6107fb565b6040519015158152602001610239565b61031b610807565b604051908152602001610239565b610255610337366004614877565b610840565b61031b61085c565b610255610352366004614877565b61088c565b61026a610365366004614877565b61099d565b610303610378366004614877565b6109ae565b61025561038b366004614ac6565b6109fc565b61031b61039e366004614755565b610a2e565b61031b610aab565b6103be6103b9366004614877565b610ac9565b6040516102399190614bc1565b6103ef604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102399190614c79565b61025561040a366004614cc8565b610ada565b61025561041d366004614ac6565b610af8565b61028a610b20565b610255610438366004614755565b610b50565b61045061044b366004614755565b610be4565b604051610239929190614d1f565b61030361046c366004614877565b610bf1565b61025561047f366004614d38565b610c16565b610255610492366004614d80565b610cc7565b6104aa6104a5366004614877565b610d49565b6040516102399190614dc5565b6104aa6104c5366004614755565b610d5a565b6102556104d8366004614d80565b610d6c565b6104f06104eb366004614877565b610d8e565b6040516102399190815163ffffffff9081168252602080840151821690830152604080840151821690830152606080840151821690830152608092830151169181019190915260a00190565b61026a61054a366004614877565b610d9f565b61030361055d366004614877565b610db0565b610450610570366004614877565b610e35565b61022b610583366004614877565b610e4a565b61031b610596366004614e04565b610e56565b61028a610e6b565b61031b610e9b565b61022b6105b9366004614755565b610ea5565b6103ef60405180604001604052806005815260200164312e302e3160d81b81525081565b6060806105ef8484610eb2565b915091505b9250929050565b73__$e606fdba99c76896c5b0fb8e6ab34e72a7$__63c4be6cb461061d610e6b565b610625610f31565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152908216602482015290861660448201526064810185905260ff8416608482015260a4015b60006040518083038186803b15801561068557600080fd5b505af4158015610699573d6000803e3d6000fd5b50505050505050565b6106aa614599565b6106b382610f53565b92915050565b60006106b382610fd2565b60006106ce610fe6565b805490915060ff600160401b82041615906001600160401b03166000811580156106f55750825b90506000826001600160401b031660011480156107115750303b155b90508115801561071f575080155b1561073d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561076757845460ff60401b1916600160401b1785555b6107708661100a565b83156107b657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6106996107c9610e6b565b8888888888888861101b565b6107dd6145c1565b6107e783836111a9565b9392505050565b6060806105ef84846111df565b60006107e783836111fc565b600061083b61083760017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b614e48565b5490565b905090565b61085961084b610e6b565b610853610f31565b83611237565b50565b600061083b61083760017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f1614e48565b3330146108de5760405162461bcd60e51b815260206004820152601b60248201527a24b731b932b0b9b2903932bb34b9b4b7b7103337b93134b23232b760291b60448201526064015b60405180910390fd5b60006108fc6108376001600080516020615c11833981519152614e48565b610907906001614e5b565b9050610929816109266001600080516020615c11833981519152614e48565b55565b6109588261092660017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614e48565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b6109a5614599565b6106b382611389565b60006001600160a01b03821673d8253782c45a12053594b9deb72d8e8ab2fca54c14806106b357506001600160a01b0382167352ceba41da235af367bfc0b0ccd3314cb901bb5f1492915050565b610a24610a07611406565b610a0f610e6b565b610a17610f31565b8b8b8b8b8b8b8b8b61141e565b5050505050505050565b604051633a00f6dd60e11b815260009073__$e606fdba99c76896c5b0fb8e6ab34e72a7$__90637401edba90610a6a9086908690600401614d1f565b602060405180830381865af4158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190614e6e565b600061083b6108376001600080516020615c11833981519152614e48565b610ad16145e3565b6106b3826117de565b610af4610ae5610e6b565b610aed610f31565b8484611813565b5050565b610a24610b03611406565b610b0b610e6b565b610b13610f31565b8b8b8b8b8b8b8b8b611c2b565b600061083b61083760017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e4614e48565b73__$e606fdba99c76896c5b0fb8e6ab34e72a7$__63c1336c97610b72610e6b565b610b7a610f31565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152908216602482015290851660448201526064810184905260840160006040518083038186803b158015610bd057600080fd5b505af41580156107b6573d6000803e3d6000fd5b6000806105ef8484611eaa565b6000610bfb610e6b565b6001600160a01b0316826001600160a01b0316149050919050565b73__$e606fdba99c76896c5b0fb8e6ab34e72a7$__630244c7ef610c38611406565b610c40610e6b565b610c48610f31565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b03918216602484015281166044830152808816606483015260848201879052851660a482015260c4810184905260e40160006040518083038186803b158015610cb357600080fd5b505af4158015610a24573d6000803e3d6000fd5b73__$e606fdba99c76896c5b0fb8e6ab34e72a7$__63dfd41dfb610ce9611406565b610cf1610e6b565b610cf9610f31565b6040516001600160e01b031960e086901b16815292151560048401526001600160a01b03918216602484015281166044830152861660648201526084810185905260a4810184905260c40161066d565b610d51614634565b6106b382611ee8565b610d62614634565b6107e78383611f1d565b73__$e606fdba99c76896c5b0fb8e6ab34e72a7$__6334d9da65610ce9611406565b610d9661465d565b6106b382611f53565b610da7614599565b6106b382611f88565b6000816001600160a01b0316610dc4610e6b565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190614e87565b6001600160a01b03161492915050565b600080610e4183612005565b91509150915091565b606080610e4183612039565b60006107e7610e63610e6b565b3385856120b1565b600061083b61083760017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3618614e48565b600061083b612165565b6060806105ef8484612177565b6060806105ef610ec0612194565b600d016000610ecf87876121b8565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f2757602002820191906000526020600020905b815481526020019060010190808311610f13575b5050505050612208565b6000610f3c336109ae565b15610f4e575060131936013560601c90565b503390565b610f5b614599565b6106b3610f66612194565b6001600160a01b0384166000908152600891909101602090815260409182902080548351818402810184019094528084529091830182828015610fc857602002820191906000526020600020905b815481526020019060010190808311610fb4575b50505050506124f9565b60006106b382610fe0612194565b90612710565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b61101261271c565b61085981612743565b336001600160a01b0316886001600160a01b031663524a562f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190614e87565b6001600160a01b0316141580156111115750336001600160a01b0316886001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190614e87565b6001600160a01b031614155b15611131573360405163f652640360e01b81526004016108d5919061498a565b610a2461113c612194565b896001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190614e87565b89898989898989612862565b6111b16145c1565b6107e76111bc612194565b600a0160006111cb86866121b8565b815260200190815260200160002054612b9d565b6060806105ef6111ed612194565b600e016000610ecf87876121b8565b600080611207612194565b600b01600061121f6001600160a01b038716866121b8565b81526020019081526020016000205414905092915050565b6000611241612194565b905061124d8484612c06565b6112578183612c92565b506001600160a01b038216600090815260028201602090815260408083208390556003840182528083208390556004840190915281206112969161468b565b6001600160a01b038216600090815260058201602052604081206112b99161468b565b6001600160a01b038216600090815260068201602090815260408083208390556007840190915281206112eb9161468b565b6001600160a01b0382166000908152600882016020526040812061130e9161468b565b6001600160a01b03821660008181526009830160205260408120819055600f83019161133a90826121b8565b8152602001908152602001600020600090557ff4bab09e0bfc491adb818cac1805d51def9f0ec39825ffb0e42aeaa46494efce8260405161137b919061498a565b60405180910390a150505050565b611391614599565b6106b361139c612194565b6001600160a01b0384166000908152600791909101602090815260409182902080548351818402810184019094528084529091830182828015610fc85760200282019190600052602060002090815481526020019060010190808311610fb45750505050506124f9565b6000611411336109ae565b8061083b57505032331490565b6114278b612ca7565b6000611431612194565b905085841415806114425750858214155b156114605760405163586cb9e160e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091528b6001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190614e87565b6001600160a01b0390811682526040805163683fedf760e01b81529051918e169163683fedf7916004808201926020929091908290030181865afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190614e87565b81602001906001600160a01b031690816001600160a01b0316815250508b6001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e29190614e87565b6001600160a01b031660408083018290525163509e788360e11b815263a13cf10690611612908d9060040161498a565b6040805180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116529190614ea4565b506001600160a01b03908116606083015260a082018a90528a1660808201526040810151611684908d908d8d8d612cc7565b80602001516001600160a01b0316639a641e028b8b6040518363ffffffff1660e01b81526004016116b6929190614d1f565b602060405180830381865afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f79190614ed2565b6001600160401b03161561171e576040516332811e7b60e21b815260040160405180910390fd5b60608101516001600160a01b031661174957604051630e8e75df60e21b815260040160405180910390fd5b60005b878110156117ce576117c683838e8c8c8681811061176c5761176c614efb565b90506020020160208101906117819190614877565b8b8b8781811061179357611793614efb565b905060200201358a8a888181106117ac576117ac614efb565b90506020020160208101906117c19190614f11565b612edd565b60010161174c565b5050505050505050505050505050565b6117e66145e3565b6106b36117f1612194565b6001600160a01b0384166000908152600291909101602052604090205461338a565b61181d8484612c06565b6000611827612194565b90506118366020830183614f11565b60ff166000036118585760405162a2622f60e41b815260040160405180910390fd5b6118686040830160208401614f11565b60ff1660000361188b57604051631e1c984560e31b815260040160405180910390fd5b611895818461339b565b61194c576001600160a01b03831660009081526002820160205260408120546118bd9061338a565b90506118cf6060840160408501614f3d565b600c8111156118e0576118e0614a30565b8160400151600c8111156118f6576118f6614a30565b1461191457604051632d5a77ad60e11b815260040160405180910390fd5b6119216020840184614f11565b60ff16816000015160ff161461194a5760405163d300ee6760e01b815260040160405180910390fd5b505b61196361195e368490038401846150b1565b6133b0565b6001600160a01b038416600090815260028301602052604090205561199e6119936101a084016101808501614877565b836101a001356134b6565b6001600160a01b03841660009081526003830160205260409020556119dd836119cb6101c0850185615168565b6119d4906152e8565b83600401613503565b60046119ec6020840184614f11565b60ff1603611afe57611a97611a056101e084018461539e565b611a0f90806153b4565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611a4f925050506101e085018561539e565b611a5d9060208101906153b4565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092939250506136ad9050565b6001600160a01b038416600090815260058301602090815260409091208251611ac693919291909101906146a9565b50611ae2611add36849003840161020085016153fd565b61390b565b6001600160a01b03841660009081526006830160205260409020555b6003611b0d6020840184614f11565b60ff1603611b5d57611b3983611b276102a0850185615168565b611b30906152e8565b83600701613503565b611b5d83611b4b6102c0850185615168565b611b54906152e8565b83600801613503565b6002611b6c6020840184614f11565b60ff1603611beb57611b8f611b8a3684900384016102e08501615486565b613a34565b6001600160a01b0384166000908152600983016020526040902055611bc0611b8a3684900384016102e08501615486565b600f82016000611bd96001600160a01b038716826121b8565b81526020810191909152604001600020555b7fc95b7ce18e68e0cd72d853f72c56778d20af395933e5707fabe05f07cdd8bce48383604051611c1c9291906158b3565b60405180910390a15050505050565b611c348b612ca7565b60006040518061012001604052806000151581526020018c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b031681526020018c6001600160a01b031663016dff5d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce99190614e87565b6001600160a01b031681526020018c6001600160a01b031663683fedf76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d599190614e87565b6001600160a01b031681526020018c6001600160a01b0316628e96916040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc89190614e87565b6001600160a01b0316815260200189905290506000611de5612194565b9050868581141580611df75750808414155b15611e155760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015611e9957611e9183858c8c85818110611e3757611e37614efb565b9050602002016020810190611e4c9190614877565b8b8b86818110611e5e57611e5e614efb565b905060200201358a8a87818110611e7757611e77614efb565b9050602002016020810190611e8c9190614f11565b613ac6565b600101611e18565b505050505050505050505050505050565b6000806105ef611eb8612194565b600b016000611ed06001600160a01b038816876121b8565b8152602001908152602001600020549060a082901c90565b611ef0614634565b6106b3611efb612194565b6001600160a01b03841660009081526009919091016020526040902054613c1e565b611f25614634565b6107e7611f30612194565b600f016000611f3f86866121b8565b815260200190815260200160002054613c1e565b611f5b61465d565b6106b3611f66612194565b6001600160a01b03841660009081526006919091016020526040902054613cca565b611f90614599565b6106b3611f9b612194565b6001600160a01b0384166000908152600491909101602090815260409182902080548351818402810184019094528084529091830182828015610fc85760200282019190600052602060002090815481526020019060010190808311610fb45750505050506124f9565b600080610e41612013612194565b6001600160a01b038516600090815260039190910160205260409020549060a082901c90565b606080610e41612047612194565b6001600160a01b0385166000908152600591909101602090815260409182902080548351818402810184019094528084529091830182828015610f275760200282019190600052602060002090815481526020019060010190808311610f13575050505050612208565b600073__$5d7d7fdc526783c3dd309d9389950d9fea$",
  "libraries": {
    "ItemLib": "0xc21C7836466cEE25a7dBe31EaE735d1C9B117F80",
    "ItemStatsLib": "0xa28536629916fb8fa55c297a5DfB4F2bBA13Bf24"
  },
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "destroy(address,uint256)": {
        "details": "Some stories can destroy items"
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "registerItem(address,((uint8,uint8,uint8,uint16,uint8,uint32,uint8,uint8,(int32,int32,int32,int32)),address,uint256,(uint8[],int32[],int32[],uint32[]),(uint8[],int32[]),(uint32,uint32,uint32,uint32,uint32),(uint8[],int32[],int32[],uint32[]),(uint8[],int32[],int32[],uint32[]),(uint8,int32,int32,(int32,int32,int32,int32))))": {
        "details": "It's possible to reduce size of the contract on 1kb by replacing calldata=>memory (+2k gas)"
      },
      "repairDurability(address,uint256,uint256)": {
        "details": "Repair durability."
      },
      "revision()": {
        "details": "Contract upgrade counter"
      },
      "takeOffDirectly(address,uint256,address,uint256,uint8,address,bool)": {
        "details": "Some stories can manipulate items"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "VERSION()": {
        "notice": "Version of the contract"
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}